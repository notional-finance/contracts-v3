{"abi": [{"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}], "name": "MarketsInitialized", "type": "event"}, {"inputs": [], "name": "getLibInfo", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "pure", "type": "function"}], "allSourcePaths": {"116": "contracts/proxy/beacon/IBeacon.sol", "122": "interfaces/IEIP20NonStandard.sol", "124": "interfaces/IERC20.sol", "126": "interfaces/WETH9.sol", "127": "interfaces/aave/ILendingPool.sol", "129": "interfaces/chainlink/AggregatorInterface.sol", "130": "interfaces/chainlink/AggregatorV2V3Interface.sol", "131": "interfaces/chainlink/AggregatorV3Interface.sol", "132": "interfaces/compound/CErc20Interface.sol", "134": "interfaces/compound/CTokenInterface.sol", "136": "interfaces/notional/IPrimeCashHoldingsOracle.sol", "137": "interfaces/notional/IRewarder.sol", "22": "contracts/external/actions/InitializeMarketsAction.sol", "32": "contracts/external/actions/nTokenMintAction.sol", "42": "contracts/external/proxies/BaseERC4626Proxy.sol", "46": "contracts/global/Constants.sol", "47": "contracts/global/Deployments.sol", "48": "contracts/global/LibStorage.sol", "51": "contracts/global/Types.sol", "52": "contracts/internal/AccountContextHandler.sol", "53": "contracts/internal/Emitter.sol", "54": "contracts/internal/balances/BalanceHandler.sol", "55": "contracts/internal/balances/ExternalLending.sol", "56": "contracts/internal/balances/Incentives.sol", "57": "contracts/internal/balances/TokenHandler.sol", "58": "contracts/internal/balances/protocols/CompoundHandler.sol", "59": "contracts/internal/balances/protocols/GenericToken.sol", "63": "contracts/internal/markets/CashGroup.sol", "64": "contracts/internal/markets/DateTime.sol", "66": "contracts/internal/markets/InterestRateCurve.sol", "67": "contracts/internal/markets/Market.sol", "68": "contracts/internal/nToken/nTokenCalculations.sol", "69": "contracts/internal/nToken/nTokenHandler.sol", "70": "contracts/internal/nToken/nTokenSupply.sol", "71": "contracts/internal/pCash/PrimeCashExchangeRate.sol", "72": "contracts/internal/pCash/PrimeRateLib.sol", "73": "contracts/internal/pCash/PrimeSupplyCap.sol", "74": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "75": "contracts/internal/portfolio/PortfolioHandler.sol", "77": "contracts/internal/settlement/SettleBitmapAssets.sol", "79": "contracts/internal/valuation/AssetHandler.sol", "87": "contracts/math/ABDKMath64x64.sol", "88": "contracts/math/Bitmap.sol", "89": "contracts/math/FloatingPoint.sol", "90": "contracts/math/SafeInt256.sol", "91": "contracts/math/SafeUint256.sol"}, "ast": {"absolutePath": "contracts/external/actions/InitializeMarketsAction.sol", "exportedSymbols": {"AssetHandler": [48993], "BalanceHandler": [32157], "BalanceState": [67574], "Bitmap": [74359], "BitmapAssetsHandler": [46411], "CashGroup": [37648], "CashGroupParameters": [67590], "Constants": [67350], "DateTime": [68695], "InitializeMarketsAction": [11428], "InterestRateCurve": [39693], "InterestRateParameters": [67744], "Market": [40537], "MarketParameters": [67620], "PortfolioAsset": [67603], "PortfolioHandler": [47781], "PortfolioState": [67542], "PrimeRate": [68026], "PrimeRateLib": [45543], "SafeInt256": [69189], "SafeUint256": [69710], "SettleBitmapAssets": [48180], "nTokenHandler": [42375], "nTokenMintAction": [20586], "nTokenPortfolio": [67508]}, "id": 11429, "license": "BSUL-1.1", "nodeType": "SourceUnit", "nodes": [{"id": 10111, "literals": ["solidity", "=", "0.7", ".6"], "nodeType": "PragmaDirective", "src": "37:23:22"}, {"id": 10112, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "61:19:22"}, {"absolutePath": "contracts/global/Types.sol", "file": "../../global/Types.sol", "id": 10121, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 68058, "src": "82:209:22", "symbolAliases": [{"foreign": {"id": 10113, "name": "PrimeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "95:9:22", "typeDescriptions": {}}}, {"foreign": {"id": 10114, "name": "PortfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "110:14:22", "typeDescriptions": {}}}, {"foreign": {"id": 10115, "name": "MarketParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "130:16:22", "typeDescriptions": {}}}, {"foreign": {"id": 10116, "name": "BalanceState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "152:12:22", "typeDescriptions": {}}}, {"foreign": {"id": 10117, "name": "CashGroupParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "170:19:22", "typeDescriptions": {}}}, {"foreign": {"id": 10118, "name": "nTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "195:15:22", "typeDescriptions": {}}}, {"foreign": {"id": 10119, "name": "InterestRateParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "216:22:22", "typeDescriptions": {}}}, {"foreign": {"id": 10120, "name": "PortfolioAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "244:14:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/global/Constants.sol", "file": "../../global/Constants.sol", "id": 10123, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 67351, "src": "292:53:22", "symbolAliases": [{"foreign": {"id": 10122, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "300:9:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 10125, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 69190, "src": "346:53:22", "symbolAliases": [{"foreign": {"id": 10124, "name": "SafeInt256", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "354:10:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeUint256.sol", "file": "../../math/SafeUint256.sol", "id": 10127, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 69711, "src": "400:55:22", "symbolAliases": [{"foreign": {"id": 10126, "name": "SafeUint256", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "408:11:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/Bitmap.sol", "file": "../../math/Bitmap.sol", "id": 10129, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 74360, "src": "456:45:22", "symbolAliases": [{"foreign": {"id": 10128, "name": "Bitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "464:6:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 10131, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 40538, "src": "503:57:22", "symbolAliases": [{"foreign": {"id": 10130, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "511:6:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/DateTime.sol", "file": "../../internal/markets/DateTime.sol", "id": 10133, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 68696, "src": "561:61:22", "symbolAliases": [{"foreign": {"id": 10132, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "569:8:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 10135, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 37649, "src": "623:63:22", "symbolAliases": [{"foreign": {"id": 10134, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "631:9:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/InterestRateCurve.sol", "file": "../../internal/markets/InterestRateCurve.sol", "id": 10137, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 39694, "src": "687:79:22", "symbolAliases": [{"foreign": {"id": 10136, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "695:17:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/pCash/PrimeRateLib.sol", "file": "../../internal/pCash/PrimeRateLib.sol", "id": 10139, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 45544, "src": "767:67:22", "symbolAliases": [{"foreign": {"id": 10138, "name": "PrimeRateLib", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "775:12:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 10141, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 32158, "src": "835:74:22", "symbolAliases": [{"foreign": {"id": 10140, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "843:14:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 10143, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 47782, "src": "910:79:22", "symbolAliases": [{"foreign": {"id": 10142, "name": "PortfolioHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "918:16:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "file": "../../internal/portfolio/BitmapAssetsHandler.sol", "id": 10145, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 46412, "src": "990:85:22", "symbolAliases": [{"foreign": {"id": 10144, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "998:19:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/settlement/SettleBitmapAssets.sol", "file": "../../internal/settlement/SettleBitmapAssets.sol", "id": 10147, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 48181, "src": "1076:84:22", "symbolAliases": [{"foreign": {"id": 10146, "name": "SettleBitmapAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1084:18:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/nToken/nTokenHandler.sol", "file": "../../internal/nToken/nTokenHandler.sol", "id": 10149, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 42376, "src": "1161:70:22", "symbolAliases": [{"foreign": {"id": 10148, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1169:13:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/valuation/AssetHandler.sol", "file": "../../internal/valuation/AssetHandler.sol", "id": 10151, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 48994, "src": "1232:71:22", "symbolAliases": [{"foreign": {"id": 10150, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1240:12:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/external/actions/nTokenMintAction.sol", "file": "./nTokenMintAction.sol", "id": 10153, "nodeType": "ImportDirective", "scope": 11429, "sourceUnit": 20587, "src": "1305:56:22", "symbolAliases": [{"foreign": {"id": 10152, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1313:16:22", "typeDescriptions": {}}}], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": {"id": 10154, "nodeType": "StructuredDocumentation", "src": "1363:803:22", "text": "@notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n can initialize markets, and this method will be called on behalf of that account. In this action\n the following will occur:\n  - nToken Liquidity Tokens will be settled\n  - Any ifCash assets will be settled\n  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n    to purchase offsetting positions\n  - fCash positions are written to storage\n  - For each market, calculate the proportion of fCash to cash given:\n     - previous oracle rates\n     - rate anchor set by governance\n     - percent of cash to deposit into the market set by governance\n  - Set new markets and add liquidity tokens to portfolio"}, "fullyImplemented": true, "id": 11428, "linearizedBaseContracts": [11428], "name": "InitializeMarketsAction", "nodeType": "ContractDefinition", "nodes": [{"id": 10157, "libraryName": {"id": 10155, "name": "Bitmap", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 74359, "src": "2210:6:22", "typeDescriptions": {"typeIdentifier": "t_contract$_Bitmap_$74359", "typeString": "library Bitmap"}}, "nodeType": "UsingForDirective", "src": "2204:25:22", "typeName": {"id": 10156, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2221:7:22", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"id": 10160, "libraryName": {"id": 10158, "name": "SafeUint256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69710, "src": "2240:11:22", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeUint256_$69710", "typeString": "library SafeUint256"}}, "nodeType": "UsingForDirective", "src": "2234:30:22", "typeName": {"id": 10159, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2256:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"id": 10163, "libraryName": {"id": 10161, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69189, "src": "2275:10:22", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$69189", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "2269:28:22", "typeName": {"id": 10162, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2290:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 10166, "libraryName": {"id": 10164, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 47781, "src": "2308:16:22", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$47781", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "2302:42:22", "typeName": {"id": 10165, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67542, "src": "2329:14:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 10169, "libraryName": {"id": 10167, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 40537, "src": "2355:6:22", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$40537", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "2349:34:22", "typeName": {"id": 10168, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "2366:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 10172, "libraryName": {"id": 10170, "name": "BalanceHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 32157, "src": "2394:14:22", "typeDescriptions": {"typeIdentifier": "t_contract$_BalanceHandler_$32157", "typeString": "library BalanceHandler"}}, "nodeType": "UsingForDirective", "src": "2388:38:22", "typeName": {"id": 10171, "name": "BalanceState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67574, "src": "2413:12:22", "typeDescriptions": {"typeIdentifier": "t_struct$_BalanceState_$67574_storage_ptr", "typeString": "struct BalanceState"}}}, {"id": 10175, "libraryName": {"id": 10173, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 37648, "src": "2437:9:22", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$37648", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "2431:40:22", "typeName": {"id": 10174, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67590, "src": "2451:19:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 10178, "libraryName": {"id": 10176, "name": "PrimeRateLib", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 45543, "src": "2482:12:22", "typeDescriptions": {"typeIdentifier": "t_contract$_PrimeRateLib_$45543", "typeString": "library PrimeRateLib"}}, "nodeType": "UsingForDirective", "src": "2476:33:22", "typeName": {"id": 10177, "name": "PrimeRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 68026, "src": "2499:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$68026_storage_ptr", "typeString": "struct PrimeRate"}}}, {"id": 10181, "libraryName": {"id": 10179, "name": "nTokenHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 42375, "src": "2520:13:22", "typeDescriptions": {"typeIdentifier": "t_contract$_nTokenHandler_$42375", "typeString": "library nTokenHandler"}}, "nodeType": "UsingForDirective", "src": "2514:40:22", "typeName": {"id": 10180, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "2538:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}}, {"id": 10184, "libraryName": {"id": 10182, "name": "InterestRateCurve", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 39693, "src": "2565:17:22", "typeDescriptions": {"typeIdentifier": "t_contract$_InterestRateCurve_$39693", "typeString": "library InterestRateCurve"}}, "nodeType": "UsingForDirective", "src": "2559:51:22", "typeName": {"id": 10183, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67744, "src": "2587:22:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_storage_ptr", "typeString": "struct InterestRateParameters"}}}, {"constant": true, "id": 10187, "mutability": "constant", "name": "MIN_CASH_REQUIRED", "nodeType": "VariableDeclaration", "scope": 11428, "src": "2755:49:22", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10185, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2755:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "value": {"hexValue": "315f303030", "id": 10186, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2799:5:22", "typeDescriptions": {"typeIdentifier": "t_rational_1000_by_1", "typeString": "int_const 1000"}, "value": "1_000"}, "visibility": "private"}, {"anonymous": false, "id": 10191, "name": "MarketsInitialized", "nodeType": "EventDefinition", "parameters": {"id": 10190, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10189, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10191, "src": "2836:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10188, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2836:6:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "2835:19:22"}, "src": "2811:44:22"}, {"canonicalName": "InitializeMarketsAction.GovernanceParameters", "id": 10204, "members": [{"constant": false, "id": 10194, "mutability": "mutable", "name": "depositShares", "nodeType": "VariableDeclaration", "scope": 10204, "src": "2899:22:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 10192, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2899:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10193, "nodeType": "ArrayTypeName", "src": "2899:8:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 10197, "mutability": "mutable", "name": "leverageThresholds", "nodeType": "VariableDeclaration", "scope": 10204, "src": "2931:27:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 10195, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2931:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10196, "nodeType": "ArrayTypeName", "src": "2931:8:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 10200, "mutability": "mutable", "name": "proportions", "nodeType": "VariableDeclaration", "scope": 10204, "src": "2968:21:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 10198, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2968:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10199, "nodeType": "ArrayTypeName", "src": "2968:9:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 10203, "mutability": "mutable", "name": "interestRateParams", "nodeType": "VariableDeclaration", "scope": 10204, "src": "2999:43:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_storage_$dyn_storage_ptr", "typeString": "struct InterestRateParameters[]"}, "typeName": {"baseType": {"id": 10201, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67744, "src": "2999:22:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_storage_ptr", "typeString": "struct InterestRateParameters"}}, "id": 10202, "nodeType": "ArrayTypeName", "src": "2999:24:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_storage_$dyn_storage_ptr", "typeString": "struct InterestRateParameters[]"}}, "visibility": "internal"}], "name": "GovernanceParameters", "nodeType": "StructDefinition", "scope": 11428, "src": "2861:188:22", "visibility": "public"}, {"body": {"id": 10320, "nodeType": "Block", "src": "3198:1191:22", "statements": [{"assignments": [10214], "declarations": [{"constant": false, "id": 10214, "mutability": "mutable", "name": "params", "nodeType": "VariableDeclaration", "scope": 10320, "src": "3208:34:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 10213, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10204, "src": "3208:20:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 10215, "nodeType": "VariableDeclarationStatement", "src": "3208:34:22"}, {"expression": {"id": 10227, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"expression": {"id": 10216, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "3253:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10218, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 10194, "src": "3253:20:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"expression": {"id": 10219, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "3275:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10220, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 10197, "src": "3275:25:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}], "id": 10221, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3252:49:22", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10224, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10206, "src": "3352:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10225, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10208, "src": "3376:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10222, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 42375, "src": "3304:13:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$42375_$", "typeString": "type(library nTokenHandler)"}}, "id": 10223, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getDepositParameters", "nodeType": "MemberAccess", "referencedDeclaration": 41852, "src": "3304:34:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 10226, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3304:96:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "src": "3252:148:22", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10228, "nodeType": "ExpressionStatement", "src": "3252:148:22"}, {"assignments": [10233], "declarations": [{"constant": false, "id": 10233, "mutability": "mutable", "name": "_proportions", "nodeType": "VariableDeclaration", "scope": 10320, "src": "3411:28:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 10231, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3411:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10232, "nodeType": "ArrayTypeName", "src": "3411:8:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "id": 10239, "initialValue": {"arguments": [{"id": 10236, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10206, "src": "3484:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10237, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10208, "src": "3496:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10234, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 42375, "src": "3442:13:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$42375_$", "typeString": "type(library nTokenHandler)"}}, "id": 10235, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getInitializationParameters", "nodeType": "MemberAccess", "referencedDeclaration": 42092, "src": "3442:41:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory)"}}, "id": 10238, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3442:69:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "3411:100:22"}, {"expression": {"id": 10249, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10240, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "3604:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10242, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10200, "src": "3604:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10246, "name": "_proportions", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10233, "src": "3639:12:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 10247, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3639:19:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10245, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "3625:13:22", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (uint256[] memory)"}, "typeName": {"baseType": {"id": 10243, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3629:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10244, "nodeType": "ArrayTypeName", "src": "3629:9:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}}, "id": 10248, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3625:34:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "src": "3604:55:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 10250, "nodeType": "ExpressionStatement", "src": "3604:55:22"}, {"body": {"id": 10274, "nodeType": "Block", "src": "3719:73:22", "statements": [{"expression": {"id": 10272, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 10262, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "3733:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10265, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10200, "src": "3733:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 10266, "indexExpression": {"id": 10264, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10252, "src": "3752:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3733:21:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"baseExpression": {"id": 10267, "name": "_proportions", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10233, "src": "3757:12:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 10269, "indexExpression": {"id": 10268, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10252, "src": "3770:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3757:15:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10270, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint", "nodeType": "MemberAccess", "referencedDeclaration": 68950, "src": "3757:22:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (uint256)"}}, "id": 10271, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3757:24:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3733:48:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10273, "nodeType": "ExpressionStatement", "src": "3733:48:22"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10258, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10255, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10252, "src": "3689:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 10256, "name": "_proportions", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10233, "src": "3693:12:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 10257, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3693:19:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3689:23:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10275, "initializationExpression": {"assignments": [10252], "declarations": [{"constant": false, "id": 10252, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10275, "src": "3674:9:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10251, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3674:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10254, "initialValue": {"hexValue": "30", "id": 10253, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3686:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3674:13:22"}, "loopExpression": {"expression": {"id": 10260, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3714:3:22", "subExpression": {"id": 10259, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10252, "src": "3714:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10261, "nodeType": "ExpressionStatement", "src": "3714:3:22"}, "nodeType": "ForStatement", "src": "3669:123:22"}, {"expression": {"arguments": [{"id": 10279, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10206, "src": "4001:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10276, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 39693, "src": "3951:17:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$39693_$", "typeString": "type(library InterestRateCurve)"}}, "id": 10278, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setActiveInterestRateParameters", "nodeType": "MemberAccess", "referencedDeclaration": 38630, "src": "3951:49:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 10280, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3951:61:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10281, "nodeType": "ExpressionStatement", "src": "3951:61:22"}, {"expression": {"id": 10290, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10282, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "4022:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10284, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "4022:25:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10288, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10208, "src": "4079:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10287, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "4050:28:22", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct InterestRateParameters memory[] memory)"}, "typeName": {"baseType": {"id": 10285, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67744, "src": "4054:22:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_storage_ptr", "typeString": "struct InterestRateParameters"}}, "id": 10286, "nodeType": "ArrayTypeName", "src": "4054:24:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_storage_$dyn_storage_ptr", "typeString": "struct InterestRateParameters[]"}}}, "id": 10289, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4050:44:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "src": "4022:72:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 10291, "nodeType": "ExpressionStatement", "src": "4022:72:22"}, {"body": {"id": 10316, "nodeType": "Block", "src": "4189:170:22", "statements": [{"expression": {"id": 10314, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 10302, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "4203:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10307, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "4203:25:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 10308, "indexExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10306, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10304, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10293, "src": "4229:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"hexValue": "31", "id": 10305, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4233:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "4229:5:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "4203:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10311, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10206, "src": "4305:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10312, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10293, "src": "4333:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10309, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 39693, "src": "4238:17:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$39693_$", "typeString": "type(library InterestRateCurve)"}}, "id": 10310, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getActiveInterestRateParameters", "nodeType": "MemberAccess", "referencedDeclaration": 38486, "src": "4238:49:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint16_$_t_uint256_$returns$_t_struct$_InterestRateParameters_$67744_memory_ptr_$", "typeString": "function (uint16,uint256) view returns (struct InterestRateParameters memory)"}}, "id": 10313, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4238:110:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "src": "4203:145:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 10315, "nodeType": "ExpressionStatement", "src": "4203:145:22"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10298, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10296, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10293, "src": "4163:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 10297, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10208, "src": "4168:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4163:19:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10317, "initializationExpression": {"assignments": [10293], "declarations": [{"constant": false, "id": 10293, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10317, "src": "4148:9:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10292, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4148:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10295, "initialValue": {"hexValue": "31", "id": 10294, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4160:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "4148:13:22"}, "loopExpression": {"expression": {"id": 10300, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "4184:3:22", "subExpression": {"id": 10299, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10293, "src": "4184:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10301, "nodeType": "ExpressionStatement", "src": "4184:3:22"}, "nodeType": "ForStatement", "src": "4143:216:22"}, {"expression": {"id": 10318, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10214, "src": "4376:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "functionReturnParameters": 10212, "id": 10319, "nodeType": "Return", "src": "4369:13:22"}]}, "id": 10321, "implemented": true, "kind": "function", "modifiers": [], "name": "_getGovernanceParameters", "nodeType": "FunctionDefinition", "parameters": {"id": 10209, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10206, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10321, "src": "3089:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10205, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3089:6:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10208, "mutability": "mutable", "name": "maxMarketIndex", "nodeType": "VariableDeclaration", "scope": 10321, "src": "3108:22:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10207, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3108:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "3088:43:22"}, "returnParameters": {"id": 10212, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10211, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10321, "src": "3165:27:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 10210, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10204, "src": "3165:20:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "src": "3164:29:22"}, "scope": 11428, "src": "3055:1334:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 10470, "nodeType": "Block", "src": "4574:2041:22", "statements": [{"assignments": [10333], "declarations": [{"constant": false, "id": 10333, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 10470, "src": "4584:30:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10332, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "4584:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 10334, "nodeType": "VariableDeclarationStatement", "src": "4584:30:22"}, {"assignments": [10338], "declarations": [{"constant": false, "id": 10338, "mutability": "mutable", "name": "storedAssets", "nodeType": "VariableDeclaration", "scope": 10470, "src": "4624:36:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset[]"}, "typeName": {"baseType": {"id": 10336, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67603, "src": "4624:14:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_storage_ptr", "typeString": "struct PortfolioAsset"}}, "id": 10337, "nodeType": "ArrayTypeName", "src": "4624:16:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_storage_$dyn_storage_ptr", "typeString": "struct PortfolioAsset[]"}}, "visibility": "internal"}], "id": 10342, "initialValue": {"expression": {"expression": {"id": 10339, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10323, "src": "4663:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10340, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "4663:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10341, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 67534, "src": "4663:34:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "4624:73:22"}, {"body": {"id": 10468, "nodeType": "Block", "src": "4843:1766:22", "statements": [{"assignments": [10354], "declarations": [{"constant": false, "id": 10354, "mutability": "mutable", "name": "asset", "nodeType": "VariableDeclaration", "scope": 10468, "src": "4857:27:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset"}, "typeName": {"id": 10353, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67603, "src": "4857:14:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_storage_ptr", "typeString": "struct PortfolioAsset"}}, "visibility": "internal"}], "id": 10358, "initialValue": {"baseExpression": {"id": 10355, "name": "storedAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10338, "src": "4887:12:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10357, "indexExpression": {"id": 10356, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10344, "src": "4900:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4887:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "nodeType": "VariableDeclarationStatement", "src": "4857:45:22"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 10362, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "4998:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10363, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 67596, "src": "4998:15:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10360, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48993, "src": "4968:12:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$48993_$", "typeString": "type(library AssetHandler)"}}, "id": 10361, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isLiquidityToken", "nodeType": "MemberAccess", "referencedDeclaration": 48533, "src": "4968:29:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256) pure returns (bool)"}}, "id": 10364, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4968:46:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10359, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "4960:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10365, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4960:55:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10366, "nodeType": "ExpressionStatement", "src": "4960:55:22"}, {"id": 10391, "nodeType": "Block", "src": "5029:300:22", "statements": [{"assignments": [10368], "declarations": [{"constant": false, "id": 10368, "mutability": "mutable", "name": "settleDate", "nodeType": "VariableDeclaration", "scope": 10391, "src": "5047:18:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10367, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5047:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10373, "initialValue": {"arguments": [{"id": 10371, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "5099:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}], "expression": {"id": 10369, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48993, "src": "5068:12:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$48993_$", "typeString": "type(library AssetHandler)"}}, "id": 10370, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getSettlementDate", "nodeType": "MemberAccess", "referencedDeclaration": 48584, "src": "5068:30:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioAsset_$67603_memory_ptr_$returns$_t_uint256_$", "typeString": "function (struct PortfolioAsset memory) pure returns (uint256)"}}, "id": 10372, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5068:37:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5047:58:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10377, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10375, "name": "settleDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10368, "src": "5191:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 10376, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10325, "src": "5205:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5191:23:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10374, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5183:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10378, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5183:32:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10379, "nodeType": "ExpressionStatement", "src": "5183:32:22"}, {"expression": {"arguments": [{"id": 10383, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10333, "src": "5261:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"expression": {"id": 10384, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "5269:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10385, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67592, "src": "5269:16:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10386, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "5287:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10387, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67594, "src": "5287:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10388, "name": "settleDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10368, "src": "5303:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10380, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40537, "src": "5233:6:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$40537_$", "typeString": "type(library Market)"}}, "id": 10382, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "loadSettlementMarket", "nodeType": "MemberAccess", "referencedDeclaration": 40536, "src": "5233:27:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_MarketParameters_$67620_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$", "typeString": "function (struct MarketParameters memory,uint256,uint256,uint256) view"}}, "id": 10389, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5233:81:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10390, "nodeType": "ExpressionStatement", "src": "5233:81:22"}]}, {"assignments": [10393], "declarations": [{"constant": false, "id": 10393, "mutability": "mutable", "name": "fCash", "nodeType": "VariableDeclaration", "scope": 10468, "src": "5343:12:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10392, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5343:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10394, "nodeType": "VariableDeclarationStatement", "src": "5343:12:22"}, {"id": 10415, "nodeType": "Block", "src": "5369:188:22", "statements": [{"assignments": [10396], "declarations": [{"constant": false, "id": 10396, "mutability": "mutable", "name": "primeCash", "nodeType": "VariableDeclaration", "scope": 10415, "src": "5387:16:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10395, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5387:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10397, "nodeType": "VariableDeclarationStatement", "src": "5387:16:22"}, {"expression": {"id": 10406, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 10398, "name": "primeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10396, "src": "5422:9:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10399, "name": "fCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10393, "src": "5433:5:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10400, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "5421:18:22", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10403, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "5465:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10404, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 67598, "src": "5465:14:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10401, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10333, "src": "5442:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10402, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "removeLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 39906, "src": "5442:22:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$67620_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$67620_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 10405, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5442:38:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "5421:59:22", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10407, "nodeType": "ExpressionStatement", "src": "5421:59:22"}, {"expression": {"id": 10413, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10408, "name": "withdrawnCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10328, "src": "5498:13:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10411, "name": "primeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10396, "src": "5532:9:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10409, "name": "withdrawnCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10328, "src": "5514:13:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10410, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 68834, "src": "5514:17:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10412, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5514:28:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "5498:44:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10414, "nodeType": "ExpressionStatement", "src": "5498:44:22"}]}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10419, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10416, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "5859:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10417, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67594, "src": "5859:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 10418, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10325, "src": "5877:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5859:27:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 10458, "nodeType": "Block", "src": "6273:275:22", "statements": [{"expression": {"arguments": [{"expression": {"id": 10447, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10323, "src": "6347:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10448, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "6347:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 10449, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "6388:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10450, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67592, "src": "6388:16:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10451, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "6426:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10452, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67594, "src": "6426:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 10453, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10323, "src": "6462:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10454, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "6462:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10455, "name": "fCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10393, "src": "6510:5:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10444, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 46411, "src": "6291:19:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$46411_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 10446, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 46109, "src": "6291:34:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,uint256,uint256,int256) returns (int256)"}}, "id": 10456, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6291:242:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10457, "nodeType": "ExpressionStatement", "src": "6291:242:22"}]}, "id": 10459, "nodeType": "IfStatement", "src": "5855:693:22", "trueBody": {"id": 10443, "nodeType": "Block", "src": "5888:379:22", "statements": [{"assignments": [10421], "declarations": [{"constant": false, "id": 10421, "mutability": "mutable", "name": "settledPrimeCash", "nodeType": "VariableDeclaration", "scope": 10443, "src": "5986:23:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10420, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5986:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10435, "initialValue": {"arguments": [{"expression": {"id": 10426, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10323, "src": "6080:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10427, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "6080:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 10428, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "6101:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10429, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67592, "src": "6101:16:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10430, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10354, "src": "6119:5:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10431, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67594, "src": "6119:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10432, "name": "fCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10393, "src": "6135:5:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10433, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10325, "src": "6142:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"expression": {"id": 10422, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10323, "src": "6012:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10423, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "6012:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10424, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 67587, "src": "6012:26:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$68026_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 10425, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertSettledfCash", "nodeType": "MemberAccess", "referencedDeclaration": 44670, "src": "6012:46:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PrimeRate_$68026_memory_ptr_$_t_address_$_t_uint16_$_t_uint256_$_t_int256_$_t_uint256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$68026_memory_ptr_$", "typeString": "function (struct PrimeRate memory,address,uint16,uint256,int256,uint256) returns (int256)"}}, "id": 10434, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6012:157:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "5986:183:22"}, {"expression": {"id": 10441, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10436, "name": "settledCashFromfCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10330, "src": "6187:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10439, "name": "settledPrimeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10421, "src": "6235:16:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10437, "name": "settledCashFromfCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10330, "src": "6210:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10438, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 68834, "src": "6210:24:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10440, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6210:42:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "6187:65:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10442, "nodeType": "ExpressionStatement", "src": "6187:65:22"}]}}, {"expression": {"arguments": [{"id": 10465, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10344, "src": "6596:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 10460, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10323, "src": "6562:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10463, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "6562:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10464, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "deleteAsset", "nodeType": "MemberAccess", "referencedDeclaration": 47396, "src": "6562:33:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$67542_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_PortfolioState_$67542_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256) pure"}}, "id": 10466, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6562:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10467, "nodeType": "ExpressionStatement", "src": "6562:36:22"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10349, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10346, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10344, "src": "4813:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 10347, "name": "storedAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10338, "src": "4817:12:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10348, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "4817:19:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4813:23:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10469, "initializationExpression": {"assignments": [10344], "declarations": [{"constant": false, "id": 10344, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10469, "src": "4802:9:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10343, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4802:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10345, "nodeType": "VariableDeclarationStatement", "src": "4802:9:22"}, "loopExpression": {"expression": {"id": 10351, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "4838:3:22", "subExpression": {"id": 10350, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10344, "src": "4838:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10352, "nodeType": "ExpressionStatement", "src": "4838:3:22"}, "nodeType": "ForStatement", "src": "4797:1812:22"}]}, "id": 10471, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleNTokenLiquidityTokens", "nodeType": "FunctionDefinition", "parameters": {"id": 10326, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10323, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10471, "src": "4442:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10322, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "4442:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10325, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10471, "src": "4481:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10324, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4481:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4432:72:22"}, "returnParameters": {"id": 10331, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10328, "mutability": "mutable", "name": "withdrawnCash", "nodeType": "VariableDeclaration", "scope": 10471, "src": "4523:20:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10327, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4523:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10330, "mutability": "mutable", "name": "settledCashFromfCash", "nodeType": "VariableDeclaration", "scope": 10471, "src": "4545:27:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10329, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4545:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "4522:51:22"}, "scope": 11428, "src": "4395:2220:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 10573, "nodeType": "Block", "src": "6711:2758:22", "statements": [{"assignments": [10479], "declarations": [{"constant": false, "id": 10479, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 10573, "src": "7493:21:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10478, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7493:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10484, "initialValue": {"arguments": [{"id": 10482, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10475, "src": "7543:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10480, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "7517:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 10481, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 68091, "src": "7517:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 10483, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7517:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "7493:60:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10489, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10486, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "7571:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10487, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "7571:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 10488, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10479, "src": "7600:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7571:42:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10485, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "7563:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10490, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7563:51:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10491, "nodeType": "ExpressionStatement", "src": "7563:51:22"}, {"assignments": [10493, 10495], "declarations": [{"constant": false, "id": 10493, "mutability": "mutable", "name": "withdrawnCash", "nodeType": "VariableDeclaration", "scope": 10573, "src": "7881:20:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10492, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7881:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10495, "mutability": "mutable", "name": "settledCashFromfCash", "nodeType": "VariableDeclaration", "scope": 10573, "src": "7903:27:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10494, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7903:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10500, "initialValue": {"arguments": [{"id": 10497, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "7963:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10498, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10475, "src": "7971:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10496, "name": "_settleNTokenLiquidityTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10471, "src": "7934:28:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$_t_uint256_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,uint256) returns (int256,int256)"}}, "id": 10499, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7934:47:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "VariableDeclarationStatement", "src": "7880:101:22"}, {"assignments": [10502, 10504, 10506], "declarations": [{"constant": false, "id": 10502, "mutability": "mutable", "name": "settledPositiveCash", "nodeType": "VariableDeclaration", "scope": 10573, "src": "8158:26:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10501, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8158:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10504, "mutability": "mutable", "name": "settledNegativeCash", "nodeType": "VariableDeclaration", "scope": 10573, "src": "8186:26:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10503, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8186:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10506, "mutability": "mutable", "name": "blockTimeUTC0", "nodeType": "VariableDeclaration", "scope": 10573, "src": "8214:21:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10505, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8214:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10521, "initialValue": {"arguments": [{"expression": {"id": 10509, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8312:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10510, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "8312:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 10511, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8349:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10512, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "8349:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10513, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67583, "src": "8349:27:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10514, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8394:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10515, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "8394:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10516, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10475, "src": "8438:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"expression": {"id": 10517, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8465:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10518, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "8465:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10519, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 67587, "src": "8465:26:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$68026_memory_ptr", "typeString": "struct PrimeRate memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_PrimeRate_$68026_memory_ptr", "typeString": "struct PrimeRate memory"}], "expression": {"id": 10507, "name": "SettleBitmapAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48180, "src": "8251:18:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettleBitmapAssets_$48180_$", "typeString": "type(library SettleBitmapAssets)"}}, "id": 10508, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settleBitmappedCashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 48119, "src": "8251:43:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_struct$_PrimeRate_$68026_memory_ptr_$returns$_t_int256_$_t_int256_$_t_uint256_$", "typeString": "function (address,uint16,uint256,uint256,struct PrimeRate memory) returns (int256,int256,uint256)"}}, "id": 10520, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8251:254:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$_t_uint256_$", "typeString": "tuple(int256,int256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "8157:348:22"}, {"expression": {"id": 10527, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10522, "name": "settledPositiveCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10502, "src": "8579:19:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10525, "name": "settledCashFromfCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10495, "src": "8625:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10523, "name": "settledPositiveCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10502, "src": "8601:19:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10524, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 68834, "src": "8601:23:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10526, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8601:45:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8579:67:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10528, "nodeType": "ExpressionStatement", "src": "8579:67:22"}, {"expression": {"id": 10537, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10529, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8717:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10531, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "8717:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10535, "name": "withdrawnCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10493, "src": "8761:13:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10532, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8738:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10533, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "8738:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10534, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 68834, "src": "8738:22:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10536, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8738:37:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8717:58:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10538, "nodeType": "ExpressionStatement", "src": "8717:58:22"}, {"expression": {"id": 10556, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10539, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8918:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10541, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "8918:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10546, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "9008:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10547, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "9008:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 10548, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "9041:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10549, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "9041:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10550, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67583, "src": "9041:27:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10551, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "9082:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10552, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "9082:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10553, "name": "settledPositiveCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10502, "src": "9139:19:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10554, "name": "settledNegativeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10504, "src": "9172:19:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 10542, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "8939:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10543, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "8939:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10544, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 67587, "src": "8939:26:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$68026_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 10545, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToStorageInSettlement", "nodeType": "MemberAccess", "referencedDeclaration": 44872, "src": "8939:55:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PrimeRate_$68026_memory_ptr_$_t_address_$_t_uint16_$_t_int256_$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$68026_memory_ptr_$", "typeString": "function (struct PrimeRate memory,address,uint16,int256,int256,int256) returns (int256)"}}, "id": 10555, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8939:262:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8918:283:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10557, "nodeType": "ExpressionStatement", "src": "8918:283:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10562, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10559, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "9292:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10560, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "9292:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 10561, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9313:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9292:22:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10558, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "9284:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10563, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9284:31:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10564, "nodeType": "ExpressionStatement", "src": "9284:31:22"}, {"expression": {"id": 10571, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10565, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10473, "src": "9409:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10567, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "9409:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 10568, "name": "blockTimeUTC0", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10506, "src": "9438:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10569, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint40", "nodeType": "MemberAccess", "referencedDeclaration": 69499, "src": "9438:22:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint40_$bound_to$_t_uint256_$", "typeString": "function (uint256) pure returns (uint40)"}}, "id": 10570, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9438:24:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "9409:53:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10572, "nodeType": "ExpressionStatement", "src": "9409:53:22"}]}, "id": 10574, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleNTokenPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 10476, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10473, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10574, "src": "6653:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10472, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "6653:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10475, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10574, "src": "6684:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10474, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6684:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6652:50:22"}, "returnParameters": {"id": 10477, "nodeType": "ParameterList", "parameters": [], "src": "6711:0:22"}, "scope": 11428, "src": "6621:2848:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 10633, "nodeType": "Block", "src": "9794:1333:22", "statements": [{"assignments": [10588], "declarations": [{"constant": false, "id": 10588, "mutability": "mutable", "name": "rateOracleTimeWindow", "nodeType": "VariableDeclaration", "scope": 10633, "src": "9804:28:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10587, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9804:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10593, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 10589, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10581, "src": "9835:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10590, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "9835:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10591, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getRateOracleTimeWindow", "nodeType": "MemberAccess", "referencedDeclaration": 36892, "src": "9835:40:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$67590_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$67590_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory) pure returns (uint256)"}}, "id": 10592, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9835:42:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "9804:73:22"}, {"assignments": [10595], "declarations": [{"constant": false, "id": 10595, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 10633, "src": "9975:22:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10594, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9975:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10600, "initialValue": {"arguments": [{"id": 10598, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10579, "src": "10026:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10596, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "10000:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 10597, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 68091, "src": "10000:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 10599, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10000:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "9975:61:22"}, {"body": {"id": 10631, "nodeType": "Block", "src": "10681:440:22", "statements": [{"expression": {"arguments": [{"id": 10618, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10577, "src": "10760:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"expression": {"expression": {"id": 10619, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10581, "src": "10865:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10620, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "10865:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10621, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 67534, "src": "10865:34:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10623, "indexExpression": {"id": 10622, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10602, "src": "10900:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "10865:37:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67603_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10624, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67594, "src": "10865:46:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10625, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10579, "src": "10929:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 10626, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "11021:5:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"id": 10627, "name": "rateOracleTimeWindow", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10588, "src": "11044:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10628, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10595, "src": "11082:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"id": 10614, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10584, "src": "10695:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10616, "indexExpression": {"id": 10615, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10602, "src": "10711:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "10695:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10617, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarketWithSettlementDate", "nodeType": "MemberAccess", "referencedDeclaration": 40516, "src": "10695:47:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_MarketParameters_$67620_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$67620_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256,uint256,bool,uint256,uint256) view"}}, "id": 10629, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10695:415:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10630, "nodeType": "ExpressionStatement", "src": "10695:415:22"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10610, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10605, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10602, "src": "10629:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"expression": {"id": 10606, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10581, "src": "10633:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10607, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "10633:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10608, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 67534, "src": "10633:34:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10609, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "10633:41:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10629:45:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10632, "initializationExpression": {"assignments": [10602], "declarations": [{"constant": false, "id": 10602, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10632, "src": "10614:9:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10601, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10614:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10604, "initialValue": {"hexValue": "31", "id": 10603, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10626:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "10614:13:22"}, "loopExpression": {"expression": {"id": 10612, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "10676:3:22", "subExpression": {"id": 10611, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10602, "src": "10676:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10613, "nodeType": "ExpressionStatement", "src": "10676:3:22"}, "nodeType": "ForStatement", "src": "10609:512:22"}]}, "documentation": {"id": 10575, "nodeType": "StructuredDocumentation", "src": "9475:121:22", "text": "@notice Special method to get previous markets, normal usage would not reference previous markets\n in this way"}, "id": 10634, "implemented": true, "kind": "function", "modifiers": [], "name": "_getPreviousMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 10585, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10577, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10634, "src": "9639:18:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10576, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9639:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10579, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10634, "src": "9667:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10578, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9667:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10581, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10634, "src": "9694:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10580, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "9694:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10584, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 10634, "src": "9733:41:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10582, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "9733:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10583, "nodeType": "ArrayTypeName", "src": "9733:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "src": "9629:151:22"}, "returnParameters": {"id": 10586, "nodeType": "ParameterList", "parameters": [], "src": "9794:0:22"}, "scope": 11428, "src": "9601:1526:22", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 10712, "nodeType": "Block", "src": "11397:1075:22", "statements": [{"assignments": [10651], "declarations": [{"constant": false, "id": 10651, "mutability": "mutable", "name": "primeCashWithholding", "nodeType": "VariableDeclaration", "scope": 10712, "src": "11407:27:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10650, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11407:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10652, "nodeType": "VariableDeclarationStatement", "src": "11407:27:22"}, {"condition": {"id": 10653, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10645, "src": "11449:11:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 10688, "nodeType": "Block", "src": "11561:359:22", "statements": [{"expression": {"arguments": [{"id": 10668, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10636, "src": "11598:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10669, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10641, "src": "11606:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10667, "name": "_settleNTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10574, "src": "11575:22:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct nTokenPortfolio memory,uint256)"}}, "id": 10670, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11575:41:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10671, "nodeType": "ExpressionStatement", "src": "11575:41:22"}, {"expression": {"arguments": [{"id": 10673, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10643, "src": "11650:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10674, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10641, "src": "11662:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10675, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10636, "src": "11673:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10676, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10639, "src": "11681:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}], "id": 10672, "name": "_getPreviousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10634, "src": "11630:19:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$_t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr_$returns$__$", "typeString": "function (uint256,uint256,struct nTokenPortfolio memory,struct MarketParameters memory[] memory) view"}}, "id": 10677, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11630:67:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10678, "nodeType": "ExpressionStatement", "src": "11630:67:22"}, {"expression": {"id": 10686, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10679, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10651, "src": "11800:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10682, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10636, "src": "11874:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10683, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10639, "src": "11882:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 10684, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10641, "src": "11899:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10680, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20586, "src": "11823:16:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20586_$", "typeString": "type(library nTokenMintAction)"}}, "id": 10681, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNTokenNegativefCashWithholding", "nodeType": "MemberAccess", "referencedDeclaration": 20585, "src": "11823:50:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$_t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 10685, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11823:86:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11800:109:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10687, "nodeType": "ExpressionStatement", "src": "11800:109:22"}]}, "id": 10689, "nodeType": "IfStatement", "src": "11445:475:22", "trueBody": {"id": 10666, "nodeType": "Block", "src": "11462:93:22", "statements": [{"expression": {"id": 10664, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10654, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10636, "src": "11476:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10656, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "11476:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 10661, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10641, "src": "11533:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10659, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "11512:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 10660, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTimeUTC0", "nodeType": "MemberAccess", "referencedDeclaration": 68115, "src": "11512:20:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 10662, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11512:31:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10658, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11505:6:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 10657, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "11505:6:22", "typeDescriptions": {}}}, "id": 10663, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11505:39:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "11476:68:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10665, "nodeType": "ExpressionStatement", "src": "11476:68:22"}]}}, {"expression": {"id": 10696, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10690, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10648, "src": "12047:21:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10694, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10651, "src": "12099:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10691, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10636, "src": "12071:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10692, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "12071:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10693, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 68891, "src": "12071:27:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10695, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12071:49:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12047:73:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10697, "nodeType": "ExpressionStatement", "src": "12047:73:22"}, {"expression": {"id": 10702, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10698, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10636, "src": "12175:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10700, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "12175:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 10701, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10651, "src": "12196:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12175:41:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10703, "nodeType": "ExpressionStatement", "src": "12175:41:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10707, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10705, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10648, "src": "12358:21:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 10706, "name": "MIN_CASH_REQUIRED", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10187, "src": "12382:17:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12358:41:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10704, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12350:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10708, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12350:50:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10709, "nodeType": "ExpressionStatement", "src": "12350:50:22"}, {"expression": {"id": 10710, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10648, "src": "12444:21:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 10649, "id": 10711, "nodeType": "Return", "src": "12437:28:22"}]}, "id": 10713, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculateNetPrimeCashAvailable", "nodeType": "FunctionDefinition", "parameters": {"id": 10646, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10636, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10713, "src": "11183:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10635, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "11183:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10639, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 10713, "src": "11222:41:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10637, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "11222:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10638, "nodeType": "ArrayTypeName", "src": "11222:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 10641, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10713, "src": "11273:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10640, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11273:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10643, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10713, "src": "11300:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10642, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "11300:6:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10645, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 10713, "src": "11327:16:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 10644, "name": "bool", "nodeType": "ElementaryTypeName", "src": "11327:4:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "11173:176:22"}, "returnParameters": {"id": 10649, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10648, "mutability": "mutable", "name": "netPrimeCashAvailable", "nodeType": "VariableDeclaration", "scope": 10713, "src": "11367:28:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10647, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11367:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "11366:30:22"}, "scope": 11428, "src": "11133:1339:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 10757, "nodeType": "Block", "src": "12898:501:22", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10728, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10725, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10717, "src": "12985:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10726, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "12985:22:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "33", "id": 10727, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13011:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "src": "12985:27:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10724, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12977:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10729, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12977:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10730, "nodeType": "ExpressionStatement", "src": "12977:36:22"}, {"expression": {"arguments": [{"expression": {"baseExpression": {"id": 10733, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10717, "src": "13092:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10735, "indexExpression": {"hexValue": "31", "id": 10734, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13108:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13092:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10736, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "13092:27:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 10737, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10717, "src": "13137:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10739, "indexExpression": {"hexValue": "32", "id": 10738, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13153:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13137:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10740, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "13137:27:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 10741, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10717, "src": "13182:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10743, "indexExpression": {"hexValue": "31", "id": 10742, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13198:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13182:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10744, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "13182:29:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 10745, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10717, "src": "13229:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10747, "indexExpression": {"hexValue": "32", "id": 10746, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13245:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13229:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10748, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "13229:29:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10754, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10749, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10719, "src": "13341:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10753, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "32", "id": 10750, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13357:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 10751, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "13361:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 10752, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 67157, "src": "13361:17:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13357:21:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13341:37:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10731, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 37648, "src": "13043:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$37648_$", "typeString": "type(library CashGroup)"}}, "id": 10732, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "interpolateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 37015, "src": "13043:31:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}}, "id": 10755, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13043:349:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 10723, "id": 10756, "nodeType": "Return", "src": "13024:368:22"}]}, "documentation": {"id": 10714, "nodeType": "StructuredDocumentation", "src": "12478:263:22", "text": "@notice The six month implied rate is zero if there have never been any markets initialized\n otherwise the market will be the interpolation between the old 6 month and 1 year markets\n which are now sitting at 3 month and 9 month time to maturity"}, "id": 10758, "implemented": true, "kind": "function", "modifiers": [], "name": "_getSixMonthImpliedRate", "nodeType": "FunctionDefinition", "parameters": {"id": 10720, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10717, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 10758, "src": "12788:41:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10715, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "12788:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10716, "nodeType": "ArrayTypeName", "src": "12788:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 10719, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 10758, "src": "12839:21:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10718, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12839:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12778:88:22"}, "returnParameters": {"id": 10723, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10722, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10758, "src": "12889:7:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10721, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12889:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12888:9:22"}, "scope": 11428, "src": "12746:653:22", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10844, "nodeType": "Block", "src": "13877:1489:22", "statements": [{"assignments": [10771], "declarations": [{"constant": false, "id": 10771, "mutability": "mutable", "name": "longMaturity", "nodeType": "VariableDeclaration", "scope": 10844, "src": "13887:20:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10770, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13887:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10774, "initialValue": {"expression": {"id": 10772, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10765, "src": "13910:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10773, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "13910:19:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13887:42:22"}, {"assignments": [10776], "declarations": [{"constant": false, "id": 10776, "mutability": "mutable", "name": "longRate", "nodeType": "VariableDeclaration", "scope": 10844, "src": "13939:16:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10775, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13939:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10779, "initialValue": {"expression": {"id": 10777, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10765, "src": "13958:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10778, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "13958:21:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13939:40:22"}, {"assignments": [10781], "declarations": [{"constant": false, "id": 10781, "mutability": "mutable", "name": "newMaturity", "nodeType": "VariableDeclaration", "scope": 10844, "src": "14050:19:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10780, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14050:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10787, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10786, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10782, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10765, "src": "14072:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10783, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "14072:19:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 10784, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "14094:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 10785, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 67157, "src": "14094:17:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14072:39:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "14050:61:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10791, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10789, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10761, "src": "14129:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 10790, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10771, "src": "14145:12:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14129:28:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10788, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "14121:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10792, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14121:37:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10793, "nodeType": "ExpressionStatement", "src": "14121:37:22"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10796, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10794, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10776, "src": "14339:8:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 10795, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10763, "src": "14351:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14339:21:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 10842, "nodeType": "Block", "src": "14635:725:22", "statements": [{"assignments": [10817], "declarations": [{"constant": false, "id": 10817, "mutability": "mutable", "name": "diff", "nodeType": "VariableDeclaration", "scope": 10842, "src": "14809:12:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10816, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14809:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10832, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10830, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10828, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10771, "src": "14994:12:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10829, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10761, "src": "15009:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14994:28:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10825, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10823, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10781, "src": "14888:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10824, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10761, "src": "14902:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14888:27:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10820, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10818, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10763, "src": "14841:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10819, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10776, "src": "14853:8:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14841:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 10821, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "14840:22:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10822, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 69272, "src": "14840:47:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10826, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14840:76:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10827, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 69293, "src": "14840:153:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10831, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14840:183:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "14809:214:22"}, {"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10835, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10833, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10763, "src": "15310:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 10834, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10817, "src": "15322:4:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "15310:16:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"hexValue": "31", "id": 10839, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15348:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "id": 10840, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "15310:39:22", "trueExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10838, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10836, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10763, "src": "15329:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10837, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10817, "src": "15341:4:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "15329:16:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 10769, "id": 10841, "nodeType": "Return", "src": "15303:46:22"}]}, "id": 10843, "nodeType": "IfStatement", "src": "14335:1025:22", "trueBody": {"id": 10815, "nodeType": "Block", "src": "14362:267:22", "statements": [{"expression": {"arguments": [{"id": 10812, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10763, "src": "14608:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10809, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10807, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10771, "src": "14553:12:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10808, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10761, "src": "14568:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14553:28:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10804, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10802, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10781, "src": "14447:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10803, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10761, "src": "14461:13:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14447:27:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10799, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10797, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10776, "src": "14400:8:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10798, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10763, "src": "14411:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14400:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 10800, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "14399:22:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10801, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 69272, "src": "14399:47:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10805, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14399:76:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10806, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 69293, "src": "14399:153:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10810, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14399:183:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10811, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 69218, "src": "14399:208:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10813, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14399:219:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 10769, "id": 10814, "nodeType": "Return", "src": "14376:242:22"}]}}]}, "documentation": {"id": 10759, "nodeType": "StructuredDocumentation", "src": "13405:296:22", "text": "@notice Returns the linear interpolation between two market rates. The formula is\n slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate"}, "id": 10845, "implemented": true, "kind": "function", "modifiers": [], "name": "_interpolateFutureRate", "nodeType": "FunctionDefinition", "parameters": {"id": 10766, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10761, "mutability": "mutable", "name": "shortMaturity", "nodeType": "VariableDeclaration", "scope": 10845, "src": "13747:21:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10760, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13747:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10763, "mutability": "mutable", "name": "shortRate", "nodeType": "VariableDeclaration", "scope": 10845, "src": "13778:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10762, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13778:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10765, "mutability": "mutable", "name": "longMarket", "nodeType": "VariableDeclaration", "scope": 10845, "src": "13805:34:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10764, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "13805:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "src": "13737:108:22"}, "returnParameters": {"id": 10769, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10768, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10845, "src": "13868:7:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10767, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13868:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "13867:9:22"}, "scope": 11428, "src": "13706:1660:22", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10905, "nodeType": "Block", "src": "15658:766:22", "statements": [{"assignments": [10862], "declarations": [{"constant": false, "id": 10862, "mutability": "mutable", "name": "primeCashToMarket", "nodeType": "VariableDeclaration", "scope": 10905, "src": "15752:24:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10861, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15752:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10871, "initialValue": {"arguments": [{"expression": {"id": 10868, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "15835:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 10869, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 67297, "src": "15835:31:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 10865, "name": "depositShare", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10850, "src": "15817:12:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10863, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10848, "src": "15791:21:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10864, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 68752, "src": "15791:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10866, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15791:39:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10867, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 68782, "src": "15791:43:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10870, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15791:76:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "15752:115:22"}, {"expression": {"id": 10876, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10872, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10854, "src": "15877:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10874, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalPrimeCash", "nodeType": "MemberAccess", "referencedDeclaration": 67611, "src": "15877:24:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 10875, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10862, "src": "15904:17:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "15877:44:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10877, "nodeType": "ExpressionStatement", "src": "15877:44:22"}, {"expression": {"id": 10882, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10878, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10854, "src": "15931:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10880, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 67613, "src": "15931:24:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 10881, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10862, "src": "15958:17:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "15931:44:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10883, "nodeType": "ExpressionStatement", "src": "15931:44:22"}, {"expression": {"arguments": [{"expression": {"expression": {"id": 10889, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10856, "src": "16108:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10890, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "16108:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10891, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67583, "src": "16108:27:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10892, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10854, "src": "16149:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10893, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "16149:18:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10894, "name": "assetType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10852, "src": "16181:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10895, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10862, "src": "16242:17:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10884, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10856, "src": "16064:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10887, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "16064:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10888, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 46744, "src": "16064:30:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$67542_memory_ptr_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$67542_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint16,uint256,uint256,int256) pure"}}, "id": 10896, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16064:205:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10897, "nodeType": "ExpressionStatement", "src": "16064:205:22"}, {"expression": {"arguments": [{"id": 10902, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10862, "src": "16399:17:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 10898, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10856, "src": "16352:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10899, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "16352:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10900, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 67587, "src": "16352:26:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$68026_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 10901, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 44980, "src": "16352:46:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PrimeRate_$68026_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$68026_memory_ptr_$", "typeString": "function (struct PrimeRate memory,int256) pure returns (int256)"}}, "id": 10903, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16352:65:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 10860, "id": 10904, "nodeType": "Return", "src": "16345:72:22"}]}, "documentation": {"id": 10846, "nodeType": "StructuredDocumentation", "src": "15372:40:22", "text": "@dev This is here to clear the stack"}, "id": 10906, "implemented": true, "kind": "function", "modifiers": [], "name": "_setLiquidityAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 10857, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10848, "mutability": "mutable", "name": "netPrimeCashAvailable", "nodeType": "VariableDeclaration", "scope": 10906, "src": "15455:28:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10847, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15455:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10850, "mutability": "mutable", "name": "depositShare", "nodeType": "VariableDeclaration", "scope": 10906, "src": "15493:19:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10849, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15493:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10852, "mutability": "mutable", "name": "assetType", "nodeType": "VariableDeclaration", "scope": 10906, "src": "15522:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10851, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15522:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10854, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 10906, "src": "15549:33:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10853, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "15549:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 10856, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10906, "src": "15592:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10855, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "15592:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "15445:182:22"}, "returnParameters": {"id": 10860, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10859, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10906, "src": "15650:6:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10858, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15650:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "15649:8:22"}, "scope": 11428, "src": "15417:1007:22", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10945, "nodeType": "Block", "src": "17024:297:22", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10923, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10917, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10911, "src": "17042:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"arguments": [{"expression": {"id": 10920, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "17064:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 10921, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 67195, "src": "17064:24:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 10919, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "17056:7:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 10918, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "17056:7:22", "typeDescriptions": {}}}, "id": 10922, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17056:33:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17042:47:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10916, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "17034:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10924, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17034:56:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10925, "nodeType": "ExpressionStatement", "src": "17034:56:22"}, {"assignments": [10927], "declarations": [{"constant": false, "id": 10927, "mutability": "mutable", "name": "_utilization", "nodeType": "VariableDeclaration", "scope": 10945, "src": "17100:19:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10926, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17100:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10932, "initialValue": {"arguments": [{"id": 10930, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10911, "src": "17129:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10929, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "17122:6:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 10928, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17122:6:22", "typeDescriptions": {}}}, "id": 10931, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17122:19:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "17100:41:22"}, {"expression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10942, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 10935, "name": "_utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10927, "src": "17256:12:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10933, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10909, "src": "17229:22:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10934, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 68752, "src": "17229:26:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10936, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17229:40:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10940, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10937, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "17273:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 10938, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 67195, "src": "17273:24:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10939, "name": "_utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10927, "src": "17300:12:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "17273:39:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10941, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17272:41:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "17229:84:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10943, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17228:86:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 10915, "id": 10944, "nodeType": "Return", "src": "17221:93:22"}]}, "documentation": {"id": 10907, "nodeType": "StructuredDocumentation", "src": "16430:71:22", "text": "@notice Calculates the fCash amount given the cash and utilization:"}, "id": 10946, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculatefCashAmountFromUtilization", "nodeType": "FunctionDefinition", "parameters": {"id": 10912, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10909, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 10946, "src": "16928:29:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10908, "name": "int256", "nodeType": "ElementaryTypeName", "src": "16928:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10911, "mutability": "mutable", "name": "utilization", "nodeType": "VariableDeclaration", "scope": 10946, "src": "16967:19:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10910, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16967:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "16918:75:22"}, "returnParameters": {"id": 10915, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10914, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10946, "src": "17016:6:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10913, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17016:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "17015:8:22"}, "scope": 11428, "src": "16873:448:22", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10958, "nodeType": "Block", "src": "17705:66:22", "statements": [{"expression": {"arguments": [{"id": 10955, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10949, "src": "17753:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10952, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20586, "src": "17715:16:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20586_$", "typeString": "type(library nTokenMintAction)"}}, "id": 10954, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sweepCashIntoMarkets", "nodeType": "MemberAccess", "referencedDeclaration": 19794, "src": "17715:37:22", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 10956, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17715:49:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10957, "nodeType": "ExpressionStatement", "src": "17715:49:22"}]}, "documentation": {"id": 10947, "nodeType": "StructuredDocumentation", "src": "17327:315:22", "text": "@notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n @param currencyId currency of markets to initialize\n @dev emit:CashSweepIntoMarkets\n @dev auth:none"}, "functionSelector": "bb6dd58e", "id": 10959, "implemented": true, "kind": "function", "modifiers": [], "name": "sweepCashIntoMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 10950, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10949, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10959, "src": "17677:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10948, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "17677:6:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "17676:19:22"}, "returnParameters": {"id": 10951, "nodeType": "ParameterList", "parameters": [], "src": "17705:0:22"}, "scope": 11428, "src": "17647:124:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 11370, "nodeType": "Block", "src": "18145:9316:22", "statements": [{"assignments": [10968], "declarations": [{"constant": false, "id": 10968, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 11370, "src": "18155:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10967, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18155:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10971, "initialValue": {"expression": {"id": 10969, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "18175:5:22", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 10970, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "18175:15:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "18155:35:22"}, {"assignments": [10973], "declarations": [{"constant": false, "id": 10973, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 11370, "src": "18200:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10972, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "18200:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 10974, "nodeType": "VariableDeclarationStatement", "src": "18200:29:22"}, {"expression": {"arguments": [{"id": 10978, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10962, "src": "18274:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10975, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "18239:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10977, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 42326, "src": "18239:34:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 10979, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18239:46:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10980, "nodeType": "ExpressionStatement", "src": "18239:46:22"}, {"assignments": [10984], "declarations": [{"constant": false, "id": 10984, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 11370, "src": "18295:41:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10982, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "18295:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10983, "nodeType": "ArrayTypeName", "src": "18295:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "id": 10992, "initialValue": {"arguments": [{"expression": {"expression": {"id": 10988, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "18374:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10989, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "18374:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10990, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 67585, "src": "18374:31:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10987, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "18351:22:22", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 10985, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "18355:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10986, "nodeType": "ArrayTypeName", "src": "18355:18:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 10991, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18351:55:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "18295:111:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10998, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"id": 10994, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "18504:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10995, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "18504:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10996, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 67585, "src": "18504:31:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 10997, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18539:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "18504:36:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10993, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "18496:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10999, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18496:45:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11000, "nodeType": "ExpressionStatement", "src": "18496:45:22"}, {"condition": {"id": 11001, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10964, "src": "18637:11:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11012, "nodeType": "IfStatement", "src": "18633:97:22", "trueBody": {"id": 11011, "nodeType": "Block", "src": "18650:80:22", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11008, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 11003, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "18672:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11004, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "18672:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11005, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 67534, "src": "18672:34:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11006, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "18672:41:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 11007, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18717:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "18672:46:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 11002, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "18664:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 11009, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18664:55:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11010, "nodeType": "ExpressionStatement", "src": "18664:55:22"}]}}, {"assignments": [11014], "declarations": [{"constant": false, "id": 11014, "mutability": "mutable", "name": "netPrimeCashAvailable", "nodeType": "VariableDeclaration", "scope": 11370, "src": "18740:28:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11013, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18740:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11022, "initialValue": {"arguments": [{"id": 11016, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "18816:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 11017, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10984, "src": "18836:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 11018, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10968, "src": "18865:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11019, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10962, "src": "18888:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11020, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10964, "src": "18912:11:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 11015, "name": "_calculateNetPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10713, "src": "18771:31:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$_t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr_$_t_uint256_$_t_uint16_$_t_bool_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256,uint16,bool) returns (int256)"}}, "id": 11021, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18771:162:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "18740:193:22"}, {"assignments": [11024], "declarations": [{"constant": false, "id": 11024, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 11370, "src": "18944:38:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 11023, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10204, "src": "18944:20:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 11031, "initialValue": {"arguments": [{"id": 11026, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10962, "src": "19022:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"expression": {"id": 11027, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "19034:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11028, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "19034:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11029, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 67585, "src": "19034:31:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11025, "name": "_getGovernanceParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10321, "src": "18997:24:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_uint256_$returns$_t_struct$_GovernanceParameters_$10204_memory_ptr_$", "typeString": "function (uint16,uint256) returns (struct InitializeMarketsAction.GovernanceParameters memory)"}}, "id": 11030, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18997:69:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "18944:122:22"}, {"assignments": [11033], "declarations": [{"constant": false, "id": 11033, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 11370, "src": "19077:33:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11032, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "19077:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 11034, "nodeType": "VariableDeclarationStatement", "src": "19077:33:22"}, {"assignments": [11036], "declarations": [{"constant": false, "id": 11036, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 11370, "src": "19173:18:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11035, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19173:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11037, "nodeType": "VariableDeclarationStatement", "src": "19173:18:22"}, {"body": {"id": 11332, "nodeType": "Block", "src": "19263:7581:22", "statements": [{"expression": {"id": 11065, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11050, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "19321:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11052, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "19321:18:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11062, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11060, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "19425:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 11061, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19429:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "19425:5:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11058, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "19400:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 11059, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 68187, "src": "19400:24:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11063, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19400:31:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 11055, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10968, "src": "19368:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11053, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "19342:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 11054, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 68091, "src": "19342:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11056, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19342:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11057, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 69218, "src": "19342:40:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11064, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19342:103:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "19321:124:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11066, "nodeType": "ExpressionStatement", "src": "19321:124:22"}, {"assignments": [11068], "declarations": [{"constant": false, "id": 11068, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 11332, "src": "19460:29:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11067, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19460:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11082, "initialValue": {"arguments": [{"id": 11070, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11014, "src": "19549:21:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 11071, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "19592:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11072, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 10194, "src": "19592:24:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 11074, "indexExpression": {"id": 11073, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "19617:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "19592:27:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11078, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11075, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "19641:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 11076, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "MIN_LIQUIDITY_TOKEN_INDEX", "nodeType": "MemberAccess", "referencedDeclaration": 67258, "src": "19641:35:22", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 11077, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "19679:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "19641:39:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11079, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "19732:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11080, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "19763:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 11069, "name": "_setLiquidityAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10906, "src": "19508:19:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_uint256_$_t_struct$_MarketParameters_$67620_memory_ptr_$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$returns$_t_int256_$", "typeString": "function (int256,int256,uint256,struct MarketParameters memory,struct nTokenPortfolio memory) pure returns (int256)"}}, "id": 11081, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19508:279:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "19460:327:22"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11113, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11101, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11093, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11083, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10964, "src": "20337:11:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11091, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11086, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11084, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "20459:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 11085, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20464:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "20459:6:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11090, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11087, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10984, "src": "20469:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11088, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "20469:22:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "32", "id": 11089, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20495:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "src": "20469:27:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20459:37:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 11092, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "20458:39:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20337:160:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11099, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11094, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "20603:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"expression": {"expression": {"expression": {"id": 11095, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "20608:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11096, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "20608:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11097, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 67534, "src": "20608:34:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67603_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11098, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "20608:41:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20603:46:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 11100, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "20602:48:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20337:313:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11111, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11104, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11102, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "20783:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 11103, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20788:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "20783:6:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11110, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"baseExpression": {"id": 11105, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10984, "src": "20793:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11107, "indexExpression": {"hexValue": "32", "id": 11106, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20809:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "20793:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11108, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "20793:29:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 11109, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20826:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "20793:34:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20783:44:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 11112, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "20782:46:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20337:491:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11317, "nodeType": "Block", "src": "21581:5069:22", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11156, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11154, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "21843:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 11155, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21848:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21843:6:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11167, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11165, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "22123:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 11166, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22128:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "22123:6:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11236, "nodeType": "Block", "src": "23094:1740:22", "statements": [{"assignments": [11197], "declarations": [{"constant": false, "id": 11197, "mutability": "mutable", "name": "shortMarketMaturity", "nodeType": "VariableDeclaration", "scope": 11236, "src": "23877:27:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11196, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23877:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11208, "initialValue": {"arguments": [{"arguments": [{"id": 11205, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "23997:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11203, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "23972:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 11204, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 68187, "src": "23972:24:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11206, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23972:27:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 11200, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10968, "src": "23957:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11198, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "23931:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 11199, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 68091, "src": "23931:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11201, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23931:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11202, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 69218, "src": "23931:40:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11207, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23931:69:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23877:123:22"}, {"expression": {"id": 11217, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11209, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "24022:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11211, "name": "shortMarketMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11197, "src": "24083:19:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11212, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "24400:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"baseExpression": {"id": 11213, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10984, "src": "24514:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11215, "indexExpression": {"id": 11214, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "24530:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "24514:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}], "id": 11210, "name": "_interpolateFutureRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10845, "src": "24035:22:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_struct$_MarketParameters_$67620_memory_ptr_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,struct MarketParameters memory) pure returns (uint256)"}}, "id": 11216, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24035:519:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24022:532:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11218, "nodeType": "ExpressionStatement", "src": "24022:532:22"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11225, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11219, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "24655:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"baseExpression": {"expression": {"id": 11220, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "24668:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11221, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "24668:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11223, "indexExpression": {"id": 11222, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "24698:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "24668:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11224, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 67733, "src": "24668:42:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24655:55:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11235, "nodeType": "IfStatement", "src": "24651:165:22", "trueBody": {"id": 11234, "nodeType": "Block", "src": "24712:104:22", "statements": [{"expression": {"id": 11232, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11226, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "24738:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"expression": {"id": 11227, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "24751:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11228, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "24751:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11230, "indexExpression": {"id": 11229, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "24781:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "24751:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11231, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 67733, "src": "24751:42:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24738:55:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11233, "nodeType": "ExpressionStatement", "src": "24738:55:22"}]}}]}, "id": 11237, "nodeType": "IfStatement", "src": "22119:2715:22", "trueBody": {"id": 11195, "nodeType": "Block", "src": "22131:957:22", "statements": [{"expression": {"id": 11176, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11168, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "22647:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11170, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10984, "src": "22709:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"arguments": [{"id": 11173, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10968, "src": "22776:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11171, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "22750:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 11172, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 68091, "src": "22750:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11174, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22750:36:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11169, "name": "_getSixMonthImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10758, "src": "22660:23:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct MarketParameters memory[] memory,uint256) pure returns (uint256)"}}, "id": 11175, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22660:148:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22647:161:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11177, "nodeType": "ExpressionStatement", "src": "22647:161:22"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11184, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11178, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "22909:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"baseExpression": {"expression": {"id": 11179, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "22922:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11180, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "22922:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11182, "indexExpression": {"id": 11181, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "22952:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "22922:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11183, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 67733, "src": "22922:42:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22909:55:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11194, "nodeType": "IfStatement", "src": "22905:165:22", "trueBody": {"id": 11193, "nodeType": "Block", "src": "22966:104:22", "statements": [{"expression": {"id": 11191, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11185, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "22992:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"expression": {"id": 11186, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "23005:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11187, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "23005:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11189, "indexExpression": {"id": 11188, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "23035:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "23005:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11190, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 67733, "src": "23005:42:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22992:55:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11192, "nodeType": "ExpressionStatement", "src": "22992:55:22"}]}}]}}, "id": 11238, "nodeType": "IfStatement", "src": "21839:2995:22", "trueBody": {"id": 11164, "nodeType": "Block", "src": "21851:262:22", "statements": [{"expression": {"id": 11162, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11157, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "22052:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"id": 11158, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10984, "src": "22065:15:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$67620_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11160, "indexExpression": {"hexValue": "31", "id": 11159, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22081:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "22065:18:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11161, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "22065:29:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22052:42:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11163, "nodeType": "ExpressionStatement", "src": "22052:42:22"}]}}, {"assignments": [11240], "declarations": [{"constant": false, "id": 11240, "mutability": "mutable", "name": "utilization", "nodeType": "VariableDeclaration", "scope": 11317, "src": "25148:19:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11239, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25148:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11248, "initialValue": {"arguments": [{"id": 11246, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "25234:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"expression": {"id": 11241, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "25170:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11242, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "25170:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11244, "indexExpression": {"id": 11243, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "25200:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25170:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11245, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getUtilizationFromInterestRate", "nodeType": "MemberAccess", "referencedDeclaration": 38957, "src": "25170:63:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$67744_memory_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_InterestRateParameters_$67744_memory_ptr_$", "typeString": "function (struct InterestRateParameters memory,uint256) pure returns (uint256)"}}, "id": 11247, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25170:75:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "25148:97:22"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11256, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11249, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11240, "src": "25735:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"baseExpression": {"expression": {"id": 11250, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "25749:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11251, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 10197, "src": "25749:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 11253, "indexExpression": {"id": 11252, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "25779:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25749:32:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11254, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint", "nodeType": "MemberAccess", "referencedDeclaration": 68950, "src": "25749:39:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (uint256)"}}, "id": 11255, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25749:41:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25735:55:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11284, "nodeType": "IfStatement", "src": "25731:323:22", "trueBody": {"id": 11283, "nodeType": "Block", "src": "25792:262:22", "statements": [{"expression": {"id": 11264, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11257, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11240, "src": "25814:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"baseExpression": {"expression": {"id": 11258, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "25828:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11259, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 10197, "src": "25828:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 11261, "indexExpression": {"id": 11260, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "25858:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25828:32:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11262, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint", "nodeType": "MemberAccess", "referencedDeclaration": 68950, "src": "25828:39:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (uint256)"}}, "id": 11263, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25828:41:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25814:55:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11265, "nodeType": "ExpressionStatement", "src": "25814:55:22"}, {"expression": {"id": 11274, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11266, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "25891:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11272, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11240, "src": "25953:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"expression": {"id": 11267, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "25904:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11268, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "25904:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11270, "indexExpression": {"id": 11269, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "25934:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25904:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11271, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getInterestRate", "nodeType": "MemberAccess", "referencedDeclaration": 38859, "src": "25904:48:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$67744_memory_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_InterestRateParameters_$67744_memory_ptr_$", "typeString": "function (struct InterestRateParameters memory,uint256) pure returns (uint256)"}}, "id": 11273, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25904:61:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25891:74:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11275, "nodeType": "ExpressionStatement", "src": "25891:74:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11279, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11277, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "25995:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 11278, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26009:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25995:15:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4f7261636c652072617465206f766572666c6f77", "id": 11280, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "26012:22:22", "typeDescriptions": {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}, "value": "Oracle rate overflow"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}], "id": 11276, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "25987:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11281, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25987:48:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11282, "nodeType": "ExpressionStatement", "src": "25987:48:22"}]}}, {"expression": {"id": 11292, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11285, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26072:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11287, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 67609, "src": "26072:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11289, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11068, "src": "26132:22:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11290, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11240, "src": "26156:11:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11288, "name": "_calculatefCashAmountFromUtilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10946, "src": "26095:36:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256) pure returns (int256)"}}, "id": 11291, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26095:73:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "26072:96:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11293, "nodeType": "ExpressionStatement", "src": "26072:96:22"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11297, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11294, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26379:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11295, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 67609, "src": "26379:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "31", "id": 11296, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26402:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "26379:24:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11304, "nodeType": "IfStatement", "src": "26375:54:22", "trueBody": {"expression": {"id": 11302, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11298, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26405:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11300, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 67609, "src": "26405:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "31", "id": 11301, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26428:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "26405:24:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11303, "nodeType": "ExpressionStatement", "src": "26405:24:22"}}, {"expression": {"id": 11309, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11305, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26448:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11307, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "26448:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11308, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11036, "src": "26471:10:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26448:33:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11310, "nodeType": "ExpressionStatement", "src": "26448:33:22"}, {"expression": {"id": 11315, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11311, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26596:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11313, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "previousTradeTime", "nodeType": "MemberAccess", "referencedDeclaration": 67619, "src": "26596:27:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11314, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10968, "src": "26626:9:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26596:39:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11316, "nodeType": "ExpressionStatement", "src": "26596:39:22"}]}, "id": 11318, "nodeType": "IfStatement", "src": "20316:6334:22", "trueBody": {"id": 11153, "nodeType": "Block", "src": "20843:732:22", "statements": [{"assignments": [11115], "declarations": [{"constant": false, "id": 11115, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 11153, "src": "21071:18:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11114, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21071:6:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11123, "initialValue": {"arguments": [{"id": 11117, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11068, "src": "21129:22:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 11118, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "21153:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11119, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10200, "src": "21153:22:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 11121, "indexExpression": {"id": 11120, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "21176:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21153:25:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11116, "name": "_calculatefCashAmountFromUtilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10946, "src": "21092:36:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256) pure returns (int256)"}}, "id": 11122, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21092:87:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21071:108:22"}, {"expression": {"id": 11128, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11124, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "21198:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11126, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 67609, "src": "21198:20:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11127, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11115, "src": "21221:11:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "21198:34:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11129, "nodeType": "ExpressionStatement", "src": "21198:34:22"}, {"expression": {"id": 11143, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11130, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "21250:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11132, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "21250:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"baseExpression": {"expression": {"id": 11138, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "21322:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11139, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10200, "src": "21322:22:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 11141, "indexExpression": {"id": 11140, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "21345:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21322:25:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"expression": {"id": 11133, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11024, "src": "21273:10:22", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10204_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11134, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10203, "src": "21273:29:22", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$67744_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11136, "indexExpression": {"id": 11135, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "21303:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21273:32:22", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$67744_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11137, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getInterestRate", "nodeType": "MemberAccess", "referencedDeclaration": 38859, "src": "21273:48:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$67744_memory_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_InterestRateParameters_$67744_memory_ptr_$", "typeString": "function (struct InterestRateParameters memory,uint256) pure returns (uint256)"}}, "id": 11142, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21273:75:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21250:98:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11144, "nodeType": "ExpressionStatement", "src": "21250:98:22"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11149, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11146, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "21508:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11147, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "21508:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 11148, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21531:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21508:24:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696d706c6965642072617465206661696c6564", "id": 11150, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "21534:25:22", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}, "value": "IM: implied rate failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}], "id": 11145, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "21500:7:22", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11151, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21500:60:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11152, "nodeType": "ExpressionStatement", "src": "21500:60:22"}]}}, {"expression": {"id": 11324, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11319, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26726:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11321, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 67615, "src": "26726:25:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 11322, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26754:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11323, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 67617, "src": "26754:20:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26726:48:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11325, "nodeType": "ExpressionStatement", "src": "26726:48:22"}, {"expression": {"arguments": [{"id": 11327, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11033, "src": "26803:9:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11328, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10962, "src": "26814:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11329, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "26826:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 11326, "name": "finalizeMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11415, "src": "26788:14:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$67620_memory_ptr_$_t_uint16_$_t_struct$_nTokenPortfolio_$67508_memory_ptr_$returns$__$", "typeString": "function (struct MarketParameters memory,uint16,struct nTokenPortfolio memory)"}}, "id": 11330, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26788:45:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11331, "nodeType": "ExpressionStatement", "src": "26788:45:22"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11046, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11042, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "19221:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 11043, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "19225:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11044, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 67495, "src": "19225:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67590_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11045, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 67585, "src": "19225:31:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "19221:35:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11333, "initializationExpression": {"assignments": [11039], "declarations": [{"constant": false, "id": 11039, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 11333, "src": "19206:9:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11038, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19206:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11041, "initialValue": {"hexValue": "30", "id": 11040, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19218:1:22", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "19206:13:22"}, "loopExpression": {"expression": {"id": 11048, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "19258:3:22", "subExpression": {"id": 11047, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11039, "src": "19258:1:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11049, "nodeType": "ExpressionStatement", "src": "19258:3:22"}, "nodeType": "ForStatement", "src": "19201:7643:22"}, {"assignments": [null, null, 11335, null], "declarations": [null, null, {"constant": false, "id": 11335, "mutability": "mutable", "name": "assetArrayLength", "nodeType": "VariableDeclaration", "scope": 11370, "src": "26958:22:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 11334, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "26958:5:22", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "visibility": "internal"}, null], "id": 11342, "initialValue": {"arguments": [{"expression": {"id": 11339, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "27061:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11340, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "27061:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"expression": {"id": 11336, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "27027:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11337, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 67497, "src": "27027:21:22", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67542_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11338, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storeAssets", "nodeType": "MemberAccess", "referencedDeclaration": 47057, "src": "27027:33:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$67542_memory_ptr_$_t_address_$returns$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$bound_to$_t_struct$_PortfolioState_$67542_memory_ptr_$", "typeString": "function (struct PortfolioState memory,address) returns (bool,bytes32,uint8,uint40)"}}, "id": 11341, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27027:54:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$", "typeString": "tuple(bool,bytes32,uint8,uint40)"}}, "nodeType": "VariableDeclarationStatement", "src": "26881:200:22"}, {"expression": {"arguments": [{"expression": {"id": 11346, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "27146:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11347, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "27146:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11348, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10962, "src": "27179:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 11349, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "27203:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11350, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 67501, "src": "27203:18:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11343, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32157, "src": "27091:14:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$32157_$", "typeString": "type(library BalanceHandler)"}}, "id": 11345, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 31514, "src": "27091:41:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (address,uint16,int256)"}}, "id": 11351, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27091:140:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11352, "nodeType": "ExpressionStatement", "src": "27091:140:22"}, {"expression": {"arguments": [{"expression": {"id": 11356, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "27301:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11357, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "27301:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11358, "name": "assetArrayLength", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11335, "src": "27334:16:22", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"expression": {"id": 11359, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10973, "src": "27364:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11360, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "27364:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11353, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 42375, "src": "27241:13:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$42375_$", "typeString": "type(library nTokenHandler)"}}, "id": 11355, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setArrayLengthAndInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 41808, "src": "27241:46:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint8_$_t_uint256_$returns$__$", "typeString": "function (address,uint8,uint256)"}}, "id": 11361, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27241:159:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11362, "nodeType": "ExpressionStatement", "src": "27241:159:22"}, {"eventCall": {"arguments": [{"arguments": [{"id": 11366, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10962, "src": "27442:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 11365, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "27435:6:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 11364, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "27435:6:22", "typeDescriptions": {}}}, "id": 11367, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27435:18:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 11363, "name": "MarketsInitialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10191, "src": "27416:18:22", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 11368, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27416:38:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11369, "nodeType": "EmitStatement", "src": "27411:43:22"}]}, "documentation": {"id": 10960, "nodeType": "StructuredDocumentation", "src": "17777:290:22", "text": "@notice Initialize the market for a given currency id, done once a quarter\n @param currencyId currency of markets to initialize\n @param isFirstInit true if this is the first time the markets have been initialized\n @dev emit:MarketsInitialized\n @dev auth:none"}, "functionSelector": "d0e064c0", "id": 11371, "implemented": true, "kind": "function", "modifiers": [], "name": "initializeMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 10965, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10962, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 11371, "src": "18099:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10961, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "18099:6:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10964, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 11371, "src": "18118:16:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 10963, "name": "bool", "nodeType": "ElementaryTypeName", "src": "18118:4:22", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "18098:37:22"}, "returnParameters": {"id": 10966, "nodeType": "ParameterList", "parameters": [], "src": "18145:0:22"}, "scope": 11428, "src": "18072:9389:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 11414, "nodeType": "Block", "src": "27612:452:22", "statements": [{"assignments": [11381], "declarations": [{"constant": false, "id": 11381, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 11414, "src": "27678:22:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11380, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "27678:7:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11390, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11389, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"expression": {"id": 11384, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "27729:5:22", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 11385, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "27729:15:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11382, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68695, "src": "27703:8:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$68695_$", "typeString": "type(library DateTime)"}}, "id": 11383, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 68091, "src": "27703:25:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11386, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27703:42:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 11387, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67350, "src": "27748:9:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$67350_$", "typeString": "type(library Constants)"}}, "id": 11388, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 67157, "src": "27748:17:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "27703:62:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "27678:87:22"}, {"expression": {"arguments": [{"id": 11394, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11375, "src": "27812:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11395, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11381, "src": "27824:14:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11391, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11373, "src": "27775:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11393, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "setMarketStorageForInitialize", "nodeType": "MemberAccess", "referencedDeclaration": 40274, "src": "27775:36:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$67620_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$67620_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256)"}}, "id": 11396, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27775:64:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11397, "nodeType": "ExpressionStatement", "src": "27775:64:22"}, {"expression": {"arguments": [{"expression": {"id": 11401, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11377, "src": "27898:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11402, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 67507, "src": "27898:19:22", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11403, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11375, "src": "27931:10:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 11404, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11373, "src": "27955:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11405, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67607, "src": "27955:15:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 11406, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11377, "src": "27984:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11407, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 67503, "src": "27984:26:22", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 11408, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11373, "src": "28024:6:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11409, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 67609, "src": "28024:17:22", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11410, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 68848, "src": "28024:21:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11411, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28024:23:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11398, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 46411, "src": "27850:19:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$46411_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 11400, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 46109, "src": "27850:34:22", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,uint256,uint256,int256) returns (int256)"}}, "id": 11412, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27850:207:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11413, "nodeType": "ExpressionStatement", "src": "27850:207:22"}]}, "id": 11415, "implemented": true, "kind": "function", "modifiers": [], "name": "finalizeMarket", "nodeType": "FunctionDefinition", "parameters": {"id": 11378, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11373, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 11415, "src": "27500:30:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11372, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67620, "src": "27500:16:22", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67620_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11375, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 11415, "src": "27540:17:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 11374, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "27540:6:22", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 11377, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 11415, "src": "27567:29:22", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 11376, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67508, "src": "27567:15:22", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$67508_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "27490:112:22"}, "returnParameters": {"id": 11379, "nodeType": "ParameterList", "parameters": [], "src": "27612:0:22"}, "scope": 11428, "src": "27467:597:22", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 11426, "nodeType": "Block", "src": "28206:49:22", "statements": [{"expression": {"arguments": [{"id": 11423, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20586, "src": "28231:16:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20586_$", "typeString": "type(library nTokenMintAction)"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20586_$", "typeString": "type(library nTokenMintAction)"}], "id": 11422, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "28223:7:22", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 11421, "name": "address", "nodeType": "ElementaryTypeName", "src": "28223:7:22", "typeDescriptions": {}}}, "id": 11424, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28223:25:22", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "functionReturnParameters": 11420, "id": 11425, "nodeType": "Return", "src": "28216:32:22"}]}, "documentation": {"id": 11416, "nodeType": "StructuredDocumentation", "src": "28070:77:22", "text": "@notice Get a list of deployed library addresses (sorted by library name)"}, "functionSelector": "c4c96dae", "id": 11427, "implemented": true, "kind": "function", "modifiers": [], "name": "getLibInfo", "nodeType": "FunctionDefinition", "parameters": {"id": 11417, "nodeType": "ParameterList", "parameters": [], "src": "28171:2:22"}, "returnParameters": {"id": 11420, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11419, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11427, "src": "28197:7:22", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11418, "name": "address", "nodeType": "ElementaryTypeName", "src": "28197:7:22", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "28196:9:22"}, "scope": 11428, "src": "28152:103:22", "stateMutability": "pure", "virtual": false, "visibility": "external"}], "scope": 11429, "src": "2166:26091:22"}], "src": "37:28221:22"}, "bytecode": "615f2662000027600b82828239805160001a60731461001a57fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063bb6dd58e14610050578063c4c96dae14610072578063d0e064c014610090575b600080fd5b81801561005c57600080fd5b5061007061006b366004615c27565b6100b0565b005b61007a61011a565b6040516100879190615cd8565b60405180910390f35b81801561009c57600080fd5b506100706100ab366004615c41565b610132565b604051635db6eac760e11b815273__nTokenMintAction______________________9063bb6dd58e906100e7908490600401615ecb565b60006040518083038186803b1580156100ff57600080fd5b505af4158015610113573d6000803e3d6000fd5b5050505050565b73__nTokenMintAction______________________90565b4261013b615a12565b61014581856105d7565b80516020015160009067ffffffffffffffff8111801561016457600080fd5b5060405190808252806020026020018201604052801561019e57816020015b61018b615a5b565b8152602001906001900390816101835790505b508251602001519091506101b157600080fd5b83156101c85760208201515151156101c857600080fd5b60006101d783838689896105f0565b905060006101ed8785600001516020015161066c565b90506101f7615a5b565b6000805b86516020015181101561054b57610226610217826001016107d0565b6102208a610879565b9061089a565b602084015283518051600091610259918891908590811061024357fe5b602002602001015184600260ff1601878c6108b3565b905089806102735750816001148015610273575086516002145b806102845750602088015151518210155b806102b257508160011480156102b25750866002815181106102a257fe5b602002602001015160c001516000145b156103595760006102da82876040015185815181106102cd57fe5b6020026020010151610914565b905080856040018181525050610327866040015184815181106102f957fe5b60200260200101518760600151858151811061031157fe5b602002602001015161094990919063ffffffff16565b60c086018190526103535760405162461bcd60e51b815260040161034a90615e94565b60405180910390fd5b5061052d565b8161037e578660018151811061036b57fe5b602002602001015160c00151925061045f565b81600114156103e257610399876103948b610879565b610a09565b9250846060015182815181106103ab57fe5b6020026020010151604001518310156103dd57846060015182815181106103ce57fe5b60200260200101516040015192505b61045f565b60006103f96103f0846107d0565b6102208c610879565b905061041981858a868151811061040c57fe5b6020026020010151610a8f565b93508560600151838151811061042b57fe5b60200260200101516040015184101561045d578560600151838151811061044e57fe5b60200260200101516040015193505b505b600061048b848760600151858151811061047557fe5b6020026020010151610b1790919063ffffffff16565b90506104ad866020015184815181106104a057fe5b6020026020010151610bb2565b8111156104fc576104c7866020015184815181106104a057fe5b90506104dd818760600151858151811061031157fe5b9350836104fc5760405162461bcd60e51b815260040161034a90615d8c565b6105068282610914565b604086018190526001131561051d57600160408601525b5060c0840183905260e084018990525b60c084015160a0850152610542848c8a610bc5565b506001016101fb565b5060006105698760c001518860200151610c0b90919063ffffffff16565b50925050506105818760c001518b8960600151610e4b565b6105948760c00151828960800151610e5b565b7fcffeff9accc9171f01fec36e09a1a06f0160ce50a8c4c0a2adff9cec562adf088a6040516105c39190615ecb565b60405180910390a150505050505050505050565b6105e18282610ece565b6105ea81610f6a565b90915250565b60008082156106135761060285610f89565b64ffffffffff16608088015261063b565b61061d8786610fa5565b61062d8461ffff1686898961107a565b61063887878761110a565b90505b606087015161064a9082611245565b6060880182905291506103e8821361066157600080fd5b505b95945050505050565b610674615aa3565b61067c615aa3565b61068a8461ffff1684611261565b6020830152815260006106a161ffff861685611296565b9050805167ffffffffffffffff811180156106bb57600080fd5b506040519080825280602002602001820160405280156106e5578160200160208202803683370190505b50604083015260005b8151811015610729576107068282815181106104a057fe5b8360400151828151811061071657fe5b60209081029190910101526001016106ee565b50610733856112c7565b8367ffffffffffffffff8111801561074a57600080fd5b5060405190808252806020026020018201604052801561078457816020015b610771615acb565b8152602001906001900390816107695790505b50606083015260015b8481116107c45761079e8682611316565b836060015160018303815181106107b157fe5b602090810291909101015260010161078d565b50909150505b92915050565b600081600114156107e557506276a700610874565b81600214156107f8575062ed4e00610874565b816003141561080c57506301da9c00610874565b816004141561082057506303b53800610874565b816005141561083457506309450c00610874565b8160061415610848575063128a1800610874565b816007141561085c57506325143000610874565b60405162461bcd60e51b815260040161034a90615de9565b919050565b60006276a70082101561088b57600080fd5b6276a700825b06909103919050565b6000828201838110156108ac57600080fd5b9392505050565b6000806108ce6305f5e1006108c88989611330565b9061137e565b6060850181905260808501819052835151602080870151908601519293506108f992919088856113af565b82516040015161090990826114b2565b979650505050505050565b6000633b9aca00821061092657600080fd5b81633b9aca008190036109398583611330565b8161094057fe5b05949350505050565b60008083608001511161095b57600080fd5b633b9aca0082111561096c57600080fd5b825182116109985782516040840151610991919061098b908590611503565b9061152a565b90506107ca565b826020015182116109d05760408301518351602085015160608601516109919392610220928190039161098b91880390859003611503565b6108ac83606001516102208560200151633b9aca000361098b87606001518860800151038860200151880361150390919063ffffffff16565b6000600383511015610a1a57600080fd5b6108ac83600181518110610a2a57fe5b60200260200101516020015184600281518110610a4357fe5b60200260200101516020015185600181518110610a5c57fe5b602002602001015160c0015186600281518110610a7557fe5b602090810291909101015160c0015162ed4e008701611549565b602081015160c0820151600091906276a7008201828710610aaf57600080fd5b858210610ad857610ace8661022089860361098b8387038c8703611503565b93505050506108ac565b6000610aee88850361098b858a038b8603611503565b9050808711610afe576001610b02565b8087035b9450505050506108ac565b5050509392505050565b600080836080015111610b2957600080fd5b82604001518211610b4b5760408301518351610991919061098b908590611503565b82606001518211610b835782516040840151606085015160208601516109919392610220928190039161098b91880390859003611503565b6020830151606084015160808501516108ac9291610220918190039061098b908703633b9aca00859003611503565b600080821215610bc157600080fd5b5090565b60006276a700610bd442610879565b019050610be68461ffff8516836115a7565b6101138260c001518486602001518560800151610c06896040015161160e565b61161c565b6000808080808080805b895151811015610c9c5760008a600001518281518110610c3157fe5b60200260200101519050600380811115610c4757fe5b8160a001516003811115610c5757fe5b1415610c6257600080fd5b60028160a001516003811115610c7457fe5b14158015610c8457506060810151155b15610c9357610c938b83611778565b50600101610c15565b5060005b895151811015610d3f5760008a600001518281518110610cbc57fe5b6020026020010151905060026003811115610cd357fe5b8160a001516003811115610ce357fe5b1415610cf757608081015160009055610d36565b60018160a001516003811115610d0957fe5b1415610d2257608081015180610d1f83826118c8565b50505b610d2e818686866119f7565b919650945092505b50600101610ca0565b5060608901516000610d4f611a65565b6001600160a01b038b1660009081526020829052604081209192505b8c6020015151811015610e195760008d602001518281518110610d8a57fe5b60200260200101519050806060015160001415610da75750610e11565b60028160a001516003811115610db957fe5b14158015610dd7575060038160a001516003811115610dd457fe5b14155b610de057600080fd5b610dec818989896119f7565b91995097509550610e0981848760088110610e0357fe5b016118c8565b600185019450505b600101610d6b565b506010831115610e2857600080fd5b64ffffffffff841115610e3a57600080fd5b50939a929950975095509350505050565b610e56838383611a72565b505050565b63ffffffff8110610e6b57600080fd5b6000610e75611ae6565b6001600160a01b039094166000908152602094909452506040909220805460ff909216600160501b0260ff60501b1963ffffffff909416600160301b0269ffffffff000000000000199093169290921792909216179055565b610edb8161ffff16611af3565b6001600160a01b031660c0830181905260009081908190610efb90611b19565b94509450945050506000610f128660c00151611b82565b505060808701859052604087018190526001600160d01b0319831660a088015260c0870151909150610f4690846000611be3565b602087015260c0860151610f5a9086611c76565b6060909601959095525050505050565b610f72615b10565b6000610f7d83611ccf565b90506108ac8382611ce1565b600062015180821015610f9b57600080fd5b6201518082610891565b6000610fb082610879565b905080836080015110610fc257600080fd5b600080610fcf8585611d24565b915091506000806000610ffd8860c001518960000151600001518a608001518a8c6000015160400151611e53565b9194509250905061100e8385611fab565b60608901519093506110209086611fab565b6060890181905260c08901518951805160409091015161104593909291908787611fc1565b6060890181905260001261105857600080fd5b6110618161208c565b64ffffffffff1660809098019790975250505050505050565b600061108983600001516120a0565b9050600061109685610879565b905060015b60208501515151811015611101576110f98786602001516000015183815181106110c157fe5b60200260200101516020015188600087878a88815181106110de57fe5b60200260200101516120b4909695949392919063ffffffff16565b60010161109b565b50505050505050565b6000806111278560c0015186600001516000015161ffff166120eb565b60a0860151855191925060011a620f42400290600090156111545761114f856276a700612120565b611156565b845b9050600061116384612135565b90505b801561122957600061117c89608001518361215a565b905060006111938a6000015160200151838a61220d565b9050806112095760c08a01518a51516000916111b39161ffff16856122b2565b90506000811215611207578a516000906111ce9085886122f7565b9050808711156111e0575060006111ed565b6111ea8188612120565b90505b6112036111fc83868d856123d7565b8a9061243b565b9850505b505b61121586846000612451565b955061122086612135565b92505050611166565b875160400151611239908661249c565b98975050505050505050565b6000611251838361243b565b905060008112156107ca57600080fd5b606080600061126e6124c0565b600086815260208290526040902090915061128981866124cd565b9097909650945050505050565b606060006112a2612613565b60008581526020829052604090209091506112bd81856124cd565b9695505050505050565b60006112d1612620565b61ffff831660009081526020919091526040812091506112ef61262d565b61ffff93909316600090815260209390935250604090912081548155600191820154910155565b61131e615acb565b6108ac838361132b61262d565b61263a565b8181026000198314156113605781158061135257508282828161134f57fe5b05145b61135b57600080fd5b6107ca565b82158061137557508183828161137257fe5b05145b6107ca57600080fd5b6000816000191480156113945750600160ff1b83145b1561139e57600080fd5b8183816113a757fe5b059392505050565b84516113be9085858585612691565b156113c857610113565b6040850151156113f55760006113e5866020015186868686612691565b905080156113f35750610113565b505b6113fe826127ad565b1561141157600081121561141157600080fd5b6001600160571b0319811280159061143057506001600160571b038113155b61143957600080fd5b8460200151518560400151141561145d5761145785602001516127c3565b60208601525b6000856020015186604001518151811061147357fe5b60209081029190910181015161ffff9690961686528501939093526040808501929092526060840152600060a090930192909252500180516001019052565b6000806114df6ec097ce7bc90715b34b9f10000000006108c886600001518661133090919063ffffffff16565b9050600083126114ef57806114fb565b6114fb8160001961287c565b949350505050565b600082611512575060006107ca565b8282028284828161151f57fe5b04146108ac57600080fd5b600080821161153857600080fd5b81838161154157fe5b049392505050565b600081861061155757600080fd5b84821061156357600080fd5b838310611589576115828461022088880361098b8388038b8803611503565b9050610663565b6115826115a087870361098b8688038a8703611503565b8590612120565b60006115b1612892565b60008481526020828152604080832088830151845282528083208684529091529081902090860151606087015160a088015160c089015160e08a0151959650939461160094869493929161289f565b6101138186608001516129b0565b60006107ca60001983611330565b60008061162d878761ffff166120eb565b905060006116396129f6565b6001600160a01b03891660009081526020828152604080832061ffff8c16845282528083208a8452909152812091925080611674888a612a03565b915091508061168257600080fd5b61168c8583612b0b565b1561170f578254600f90810b900b60006116a68983611fab565b90506116b181612b3b565b8554600f9190910b6001600160801b03166001600160801b03199091161785556116de8d8d8d8585612b65565b806116f2576116ef87856000612451565b96505b6117018d8d61ffff1689612c3a565b965061066395505050505050565b86156117695761171e87612b3b565b8354600f9190910b6001600160801b03166001600160801b031990911617835561174c8b8b8b60008b612b65565b61175885836001612451565b94506117698b8b61ffff1687612c3a565b50949998505050505050505050565b815151811061178657600080fd5b600082606001511161179757600080fd5b6000826000015182815181106117a957fe5b60200260200101519050600260038111156117c057fe5b8160a0015160038111156117d057fe5b141580156117ee575060038160a0015160038111156117eb57fe5b14155b6117f757600080fd5b606083018051600019019052600080805b85515181101561186a5760008660000151828151811061182457fe5b60200260200101519050828160800151118015611851575060028160a00151600381111561184e57fe5b14155b1561186157806080015192508193505b50600101611808565b5081841415611883575050600260a091909101526118c4565b60008560000151838151811061189557fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b815161ffff16158015906118e557508151613fff61ffff90911611155b6118ee57600080fd5b8160200151600010801561190b5750602082015164ffffffffff10155b61191457600080fd5b8160400151600010801561192d57506040820151600810155b61193657600080fd5b60608201516001600160571b03191380159061195d575060608201516001600160571b0312155b61196657600080fd5b8151815460208401516040850151606090950151600a0b6001600160581b0316600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b600080600080611a0688612c94565b9050841580611a1457508085115b15611a1d578094505b8680611a2d575060008860600151125b965061ffff861615611a3e57600080fd5b50509451939560f09490941b6001600160f01b03191660109390931c929092179350919050565b6000806107ca600d612cfb565b6000811215611a8057600080fd5b6000611a8a612d14565b6001600160a01b03851660009081526020828152604080832061ffff881684529091529020909150611abb83612d21565b8154600a9190910b6001600160581b0316600160a81b026001600160a81b0390911617905550505050565b6000806107ca6002612cfb565b600080611afe612d4a565b6000938452602052505060409020546001600160a01b031690565b600080600080600080611b2a611ae6565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d01b9150565b600080600080611b90612d57565b6001600160a01b0395909516600090815260209590955250506040909220546bffffffffffffffffffffffff811693600160601b82046001600160801b03169350600160e01b90910463ffffffff169150565b611beb615b3c565b611bf3615b3c565b60ff8416611c025790506108ac565b611c0c8585612d64565b815260ff841660608201528267ffffffffffffffff81118015611c2e57600080fd5b50604051908082528060200260200182016040528015611c6857816020015b611c55615b64565b815260200190600190039081611c4d5790505b506020820152949350505050565b600080611c81612d14565b6001600160a01b03851660009081526020828152604080832061ffff8816845290915281208054600160a81b9004600a90810b900b9450919250831215611cc757600080fd5b505092915050565b611cd7615ba8565b6107ca8242612d70565b611ce9615b10565b6000611cf88461ffff16612e36565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b600080611d2f615a5b565b60208501515160005b8151811015611e49576000828281518110611d4f57fe5b60200260200101519050611d6681604001516127ad565b611d6f57600080fd5b6000611d7a82612c94565b905087811115611d8957600080fd5b611da185836000015161ffff16846020015184612e53565b50600080611dbc836060015187612e6790919063ffffffff16565b92509050611dca8882611fab565b97505087826020015111611e115760c0890151825160208401518b5160400151600093611dfd939192909190868e612f0f565b9050611e098782611fab565b965050611e30565b611e2e8960c00151836000015184602001518c608001518561161c565b505b6020890151611e3f9084611778565b5050600101611d38565b5050509250929050565b600080600080611e67898961ffff166120eb565b9050611e7286610f89565b915086821015611e8157600080fd5b6000611e8d8884612a03565b50905080611ea357600080945094505050611fa0565b6000611eae83612135565b90505b8015801590611ec05750818111155b15611f2b576000611ed18a8361215a565b90506000611ee28d8d848d8d612f4d565b90506000811315611efe57611ef78882611fab565b9750611f0b565b611f088782611fab565b96505b611f1785846000612451565b9450611f2285612135565b92505050611eb1565b60005b8115611f8c576000611f408b8461215a565b9050600080611f4f8884612a03565b9150915080611f5d57600080fd5b611f6984836001612451565b9350611f7787866000612451565b9650611f8287612135565b9450505050611f2e565b611f9b8c8c61ffff1683612c3a565b505050505b955095509592505050565b818101828112156000831215146107ca57600080fd5b600080611fd883611fd28787611fab565b90611fab565b9050611fe48882612fe5565b91508360001315611ff457600080fd5b600083131561200257600080fd5b846000121561201c576120158585611fab565b9350612029565b6120268584611fab565b92505b6000846120358561160e565b121561204257508261204e565b61204b8561160e565b90505b60008112156120805760208901518951600091612070916108c8908590611330565b905061207e89898385613024565b505b50509695505050505050565b600064ffffffffff821115610bc157600080fd5b6060015161012c60089190911c60ff160290565b6120c18787878685613166565b6120da8760e001518860a001518960c001518588613221565b60c090970196909652505050505050565b6000806120f66132a9565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008282111561212f57600080fd5b50900390565b60008161214457506000610874565b61214d826132b6565b60ff036001019050919050565b60008161216657600080fd5b61010082111561217557600080fd5b600061218084610f89565b90506000605a841161219b57506201518083020190506107ca565b608784116121c3575060591983016207e900908102908206909103016276a7000190506107ca565b60c384116121ec5750608619830162278d00908102908206909103016301da9c000190506107ca565b5060c21983016276a70090810290820690910301630b1fa8000190506107ca565b600080841161222e5760405162461bcd60e51b815260040161034a90615dba565b600784111561224f5760405162461bcd60e51b815260040161034a90615e39565b6276a700830615612262575060006108ac565b600061226d83610879565b905060015b8581116122a65761228c612285826107d0565b839061089a565b85141561229e576001925050506108ac565b600101612272565b50600095945050505050565b6000806122bd6129f6565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b600080600061230b8660200151868661334f565b91509150600061231a876120a0565b90508161233a5786516123339061ffff168783886133de565b9350610b0d565b600061234586610879565b90506000612355612285866107d0565b9050600061236d8a6000015161ffff1683868b6133de565b9050600080876001141561238b5750506040808b01510151886123ba565b6123a161239a60018a036107d0565b869061089a565b90506123b78c6000015161ffff1682888d6133de565b91505b6123c7818584868f611549565b9c9b505050505050505050505050565b6000846123e6575060006114fb565b60006123f28585612120565b90506000612400828561347d565b9050633b9aca0081131561241357600080fd5b600061241f88836134ea565b90506000881261242f5780611239565b6112398160001961287c565b808203828113156000831215146107ca57600080fd5b60006001831015801561246657506101008311155b61246f57600080fd5b81156124885750600160ff1b60001983011c83176108ac565b50600160ff1b60001983011c1983166108ac565b815160009081906114df906108c8856ec097ce7bc90715b34b9f1000000000611330565b6000806107ca6004612cfb565b6060806000808467ffffffffffffffff811180156124ea57600080fd5b50604051908082528060200260200182016040528015612514578160200160208202803683370190505b50905060008567ffffffffffffffff8111801561253057600080fd5b5060405190808252806020026020018201604052801561255a578160200160208202803683370190505b50905060005b86811015612604578784600e811061257457fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff168382815181106125a257fe5b60209081029190910101526001909301928784600e81106125bf57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff168282815181106125ed57fe5b602090810291909101015260019384019301612560565b509093509150505b9250929050565b6000806107ca6005612cfb565b6000806107ca601c612cfb565b6000806107ca601b612cfb565b612642615acb565b600061264d84613503565b61ffff861660009081526020859052604081209192509060048610612673576001612676565b60005b60ff166002811061268357fe5b015490506112bd828261353c565b6000805b86518110156127a05760008782815181106126ac57fe5b602002602001015190508481604001511415806126d557508661ffff16816000015161ffff1614155b806126e4575085816020015114155b156126ef5750612798565b60028160a00151600381111561270157fe5b1415801561271f575060038160a00151600381111561271c57fe5b14155b61272857600080fd5b606081015160009061273a9086611fab565b9050612745866127ad565b1561275857600081121561275857600080fd5b6001600160571b0319811280159061277757506001600160571b038113155b61278057600080fd5b6060820152600160a090910181905291506106639050565b600101612695565b5060009695505050505050565b6000600282108015906107ca5750506008101590565b6060600082516000146127da5782516002026127dd565b60015b905060008167ffffffffffffffff811180156127f857600080fd5b5060405190808252806020026020018201604052801561283257816020015b61281f615b64565b8152602001906001900390816128175790505b50905060005b84518110156128745784818151811061284d57fe5b602002602001015182828151811061286157fe5b6020908102919091010152600101612838565b509392505050565b600081831261288b57816108ac565b5090919050565b6000806107ca600a612cfb565b600085121580156128b757506001600160501b038513155b6128c057600080fd5b600084121580156128d857506001600160501b038413155b6128e157600080fd5b8260001080156128f5575063ffffffff8311155b6128fe57600080fd5b816000108015612912575063ffffffff8211155b61291b57600080fd5b63ffffffff81111561292c57600080fd5b85546001600160501b0319166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b600081121580156129c857506001600160501b038113155b6129d157600080fd5b60019190910180546001600160501b0319166001600160501b03909216919091179055565b6000806107ca600c612cfb565b6000806000612a1185610f89565b905062015180840615612a2b57600080925092505061260c565b838110612a3f57600080925092505061260c565b6201518081850304605a8111612a5c5792506001915061260c9050565b6101688111612a9b576000620151806207e900840604820160591901905060068104605a0160068281612a8b57fe5b066000149450945050505061260c565b6108708111612acb5760006201518062278d00840604820161016719019050601e8104608701601e8281612a8b57fe5b611de28111612afb576000620151806276a700840604820161086f19019050605a810460c301605a8281612a8b57fe5b5061010095600095509350505050565b600060018210158015612b2057506101008211155b612b2957600080fd5b50600019011b600160ff1b9081161490565b600060016001607f1b03198212801590612b5c575060016001607f1b038213155b610bc157600080fd5b6000612b71838361365b565b905080612b7e5750610113565b6000612b886136e2565b61ffff87166000908152602082815260408083208984529091528120549192506001600160501b03909116810390612bc0828561243b565b90506000811315612bd057600080fd5b612be9612be4612bdf8361160e565b610bb2565b6136ef565b61ffff89166000908152602085815260408083208b8452909152902080546001600160501b0319166001600160501b0392909216919091179055612c2f89898987613705565b505050505050505050565b6014612c458261378f565b1115612c635760405162461bcd60e51b815260040161034a90615e10565b6000612c6d6132a9565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000808260400151118015612cae57506040820151600810155b612cb757600080fd5b6040820151600210612cce57506020810151610874565b6000612ce060018460400151036107d0565b60208401519091506108ac906276a700906102209084612120565b6000620f4240826026811115612d0d57fe5b0192915050565b6000806107ca6006612cfb565b60006001600160571b03198212801590612b5c57506001600160571b03821315610bc157600080fd5b6000806107ca6003612cfb565b6000806107ca6011612cfb565b6060612874838361385f565b612d78615ba8565b6000612d8384613880565b90508281600001511015612dc257600080612d9d86613948565b9050612dab868483886139c5565b9093509150612dbb868385613a69565b5050612dcf565b80518314612dcf57600080fd5b6040518060600160405280612dfd612df88460a001518560c0015161150390919063ffffffff16565b613c9a565b8152602001612e20612df88460a001518560e0015161150390919063ffffffff16565b8152602001826060015181525091505092915050565b600080612e41613cb0565b60009384526020525050604090205490565b612e61848484600185613166565b50505050565b60008082612e7a5750600090508061260c565b60008313612e8757600080fd5b612ea684608001516108c885876060015161133090919063ffffffff16565b9150612ec784608001516108c885876040015161133090919063ffffffff16565b6080850151909150612ed99084611245565b60808501526040840151612eed9082611245565b60408501526060840151612f019083611245565b606085015261260c84613cbd565b600080612f1d868685613d15565b90506000612f2c898387613d3e565b90935090506001600160a01b03881615612080576120808888888885613da6565b600080612f586129f6565b6001600160a01b03881660009081526020828152604080832061ffff8b1684528252808320898452909152902054909150600f90810b900b612f9e84898989858a612f0f565b6001600160a01b0390981660009081526020928352604080822061ffff90991682529783528781209681529590915250505091902080546001600160801b03191690555090565b60008082121561301e57613019600161301385602001516108c887600001518761133090919063ffffffff16565b9061243b565b6108ac565b50919050565b600061302e613e98565b61ffff8516600090815260209190915260409020805490915064ffffffffff16421461305957600080fd5b8054600160f81b900460ff1661306e57600080fd5b6001810154600090613089906001600160581b031685611fab565b82549091506000906130ab90600160281b90046001600160581b031685611fab565b9050816009191280156130be5750600082125b156130c857600091505b806009191280156130d95750600081125b156130e2575060005b6130f36130ee83610bb2565b613ea5565b6001840180546affffffffffffffffffffff19166001600160581b03929092169190911790556131256130ee82610bb2565b83546001600160581b0391909116600160281b026fffffffffffffffffffffff00000000001990911617835561315d87878688613ebb565b61110183613fcf565b6000613170612892565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e089015290915080841561320f5760018201546001600160501b03166080890152613217565b600060808901525b5050505050505050565b600080831161322f57600080fd5b8186111561323e575083610663565b600061324a8388612120565b90508381111561325d5785915050610663565b60006132698286614094565b9050600061327b633b9aca0083612120565b905061329c633b9aca0061098b6132928a85611503565b6102208c87611503565b9998505050505050505050565b6000806107ca600b612cfb565b6000816132c257600080fd5b600160801b82106132d557608091821c91015b600160401b82106132e857604091821c91015b64010000000082106132fc57602091821c91015b62010000821061330e57601091821c91015b610100821061331f57600891821c91015b6010821061332f57600491821c91015b6004821061333f57600291821c91015b6002821061087457600101919050565b6000806000851161335f57600080fd5b600785111561336d57600080fd5b600061337884610879565b905060015b8681116133d0576000613399613392836107d0565b849061089a565b9050868114156133b157509250600091506133d69050565b868111156133c757509250600191506133d69050565b5060010161337d565b50600080fd5b935093915050565b6000806133e9612892565b905060006276a7006133fa85610879565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b90910416816134615760405162461bcd60e51b815260040161034a90615d5c565b61346e8184848c8c613221565b9b9a5050505050505050505050565b60008061349a6134956301da9c0061098b8688611503565b6140ad565b90506134ac81621dcd6560491b6140cb565b90506134bf6134ba8261411e565b614140565b90506134d181621dcd6560491b614195565b905060006134de826141cb565b60070b95945050505050565b60006108ac6134f98484611330565b633b9aca0061137e565b60008160001061351257600080fd5b600782111561352057600080fd5b600482106135315760048203613533565b815b60080292915050565b613544615acb565b6064633b9aca008360ff86166020811061355a57fe5b1a028161356357fe5b0481526064633b9aca008360ff86166001016020811061357f57fe5b1a028161358857fe5b048160200181815250506135ad8260028560ff1601602081106135a757fe5b1a6141d4565b60808201819052610100908360ff8616600301602081106135ca57fe5b1a02816135d357fe5b0460408201526080810151610100908360ff8616600401602081106135f457fe5b1a02816135fd57fe5b0460608201526207a1208260ff85166005016020811061361957fe5b1a0260a0820152622625a08260ff85166006016020811061363657fe5b1a0260c08201528160ff84166007016020811061364f57fe5b1a60e082015292915050565b600081831480613678575060008312158015613678575060008212155b15613685575060006107ca565b600083131580156136965750816000125b156136a25750816107ca565b600082131580156136b35750826000125b156136c1576109918261160e565b600083131580156136d3575060008213155b1561004b57610991838361243b565b6000806107ca6020612cfb565b60006001600160501b03821115610bc157600080fd5b600080613713858585614208565b91509150600080600085121561372b5787915061372e565b50865b806001600160a01b0316826001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161377d929190615d29565b60405180910390a45050505050505050565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b60608061386c84846142ed565b915061387782614405565b90509250929050565b613888615bc9565b6000613892613e98565b61ffff93841660009081526020918252604090819020805464ffffffffff81168652600160281b81046001600160581b03908116948701949094526001820154841692860192909252600160d81b820463ffffffff166060860152600160801b9091049091166080840152600201546001600160501b0380821660a0850152600160501b8204811660c0850152600160a01b82041660e0840152600160f01b900460ff1661012c02909216610100820152919050565b600080613954836145c6565b6001600160a01b031663ef81f2166040518163ffffffff1660e01b81526004016040805180830381600087803b15801561398d57600080fd5b505af11580156139a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb9190615c7b565b6139cd615bc9565b60008060006139dd8886896145f6565b60c08b019290925260e08a019290925260208901519193509150613a01908361089a565b6020880152608087015160009015613a2f576080880151613a2c90613a268982612120565b90614701565b90505b613a4f613a44670de0b6b3a76400008361089a565b60a08a015190614718565b60a089015250506080860194909452505082529092909150565b6000613a73613e98565b60008561ffff1681526020019081526020016000209050613a97826000015161208c565b815464ffffffffff191664ffffffffff9190911617815560a0820151613abc906136ef565b6002820180546001600160501b0319166001600160501b039290921691909117905560c0820151613aec906136ef565b81600201600a6101000a8154816001600160501b0302191690836001600160501b03160217905550613b218260e001516136ef565b8160020160146101000a8154816001600160501b0302191690836001600160501b03160217905550613b568260200151613ea5565b81546001600160581b0391909116600160281b026fffffffffffffffffffffff0000000000199091161781556040820151613b9090613ea5565b6001820180546affffffffffffffffffffff19166001600160581b03929092169190911790556080820151613bc490613ea5565b81546001600160581b0391909116600160801b026affffffffffffffffffffff60801b199091161781556060820151613bfc90614735565b815463ffffffff91909116600160d81b0263ffffffff60d81b199091161781558215613c48576000613c2d84613c9a565b9050613c398582614748565b613c46610fee868361477f565b505b8361ffff167fef25641e225e493886510ca1ad6584fa7b442b9fea820a29d1de3ce27d270fd28360a001518460c001518560e00151604051613c8c93929190615eda565b60405180910390a250505050565b60006001600160ff1b03821115610bc157600080fd5b6000806107ca6009612cfb565b6000613cc8826147ff565b905060008160000160189054906101000a900463ffffffff169050613d0782846040015185606001518660a001518563ffffffff168860e0015161289f565b610e568284608001516129b0565b613d1d615ba8565b6000613d298585614803565b90925090508061287457610663858585614896565b600080613d4b848461249c565b9150613d578483612fe5565b905060008212156133d657613d9c600161301387600001516108c88960200151613d968a602001516108c88c600001518b61133090919063ffffffff16565b90611330565b9150935093915050565b6000613db28585614a2f565b90506000831215613dc457600160401b175b60006001600160a01b038716337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6284613dfc88614a4d565b604051613e0a929190615d4e565b60405180910390a46000613e216000841287614a6e565b9050806001600160a01b03166323de66516105e789613e3f87614a4d565b6040518463ffffffff1660e01b8152600401613e5d93929190615cec565b600060405180830381600087803b158015613e7757600080fd5b505af1158015613e8b573d6000803e3d6000fd5b5050505050505050505050565b6000806107ca601d612cfb565b60006001600160581b03821115610bc157600080fd5b6000613ec5614ace565b61ffff8516600090815260209190915260408120546001600160a01b03169150613eed614adb565b61ffff8616600090815260209190915260409081902054905163ad1c095d60e01b81526001600160a01b039091169150819063ad1c095d90613f359089908790600401615d10565b600060405180830381600087803b158015613f4f57600080fd5b505af1158015613f63573d6000803e3d6000fd5b505060405163ad1c095d60e01b81526001600160a01b038516925063ad1c095d9150613f959089908890600401615d10565b600060405180830381600087803b158015613faf57600080fd5b505af1158015613fc3573d6000803e3d6000fd5b50505050505050505050565b8054600282015460009161400b91600160281b9091046001600160581b031690613d96906001600160501b03600160501b820481169116611330565b60018301546002840154919250600091614045916001600160581b031690613d96906001600160501b03600160a01b820481169116611330565b835490915060009061407c9060016001600160581b03600160801b909204821601166ec097ce7bc90715b34b9f1000000000611330565b905080614089848461243b565b1315612e6157600080fd5b60006108ac6140a784633b9aca00611503565b8361152a565b6000677fffffffffffffff8211156140c457600080fd5b5060401b90565b600081600f0b600014156140de57600080fd5b600082600f0b604085600f0b901b816140f357fe5b05905060016001607f1b03198112801590614115575060016001607f1b038113155b6108ac57600080fd5b6000600f82900b60016001607f1b0319141561413957600080fd5b5060000390565b6000600160461b82600f0b1261415557600080fd5b683fffffffffffffffff1982600f0b121561417257506000610874565b6107ca608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d614ae8565b6000600f83810b9083900b0260401d60016001607f1b03198112801590614115575060016001607f1b038113156108ac57600080fd5b600f0b60401d90565b60008160ff166096106141ef5760ff8216622625a0026107ca565b5060951960ff919091160162e4e1c00263165a0bc00190565b60408051600280825260608281019093528291600091816020016020820280368337019050509050600061423c8787614a2f565b9050808260008151811061424c57fe5b602002602001018181525050600160401b81178260018151811061426c57fe5b6020908102919091010152604080516002808252606082019092526000918160200160208202803683370190505090506142a586614a4d565b816000815181106142b257fe5b6020026020010181815250506142c786614a4d565b816001815181106142d457fe5b6020908102919091010152919791965090945050505050565b606060088260ff16111561430057600080fd5b600061430a611a65565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff8111801561433f57600080fd5b5060405190808252806020026020018201604052801561437957816020015b614366615b64565b81526020019060019003908161435e5790505b50905060005b8560ff1681101561066157600083826008811061439857fe5b01905060008383815181106143a957fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b6060820152608001919091525060010161437f565b80516060908067ffffffffffffffff8111801561442157600080fd5b5060405190808252806020026020018201604052801561444b578160200160208202803683370190505b50915060005b818110156144a857600084828151811061446757fe5b60200260200101519050614488816000015182602001518360400151615598565b84838151811061449457fe5b602090810291909101015250600101614451565b5060015b818110156145bf57805b6000811180156144ee57508381815181106144cd57fe5b60200260200101518460018303815181106144e457fe5b6020026020010151115b156145b6578381815181106144ff57fe5b602002602001015184600183038151811061451657fe5b602002602001015185600184038151811061452d57fe5b6020026020010186848151811061454057fe5b602002602001018281525082815250505084818151811061455d57fe5b602002602001015185600183038151811061457457fe5b602002602001015186600184038151811061458b57fe5b6020026020010187848151811061459e57fe5b602090810291909101019190915252600019016144b6565b506001016144ac565b5050919050565b6000806145d16155c1565b61ffff939093166000908152602093909352505060409020546001600160a01b031690565b60008060008060008061460989886155ce565b8951909550919350915060009061463090614625908b90612120565b633b9aca0090611503565b905061466a61465f6301da9c006146478585611503565b8161464e57fe5b670de0b6b3a764000091900461089a565b60e08a015190614718565b965061468c6146816301da9c006146478785611503565b60c08a015190614718565b9550818314156146a35750600093506146f8915050565b60006146c56146ba6301da9c006146478786611503565b60e08b015190614718565b905060006146d38983612120565b90506146f08861098b838d6040015161150390919063ffffffff16565b965050505050505b93509350935093565b60006108ac6140a784670de0b6b3a7640000611503565b60006108ac6147278484611503565b670de0b6b3a764000061152a565b600063ffffffff821115610bc157600080fd5b600081121561475657600080fd5b6000614764610fee84611c76565b90506147708183611fab565b9050610e56610fee8483611a72565b6000614789614ace565b61ffff8416600090815260209190915260409081902054905163ad1c095d60e01b81526001600160a01b039091169150819063ad1c095d906147d19087908690600401615d10565b600060405180830381600087803b1580156147eb57600080fd5b505af1158015613217573d6000803e3d6000fd5b5190565b61480b615ba8565b600080614816615669565b61ffff861660009081526020828152604080832088845290915290208054600160f01b900460ff169350909150821561488d5780546001600160501b03600160a01b8204811691614868911682611503565b8552815461488690600160501b90046001600160501b031682611503565b6020860152505b50509250929050565b61489e615ba8565b6148a88483612d70565b905060006148b585613880565b905060006148c1615669565b61ffff87166000908152602082815260408083208984529091529020909150856148ea57600080fd5b825185146148f757600080fd5b8460001061490457600080fd5b8486111561491157600080fd5b835160001261491f57600080fd5b836020015160001261493057600080fd5b61493d8360a001516136ef565b81546001600160501b0391909116600160a01b0269ffffffffffffffffffff60a01b1990911617815560c0830151614974906136ef565b81546001600160501b0319166001600160501b039190911617815560e083015161499d906136ef565b815460ff60f01b196001600160501b0392909216600160501b0269ffffffffffffffffffff60501b199091161716600160f01b1781556149de878786615676565b858761ffff167f29fd83c1093c9721d6046038c76b6bddf0dc0c5dac3ecbfa23f8eb994ec6161386600001518760200151604051614a1d929190615d4e565b60405180910390a35050509392505050565b67ffff000000000000603083901b16600882901b1760011792915050565b600080821215614a6757614a608261160e565b9050610874565b5080610874565b600082614aa057614a7d614ace565b61ffff8316600090815260209190915260409020546001600160a01b03166108ac565b614aa8614adb565b61ffff8316600090815260209190915260409020546001600160a01b0316905092915050565b6000806107ca6021612cfb565b6000806107ca6022612cfb565b6000600160461b82600f0b12614afd57600080fd5b683fffffffffffffffff1982600f0b1215614b1a57506000610874565b6001607f1b60006780000000000000008416600f0b1315614b4c5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315614b79577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315614ba6577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315614bd35770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315614c00577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315614c2d57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315614c5a5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b1315614c8357700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315614caf5770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315614cdb577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b1315614d0757700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315614d33577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b1315614d5f57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b1315614d8b5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315614db7577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b1315614de05770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315614e0b577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315614e3657700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315614e615770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315614e8c57700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315614eb75770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315614ee2577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315614f0d57700100000162e430e5a18f6119e3c02282a50260801c5b600083600160281b16600f0b1315614f36577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315614f6057700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315614f8a5770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315614fb4577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315614fde5770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315615008577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561503257700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b131561505c5770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561508657700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156150af5770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b13156150d8577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561510157700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b131561512a577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561515357700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b131561517c5770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156151a5577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156151ce5770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156151f6577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561521e57700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156152465770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561526e57700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156152965770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b13156152be577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b13156152e657700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b131561530e577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561533557700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b131561535c5770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315615383577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156153aa5770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b13156153d1577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b13156153f857700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b131561541f5770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561544657700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b131561546c5770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315615492577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156154b857700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156154de577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561550457700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b131561552a5770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315615550577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156155765770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b038111156107ca57600080fd5b67ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b6000806107ca601f612cfb565b60008060008060008560200151111561561b576156186155ff8660c00151876020015161150390919063ffffffff16565b60e0870151604088015161561291611503565b90614094565b90505b6000615626876157ce565b90506156328183610949565b945081156156495761564681866001615801565b93505b6020860151156156605761565d8583615879565b92505b50509250925092565b6000806107ca601e612cfb565b60006156806136e2565b61ffff851660009081526020828152604080832087845290915281208054929350916001600160501b031690036156b5615a5b565b6156c58161ffff89168880612e53565b6080810151156156e75760405162461bcd60e51b815260040161034a90615e69565b60006156fb866156f68561160e565b61249c565b9050600061571161570c8886615892565b61160e565b90506157216105e78a8385613024565b84546001600160501b03600160501b82048116600090810392600160a01b9004909116908212806157525750806000125b156157965760006157638a8461249c565b905060006157718383611fab565b90508060001215615786576157868d82614748565b6157938d8d8685856158ee565b50505b50505061ffff909716600090815260209485526040808220978252969094525050509190912080546001600160f01b03191690555050565b6157d6615acb565b60006157e061262d565b61ffff84166000908152602091909152604081205491506108ac908261353c565b600080615820606461098b8760e001518761150390919063ffffffff16565b90508460a00151811015615835575060a08401515b8460c00151811115615848575060c08401515b821561585f57615858848261089a565b9150612874565b83811161586e57808403610663565b506000949350505050565b60006108ac6158888484611503565b633b9aca0061152a565b6000816000131580156158a55750600a82125b156158b2575060006107ca565b600082126158bf57600080fd5b6108ac600161301385602001516108c86ec097ce7bc90715b34b9f10000000008761133090919063ffffffff16565b6000600160401b6158ff8787614a2f565b17905060006105e7337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628461593389614a4d565b604051615941929190615d4e565b60405180910390a46159566105e7878561477f565b600082131561596f5761596f6105e7610fee8885615977565b505050505050565b6000615981614ace565b61ffff8416600090815260209190915260408120546001600160a01b031691508212156159ac579293925b806001600160a01b03166323de665186866159c686614a4d565b6040518463ffffffff1660e01b81526004016159e493929190615cec565b600060405180830381600087803b1580156159fe57600080fd5b505af1158015612c2f573d6000803e3d6000fd5b6040518060e00160405280615a25615b10565b8152602001615a32615b3c565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101825260008082526020820152908101615b2f615ba8565b8152600060209091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6040518060c00160405280600061ffff1681526020016000815260200160008152602001600081526020016000815260200160006003811115615ba357fe5b905290565b60405180606001604052806000815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803561ffff8116811461087457600080fd5b600060208284031215615c38578081fd5b6108ac82615c15565b60008060408385031215615c53578081fd5b615c5c83615c15565b915060208301358015158114615c70578182fd5b809150509250929050565b60008060408385031215615c8d578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015615ccd57815187529582019590820190600101615cb1565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060408252615d3c6040830185615c9e565b82810360208401526106638185615c9e565b918252602082015260400190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601490820152734f7261636c652072617465206f766572666c6f7760601b604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252601190820152704d75737420696e6974206d61726b65747360781b604082015260600190565b60208082526017908201527f494d3a20696d706c6965642072617465206661696c6564000000000000000000604082015260600190565b61ffff91909116815260200190565b928352602083019190915260408201526060019056fea2646970667358221220220825d00ed427df08e7a749eeb8fc02827a73bc697f53c8a8fe79b736ef289b64736f6c63430007060033", "bytecodeSha1": "4e3725acbbaa4df320cb5535ddccd67a1115c787", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.7.6+commit.7338295f"}, "contractName": "InitializeMarketsAction", "coverageMap": {"branches": {"116": {}, "122": {}, "124": {}, "126": {}, "127": {}, "129": {}, "130": {}, "131": {}, "132": {}, "134": {}, "136": {}, "137": {}, "22": {"InitializeMarketsAction._calculateNetPrimeCashAvailable": {"647": [11449, 11460, false], "648": [12358, 12399, true]}, "InitializeMarketsAction._calculatefCashAmountFromUtilization": {"649": [17042, 17089, true]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"650": [12985, 13012, true]}, "InitializeMarketsAction._interpolateFutureRate": {"651": [14129, 14157, true], "652": [14339, 14360, false], "653": [15310, 15326, true]}, "InitializeMarketsAction._settleNTokenLiquidityTokens": {"655": [4968, 5014, true], "656": [5191, 5214, true], "657": [5859, 5886, false]}, "InitializeMarketsAction._settleNTokenPortfolio": {"654": [7571, 7613, true]}, "InitializeMarketsAction.initializeMarkets": {"634": [18637, 18648, false], "635": [18672, 18718, true], "636": [20337, 20348, true], "637": [20459, 20465, false], "638": [20469, 20496, true], "639": [20783, 20789, false], "640": [20793, 20827, false], "641": [21843, 21849, false], "642": [22123, 22129, false], "643": [22909, 22964, false], "644": [24655, 24710, false], "645": [25735, 25790, false], "646": [25995, 26010, true]}}, "32": {"nTokenMintAction.getNTokenNegativefCashWithholding": {"961": [18971, 18998, true], "962": [19577, 19590, false], "963": [19933, 19945, false], "964": [20705, 20734, false]}}, "42": {}, "46": {}, "47": {}, "48": {}, "51": {}, "52": {}, "53": {"Emitter._getPrimeProxy": {"797": [7313, 7319, true]}, "Emitter.emitChangefCashLiquidity": {"795": [8432, 8449, false]}, "Emitter.emitSettlefCash": {"796": [10139, 10155, false]}, "Emitter.emitSettlefCashDebtInReserve": {"798": [11388, 11402, false]}, "Emitter.emitTransferPrimeCash": {"799": [14196, 14217, false]}}, "54": {"BalanceHandler._setPositiveCashBalance": {"739": [17529, 17548, true]}, "BalanceHandler.getPositiveCashBalance": {"740": [17125, 17141, true]}, "BalanceHandler.incrementFeeToReserve": {"741": [15362, 15370, true]}}, "55": {}, "56": {}, "57": {}, "58": {}, "59": {}, "63": {"CashGroup.calculateOracleRate": {"765": [9202, 9215, false], "766": [9817, 9833, false]}, "CashGroup.interpolateOracleRate": {"762": [6242, 6271, true], "763": [6345, 6373, true], "764": [6609, 6630, false]}}, "64": {"DateTime.getBitNumFromMaturity": {"785": [4231, 4260, false], "786": [4335, 4360, false], "787": [4628, 4666, false], "788": [4728, 4767, false], "789": [5610, 5650, false], "790": [6060, 6102, false]}, "DateTime.getMarketIndex": {"791": [3175, 3193, true], "792": [3212, 3263, true], "793": [3535, 3561, false], "794": [3678, 3703, false]}, "DateTime.getMaturityFromBitNum": {"776": [6970, 6981, true], "777": [7053, 7066, true], "778": [7218, 7253, false], "779": [7335, 7371, false], "780": [7715, 7753, false]}, "DateTime.getReferenceTime": {"774": [445, 475, true]}, "DateTime.getTimeUTC0": {"775": [688, 709, true]}, "DateTime.getTradedMarket": {"767": [1034, 1044, false], "768": [1084, 1094, false], "769": [1138, 1148, false], "770": [1185, 1195, false], "771": [1236, 1246, false], "772": [1287, 1297, false], "773": [1339, 1349, false]}, "DateTime.isValidMarketMaturity": {"781": [1685, 1703, true], "782": [1747, 1798, true], "783": [1840, 1873, false], "784": [2023, 2072, false]}}, "66": {"InterestRateCurve._getMarketIndexOffset": {"811": [2338, 2353, true], "812": [2372, 2420, true], "813": [2446, 2461, true]}, "InterestRateCurve._getfCashInterestRateParams": {"807": [2821, 2836, true]}, "InterestRateCurve.calculateMaxRate": {"814": [3274, 3317, true]}, "InterestRateCurve.getInterestRate": {"800": [12812, 12832, true], "801": [13163, 13211, true], "802": [13227, 13267, false], "803": [13483, 13523, false]}, "InterestRateCurve.getPostFeeInterestRate": {"815": [17668, 17697, false], "816": [17742, 17771, false], "817": [17817, 17825, false], "818": [18153, 18181, true]}, "InterestRateCurve.getUtilizationFromInterestRate": {"804": [15118, 15138, true], "805": [15154, 15188, false], "806": [15399, 15433, false]}, "InterestRateCurve.updateRateOracle": {"808": [10916, 10940, true], "809": [11088, 11114, false], "810": [11280, 11311, false]}}, "67": {"Market._setMarketStorage": {"819": [9074, 9089, false], "820": [9093, 9123, true], "821": [9178, 9197, false], "822": [9201, 9235, true], "823": [9294, 9313, false], "824": [9317, 9352, true], "825": [9412, 9426, false], "826": [9430, 9460, true], "827": [9541, 9578, true]}, "Market._setTotalLiquidity": {"828": [8635, 8654, false], "829": [8658, 8692, true]}, "Market.getOracleRate": {"832": [5212, 5226, true]}, "Market.removeLiquidity": {"830": [2181, 2200, false], "831": [2233, 2251, true]}}, "68": {}, "69": {"nTokenHandler.setArrayLengthAndInitializedTime": {"960": [6652, 6699, true]}}, "70": {}, "71": {"PrimeCashExchangeRate._checkInvariant": {"893": [15980, 16010, true]}, "PrimeCashExchangeRate._getScalarIncrease": {"894": [23214, 23259, false]}, "PrimeCashExchangeRate._setPrimeCashFactorsOnAccrue": {"892": [11018, 11042, false]}, "PrimeCashExchangeRate._updatePrimeCashScalars": {"891": [25867, 25901, false]}, "PrimeCashExchangeRate.getPrimeCashRateStateful": {"883": [28130, 28164, false], "884": [28574, 28609, true]}, "PrimeCashExchangeRate.getPrimeInterestRates": {"895": [20035, 20063, false], "896": [20785, 20800, false], "897": [21238, 21266, false]}, "PrimeCashExchangeRate.updateTotalPrimeDebt": {"885": [12205, 12240, true], "886": [12696, 12707, true], "887": [13530, 13553, false], "888": [13557, 13578, false], "889": [13615, 13640, false], "890": [13644, 13667, false]}, "PrimeCashExchangeRate.updateTotalfCashDebtOutstanding": {"881": [17910, 17928, false], "882": [18420, 18437, true]}}, "72": {"PrimeRateLib._convertSettledfCash": {"906": [6900, 6926, false]}, "PrimeRateLib._setPrimeSettlementRate": {"907": [19253, 19304, true], "908": [19348, 19383, true], "909": [19425, 19438, true], "910": [19481, 19502, true], "911": [19555, 19574, true], "912": [19622, 19639, true]}, "PrimeRateLib._settleTotalfCashDebts": {"913": [20807, 20833, true], "914": [22161, 22183, true], "915": [22187, 22209, false], "916": [22483, 22497, false]}, "PrimeRateLib.convertSettledfCash": {"904": [5379, 5400, false]}, "PrimeRateLib.convertToStorageInSettlement": {"899": [11457, 11481, true], "900": [11500, 11524, true], "901": [11540, 11569, false], "902": [11822, 11869, false], "903": [12228, 12252, false]}, "PrimeRateLib.convertToStorageValue": {"905": [7686, 7720, true]}, "PrimeRateLib.convertToUnderlying": {"898": [14801, 14821, true]}, "PrimeRateLib.convertUnderlyingToDebtStorage": {"917": [15898, 15913, false], "918": [15917, 15932, false], "919": [15960, 15974, true]}}, "73": {}, "74": {"BitmapAssetsHandler.addifCashAsset": {"757": [3987, 3994, true], "758": [4055, 4084, false], "759": [4581, 4599, false], "760": [4806, 4819, false]}, "BitmapAssetsHandler.setAssetsBitmap": {"761": [1437, 1495, true]}}, "75": {"PortfolioHandler._extendNewAssetArray": {"879": [5808, 5829, true]}, "PortfolioHandler._loadAssetArray": {"880": [17737, 17767, true]}, "PortfolioHandler._mergeAssetIntoArray": {"870": [1787, 1815, true], "871": [1835, 1865, true], "872": [1885, 1911, false], "873": [2110, 2156, false], "874": [2176, 2230, true], "875": [2430, 2470, false], "876": [2498, 2514, true], "877": [2611, 2641, false], "878": [2645, 2675, true]}, "PortfolioHandler._storeAsset": {"858": [12091, 12111, false], "859": [12115, 12159, true], "860": [12220, 12238, false], "861": [12242, 12276, true], "862": [12334, 12353, false], "863": [12357, 12411, true], "864": [12464, 12497, false], "865": [12501, 12534, true]}, "PortfolioHandler._updatePortfolioContext": {"866": [11410, 11429, true], "867": [11433, 11464, false], "868": [11589, 11636, true]}, "PortfolioHandler.addAsset": {"843": [3486, 3672, false], "844": [3704, 3740, false], "845": [3971, 3977, false], "846": [4160, 4200, false], "847": [4224, 4237, true], "848": [4325, 4352, false], "849": [4356, 4383, true], "850": [4498, 4565, false]}, "PortfolioHandler.buildPortfolioState": {"869": [16119, 16140, false]}, "PortfolioHandler.deleteAsset": {"851": [13151, 13193, true], "852": [13241, 13277, true], "853": [13428, 13482, false], "854": [13498, 13560, true], "855": [14036, 14065, false], "856": [14069, 14111, false], "857": [14239, 14266, false]}, "PortfolioHandler.storeAssets": {"833": [7751, 7805, true], "834": [7881, 7927, false], "835": [7931, 7950, false], "836": [8277, 8323, false], "837": [8561, 8607, false], "838": [9825, 9844, false], "839": [9893, 9939, false], "840": [9959, 10013, true], "841": [10574, 10598, true], "842": [10660, 10694, true]}}, "77": {"SettleBitmapAssets.settleBitmappedCashGroup": {"956": [2305, 2335, true], "957": [2679, 2697, false], "958": [3239, 3259, false], "959": [3907, 3914, true]}}, "79": {"AssetHandler.getPresentfCashValue": {"734": [2992, 3005, false], "735": [3314, 3356, true], "736": [3557, 3569, true]}, "AssetHandler.getSettlementDate": {"737": [1333, 1352, false], "738": [1356, 1410, true]}}, "87": {"ABDKMath64x64.div": {"659": [6730, 6736, true], "660": [6796, 6815, false], "661": [6819, 6838, true]}, "ABDKMath64x64.exp": {"663": [21388, 21412, true], "664": [21436, 21461, false]}, "ABDKMath64x64.exp_2": {"667": [14687, 14711, true], "668": [14735, 14760, false], "669": [14852, 14878, false], "670": [14956, 14982, false], "671": [15060, 15086, false], "672": [15164, 15190, false], "673": [15268, 15293, false], "674": [15371, 15396, false], "675": [15474, 15499, false], "676": [15577, 15602, false], "677": [15680, 15704, false], "678": [15782, 15806, false], "679": [15884, 15908, false], "680": [15986, 16010, false], "681": [16088, 16111, false], "682": [16189, 16212, false], "683": [16290, 16313, false], "684": [16391, 16414, false], "685": [16492, 16514, false], "686": [16592, 16614, false], "687": [16692, 16714, false], "688": [16792, 16814, false], "689": [16892, 16913, false], "690": [16991, 17012, false], "691": [17090, 17111, false], "692": [17189, 17210, false], "693": [17288, 17308, false], "694": [17386, 17406, false], "695": [17484, 17504, false], "696": [17582, 17602, false], "697": [17680, 17699, false], "698": [17777, 17796, false], "699": [17874, 17893, false], "700": [17971, 17990, false], "701": [18068, 18086, false], "702": [18164, 18182, false], "703": [18260, 18278, false], "704": [18356, 18374, false], "705": [18452, 18469, false], "706": [18547, 18564, false], "707": [18642, 18659, false], "708": [18737, 18754, false], "709": [18832, 18848, false], "710": [18926, 18942, false], "711": [19020, 19036, false], "712": [19114, 19130, false], "713": [19208, 19223, false], "714": [19301, 19316, false], "715": [19394, 19409, false], "716": [19487, 19502, false], "717": [19580, 19594, false], "718": [19672, 19686, false], "719": [19764, 19778, false], "720": [19856, 19870, false], "721": [19948, 19961, false], "722": [20039, 20052, false], "723": [20130, 20143, false], "724": [20221, 20234, false], "725": [20312, 20324, false], "726": [20402, 20414, false], "727": [20492, 20504, false], "728": [20582, 20594, false], "729": [20672, 20683, false], "730": [20761, 20772, false], "731": [20850, 20861, false], "732": [20939, 20950, false], "733": [21075, 21104, true]}, "ABDKMath64x64.fromUInt": {"658": [1983, 2006, true]}, "ABDKMath64x64.mul": {"665": [4286, 4305, false], "666": [4309, 4328, true]}, "ABDKMath64x64.neg": {"662": [8646, 8660, true]}}, "88": {"Bitmap.getMSB": {"748": [2263, 2269, true], "749": [2311, 2351, false], "750": [2424, 2448, false], "751": [2519, 2535, false], "752": [2606, 2618, false], "753": [2689, 2699, false], "754": [2768, 2777, false], "755": [2846, 2854, false], "756": [2923, 2931, false]}, "Bitmap.getNextBitNum": {"742": [3345, 3359, false]}, "Bitmap.isBitSet": {"746": [811, 821, false], "747": [825, 837, true]}, "Bitmap.setBit": {"743": [438, 448, false], "744": [452, 464, true], "745": [509, 514, false]}}, "89": {}, "90": {"SafeInt256.abs": {"945": [1730, 1735, false]}, "SafeInt256.add": {"929": [1524, 1552, true]}, "SafeInt256.div": {"927": [1121, 1128, false], "928": [1132, 1148, true]}, "SafeInt256.min": {"931": [3489, 3494, true]}, "SafeInt256.mul": {"922": [510, 517, false], "923": [528, 534, true], "924": [538, 548, true], "925": [573, 579, true], "926": [583, 593, true]}, "SafeInt256.negChange": {"936": [3781, 3793, true], "937": [3798, 3808, false], "938": [3812, 3820, false], "939": [3845, 3855, false], "940": [3859, 3866, false], "941": [4073, 4081, false], "942": [4085, 4094, false], "943": [4307, 4317, false], "944": [4321, 4329, false]}, "SafeInt256.sub": {"930": [1398, 1426, true]}, "SafeInt256.subNoNeg": {"921": [1898, 1904, true]}, "SafeInt256.toInt128": {"932": [3176, 3205, false], "933": [3209, 3238, true]}, "SafeInt256.toInt88": {"934": [2976, 3004, false], "935": [3008, 3036, true]}, "SafeInt256.toUint": {"920": [2486, 2492, true]}}, "91": {"SafeUint256.add": {"946": [481, 487, true]}, "SafeUint256.div": {"949": [1879, 1884, true]}, "SafeUint256.mul": {"947": [1233, 1239, false], "948": [1294, 1304, true]}, "SafeUint256.sub": {"951": [869, 875, true]}, "SafeUint256.toInt": {"953": [4964, 4994, true]}, "SafeUint256.toUint32": {"955": [3560, 3581, true]}, "SafeUint256.toUint40": {"950": [3699, 3720, true]}, "SafeUint256.toUint80": {"952": [4259, 4280, true]}, "SafeUint256.toUint88": {"954": [4398, 4419, true]}}}, "statements": {"116": {}, "122": {}, "124": {}, "126": {}, "127": {}, "129": {}, "130": {}, "131": {}, "132": {}, "134": {}, "136": {}, "137": {}, "22": {"InitializeMarketsAction._calculateNetPrimeCashAvailable": {"29": [11476, 11544], "30": [11575, 11616], "31": [11630, 11697], "32": [11800, 11909], "33": [12047, 12120], "34": [12175, 12216], "35": [12350, 12400], "36": [12437, 12465]}, "InitializeMarketsAction._calculatefCashAmountFromUtilization": {"62": [17034, 17090], "63": [17221, 17314]}, "InitializeMarketsAction._getGovernanceParameters": {"37": [3252, 3400], "38": [3604, 3659], "39": [3733, 3781], "40": [3714, 3717], "41": [3951, 4012], "42": [4022, 4094], "43": [4203, 4348], "44": [4184, 4187], "45": [4369, 4382]}, "InitializeMarketsAction._getPreviousMarkets": {"116": [10695, 11110], "117": [10676, 10679]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"69": [12977, 13013], "70": [13024, 13392]}, "InitializeMarketsAction._interpolateFutureRate": {"71": [14121, 14158], "72": [14376, 14618], "73": [15303, 15349]}, "InitializeMarketsAction._setLiquidityAmount": {"58": [15877, 15921], "59": [15931, 15975], "60": [16064, 16269], "61": [16345, 16417]}, "InitializeMarketsAction._settleNTokenLiquidityTokens": {"214": [4960, 5015], "215": [5183, 5215], "216": [5233, 5314], "217": [5421, 5480], "218": [5498, 5542], "219": [6187, 6252], "220": [6291, 6533], "221": [6562, 6598], "222": [4838, 4841]}, "InitializeMarketsAction._settleNTokenPortfolio": {"110": [7563, 7614], "111": [8579, 8646], "112": [8717, 8775], "113": [8918, 9201], "114": [9284, 9315], "115": [9409, 9462]}, "InitializeMarketsAction.finalizeMarket": {"80": [27775, 27839], "81": [27850, 28057]}, "InitializeMarketsAction.getLibInfo": {"1": [28216, 28248]}, "InitializeMarketsAction.initializeMarkets": {"2": [18239, 18285], "3": [18496, 18541], "4": [18664, 18719], "5": [19321, 19445], "6": [21198, 21232], "7": [21250, 21348], "8": [21500, 21560], "9": [22052, 22094], "10": [22647, 22808], "11": [22992, 23047], "12": [24022, 24554], "13": [24738, 24793], "14": [25814, 25869], "15": [25891, 25965], "16": [25987, 26035], "17": [26072, 26168], "18": [26405, 26429], "19": [26448, 26481], "20": [26596, 26635], "21": [26726, 26774], "22": [26788, 26833], "23": [19258, 19261], "24": [27091, 27231], "25": [27241, 27400], "26": [27411, 27454]}, "InitializeMarketsAction.sweepCashIntoMarkets": {"0": [17715, 17764]}}, "32": {"nTokenMintAction.getNTokenNegativefCashWithholding": {"118": [20762, 20776], "119": [20831, 20876], "120": [20921, 21092], "121": [21197, 21246], "122": [21260, 21297], "123": [21318, 21395]}}, "42": {}, "46": {}, "47": {}, "48": {"LibStorage._getStorageSlot": {"334": [16015, 16060]}}, "51": {}, "52": {}, "53": {"Emitter._fCashPair": {"489": [7752, 7763], "490": [7773, 7806], "491": [7869, 7902], "492": [7912, 7945], "493": [7956, 7976]}, "Emitter._getPrimeProxy": {"540": [7306, 7480]}, "Emitter._posfCashId": {"537": [6442, 6654]}, "Emitter.emitBorrowOrRepayPrimeDebt": {"473": [15781, 15834], "474": [15844, 15899]}, "Emitter.emitChangefCashLiquidity": {"421": [8451, 8465], "422": [8491, 8503], "423": [8524, 8577]}, "Emitter.emitMintOrBurnPrimeCash": {"520": [13787, 13834]}, "Emitter.emitSettlefCash": {"469": [10157, 10186], "470": [10196, 10281], "471": [10428, 10518]}, "Emitter.emitSettlefCashDebtInReserve": {"629": [10959, 11071], "630": [11291, 11374], "631": [11502, 11600]}, "Emitter.emitTransferPrimeCash": {"632": [14219, 14242], "633": [14252, 14318]}}, "54": {"BalanceHandler._setPositiveCashBalance": {"195": [17521, 17549], "196": [17770, 17823]}, "BalanceHandler.getPositiveCashBalance": {"210": [16996, 17036], "211": [17117, 17142]}, "BalanceHandler.incrementFeeToReserve": {"517": [15354, 15371], "518": [15517, 15553], "519": [15563, 15635]}, "BalanceHandler.setBalanceStorageForNToken": {"97": [14670, 14733]}}, "55": {}, "56": {}, "57": {}, "58": {}, "59": {}, "63": {"CashGroup._getCashGroupStorageBytes": {"341": [10745, 10769]}, "CashGroup.buildCashGroup": {"213": [15047, 15255]}, "CashGroup.buildCashGroupStateful": {"107": [15947, 15991]}, "CashGroup.calculateOracleRate": {"269": [9231, 9319], "270": [9981, 10029], "271": [9938, 9963], "272": [10127, 10203], "273": [10222, 10412], "274": [10441, 10535]}, "CashGroup.getRateOracleTimeWindow": {"245": [4965, 5063]}, "CashGroup.interpolateOracleRate": {"152": [6234, 6272], "153": [6337, 6374], "154": [6646, 6890], "155": [7233, 7569]}}, "64": {"DateTime.getBitNumFromMaturity": {"315": [4262, 4279], "316": [4362, 4379], "317": [4682, 4707], "318": [5254, 5589], "319": [5870, 6039], "320": [6325, 6500], "321": [6646, 6665]}, "DateTime.getMarketIndex": {"393": [3167, 3194], "394": [3204, 3264], "395": [3563, 3580], "396": [3705, 3721], "397": [3377, 3380], "398": [3742, 3750]}, "DateTime.getMaturityFromBitNum": {"253": [6962, 6982], "254": [7045, 7067], "255": [7269, 7314], "256": [7623, 7694], "257": [7387, 7609], "258": [7935, 8008], "259": [7769, 7921], "260": [8208, 8285], "261": [8039, 8194]}, "DateTime.getReferenceTime": {"54": [437, 476], "55": [486, 536]}, "DateTime.getTimeUTC0": {"108": [680, 710], "109": [720, 756]}, "DateTime.getTradedMarket": {"46": [1046, 1070], "47": [1096, 1124], "48": [1150, 1171], "49": [1197, 1222], "50": [1248, 1273], "51": [1299, 1325], "52": [1351, 1377], "53": [1388, 1411]}, "DateTime.isValidMarketMaturity": {"262": [1677, 1729], "263": [1739, 1825], "264": [1875, 1887], "265": [2074, 2085], "266": [2000, 2003], "267": [2106, 2118]}}, "66": {"InterestRateCurve._getMarketIndexOffset": {"405": [2330, 2354], "406": [2364, 2421], "407": [2431, 2498]}, "InterestRateCurve._getfCashInterestRateParams": {"288": [2855, 2900]}, "InterestRateCurve.calculateMaxRate": {"488": [3267, 3539]}, "InterestRateCurve.getActiveInterestRateParameters": {"130": [7526, 7677]}, "InterestRateCurve.getInterestRate": {"64": [12804, 12833], "65": [13155, 13212], "66": [13341, 13462], "67": [13764, 14096], "68": [14341, 14679]}, "InterestRateCurve.getPostFeeInterestRate": {"621": [17699, 17728], "622": [17773, 17802], "623": [17945, 17998], "624": [18131, 18218]}, "InterestRateCurve.getPrimeCashInterestRateParameters": {"620": [8246, 8302]}, "InterestRateCurve.getUtilizationFromInterestRate": {"74": [15110, 15139], "75": [15263, 15378], "76": [15691, 16017], "77": [16628, 16960]}, "InterestRateCurve.setActiveInterestRateParameters": {"128": [9611, 9644], "129": [9654, 9687]}, "InterestRateCurve.unpackInterestRateParams": {"408": [3844, 4008], "409": [4018, 4182], "410": [4192, 4257], "411": [4439, 4518], "412": [4528, 4607], "413": [4666, 4768], "414": [4778, 4887], "415": [4897, 4968]}, "InterestRateCurve.updateRateOracle": {"373": [10908, 10941], "374": [11116, 11139], "375": [11313, 11336], "376": [11713, 11870]}}, "67": {"Market._loadMarketStorage": {"364": [6307, 6332], "365": [6342, 6368], "366": [6378, 6422], "367": [6432, 6484], "368": [6494, 6548], "369": [6558, 6602], "370": [6612, 6670], "371": [6715, 6767], "372": [6798, 6823]}, "Market._setMarketStorage": {"303": [9066, 9124], "304": [9170, 9236], "305": [9286, 9353], "306": [9404, 9461], "307": [9507, 9579], "308": [9635, 9680], "309": [9690, 9743], "310": [9753, 9808], "311": [9818, 9863], "312": [9873, 9932]}, "Market._setMarketStorageForLiquidity": {"462": [7392, 7616], "463": [7627, 7683]}, "Market._setTotalLiquidity": {"313": [8627, 8693], "314": [8750, 8803]}, "Market.getOracleRate": {"399": [5204, 5253], "400": [5264, 5492]}, "Market.loadMarketWithSettlementDate": {"246": [11138, 11218], "247": [11229, 11455]}, "Market.loadSettlementMarket": {"342": [11654, 11724]}, "Market.removeLiquidity": {"343": [2202, 2215], "344": [2225, 2252], "345": [2297, 2377], "346": [2387, 2459], "347": [2470, 2540], "348": [2550, 2603], "349": [2613, 2678], "350": [2689, 2726]}, "Market.setMarketStorageForInitialize": {"156": [8193, 8418], "157": [8429, 8485]}}, "68": {}, "69": {"nTokenHandler._getParameters": {"282": [11368, 11391], "283": [11405, 11412], "284": [11426, 11449], "285": [11463, 11470], "286": [11349, 11352], "287": [11491, 11514]}, "nTokenHandler.getDepositParameters": {"126": [7514, 7601]}, "nTokenHandler.getInitializationParameters": {"127": [10872, 10963]}, "nTokenHandler.getNTokenContext": {"198": [1552, 1583], "199": [1593, 1658], "200": [1668, 1717], "201": [1727, 1770], "202": [1780, 1817]}, "nTokenHandler.loadNTokenPortfolioNoCashGroup": {"101": [12044, 12091], "102": [12589, 12637], "103": [12647, 12687], "104": [12697, 12727], "105": [12738, 12886], "106": [12897, 12988]}, "nTokenHandler.loadNTokenPortfolioStateful": {"27": [13163, 13213], "28": [13223, 13286]}, "nTokenHandler.nTokenAddress": {"197": [2088, 2112]}, "nTokenHandler.setArrayLengthAndInitializedTime": {"98": [6616, 6700], "99": [6901, 6958], "100": [6968, 7006]}}, "70": {"nTokenSupply.getStoredNTokenSupplyFactors": {"203": [1170, 1209], "204": [1422, 1487], "205": [1497, 1552]}}, "71": {"PrimeCashExchangeRate._checkInvariant": {"475": [15972, 16011]}, "PrimeCashExchangeRate._getScalarIncrease": {"509": [22109, 22215], "510": [22577, 22830], "511": [22841, 23089], "512": [23275, 23339], "513": [24262, 24350]}, "PrimeCashExchangeRate._setPrimeCashFactorsOnAccrue": {"450": [10428, 10474], "451": [10484, 10534], "452": [10544, 10586], "453": [10596, 10634], "454": [10714, 10764], "455": [10774, 10820], "456": [10830, 10896], "457": [10906, 10956], "458": [11121, 11182], "459": [11196, 11275], "460": [11296, 11409]}, "PrimeCashExchangeRate._updatePrimeCashScalars": {"443": [24923, 25110], "444": [25255, 25328], "445": [26113, 26270], "446": [26299, 26440], "447": [26454, 26509], "448": [26569, 26601], "449": [26612, 26648]}, "PrimeCashExchangeRate.getPrimeCashFactors": {"434": [1875, 1910], "435": [1920, 1959], "436": [1969, 2004], "437": [2014, 2053], "438": [2063, 2118], "439": [2128, 2167], "440": [2177, 2208], "441": [2218, 2245], "442": [2255, 2318]}, "PrimeCashExchangeRate.getPrimeCashHoldingsOracle": {"508": [3767, 3782]}, "PrimeCashExchangeRate.getPrimeCashRateStateful": {"337": [28307, 28450], "338": [28464, 28535], "339": [28566, 28610], "340": [28664, 28916]}, "PrimeCashExchangeRate.getPrimeInterestRates": {"610": [20169, 20317], "611": [20454, 20507], "612": [20903, 20979], "613": [21282, 21353]}, "PrimeCashExchangeRate.updateTotalPrimeDebt": {"356": [12197, 12241], "357": [12688, 12708], "358": [13580, 13601], "359": [13669, 13692], "360": [13703, 13759], "361": [13769, 13829], "362": [13840, 13937], "363": [13947, 13965]}, "PrimeCashExchangeRate.updateTotalfCashDebtOutstanding": {"325": [17930, 17937], "326": [18412, 18438], "327": [18448, 18531], "328": [19310, 19388]}}, "72": {"PrimeRateLib._convertSettledfCash": {"466": [6161, 6239], "467": [6249, 6339], "468": [7092, 7466]}, "PrimeRateLib._getPrimeSettlementRate": {"521": [18157, 18182], "522": [18368, 18449], "523": [18463, 18540]}, "PrimeRateLib._setPrimeSettlementRate": {"524": [18794, 18868], "525": [19245, 19305], "526": [19340, 19384], "527": [19417, 19439], "528": [19473, 19503], "529": [19547, 19575], "530": [19614, 19640], "531": [19680, 19746], "532": [19756, 19814], "533": [19824, 19878], "534": [19888, 19912], "535": [19923, 19971], "536": [19982, 20121]}, "PrimeRateLib._settleTotalfCashDebts": {"614": [20730, 20789], "615": [20799, 20855], "616": [21396, 21544], "617": [22517, 22577], "618": [22607, 22751], "619": [22824, 22858]}, "PrimeRateLib.buildPrimeRateSettlementStateful": {"464": [17477, 17536], "465": [17573, 17634]}, "PrimeRateLib.buildPrimeRateStateful": {"212": [16456, 16538]}, "PrimeRateLib.convertSettledfCash": {"351": [5128, 5273], "352": [5416, 5540]}, "PrimeRateLib.convertToStorageInSettlement": {"236": [9026, 9092], "237": [11449, 11482], "238": [11492, 11525], "239": [11585, 11657], "240": [11688, 11760], "241": [11943, 11985], "242": [12075, 12123], "243": [12371, 12554]}, "PrimeRateLib.convertToStorageValue": {"355": [7663, 8028]}, "PrimeRateLib.convertToUnderlying": {"147": [14794, 14859]}, "PrimeRateLib.convertUnderlyingToDebtStorage": {"626": [15934, 15942], "627": [15952, 15975], "628": [16132, 16214]}}, "73": {}, "74": {"BitmapAssetsHandler.addifCashAsset": {"159": [3979, 3995], "160": [4291, 4336], "161": [4351, 4497], "162": [4619, 4668], "163": [4697, 4747], "164": [4761, 4781], "165": [4933, 4973], "166": [4988, 5233], "167": [5248, 5296], "168": [5310, 5360], "169": [5381, 5396]}, "BitmapAssetsHandler.getAssetsBitmap": {"248": [1250, 1283]}, "BitmapAssetsHandler.getifCashNotional": {"268": [1997, 2049]}, "BitmapAssetsHandler.setAssetsBitmap": {"329": [1429, 1515], "330": [1634, 1675]}}, "75": {"PortfolioHandler._extendNewAssetArray": {"299": [6008, 6039], "300": [5989, 5992], "301": [6060, 6080]}, "PortfolioHandler._loadAssetArray": {"494": [17729, 17768], "495": [18366, 18408], "496": [18422, 18460], "497": [18474, 18514], "498": [18528, 18566], "499": [18580, 18604], "500": [18114, 18117]}, "PortfolioHandler._mergeAssetIntoArray": {"289": [1926, 1934], "290": [2085, 2244], "291": [2490, 2515], "292": [2603, 2676], "293": [2735, 2763], "294": [2777, 2822], "295": [2837, 2848], "296": [1690, 1693], "297": [2869, 2881]}, "PortfolioHandler._sortId": {"609": [16496, 16683]}, "PortfolioHandler._sortInPlace": {"501": [16858, 16885], "502": [17053, 17120], "503": [16923, 16926], "504": [17347, 17390], "505": [17408, 17463], "506": [17481, 17484], "507": [17512, 17515]}, "PortfolioHandler._storeAsset": {"182": [12083, 12160], "183": [12212, 12277], "184": [12326, 12412], "185": [12456, 12535], "186": [12585, 12635], "187": [12645, 12691], "188": [12701, 12748], "189": [12758, 12803]}, "PortfolioHandler._updatePortfolioContext": {"190": [11480, 11511], "191": [11531, 11570], "192": [11581, 11637], "193": [11692, 11825], "194": [11836, 11895]}, "PortfolioHandler.addAsset": {"136": [3683, 3690], "137": [3979, 3986], "138": [4216, 4238], "139": [4317, 4384], "140": [4581, 4654], "141": [5036, 5068], "142": [5078, 5106], "143": [5116, 5146], "144": [5156, 5184], "145": [5194, 5244], "146": [5254, 5291]}, "PortfolioHandler.buildPortfolioState": {"206": [16142, 16154], "207": [16165, 16231], "208": [16241, 16283], "209": [16293, 16346]}, "PortfolioHandler.deleteAsset": {"170": [13143, 13194], "171": [13233, 13278], "172": [13407, 13570], "173": [13609, 13646], "174": [14131, 14160], "175": [14178, 14200], "176": [13943, 13946], "177": [14387, 14440], "178": [14454, 14461], "179": [14777, 14952], "180": [14962, 15013], "181": [15023, 15076]}, "PortfolioHandler.getSortedPortfolio": {"336": [15289, 15359]}, "PortfolioHandler.getSortedPortfolioWithIds": {"432": [15543, 15594], "433": [15604, 15630]}, "PortfolioHandler.storeAssets": {"82": [7743, 7806], "83": [7970, 8000], "84": [7511, 7514], "85": [8867, 8899], "86": [9076, 9311], "87": [8179, 8182], "88": [9846, 9854], "89": [9868, 10027], "90": [10079, 10294], "91": [10309, 10361], "92": [10375, 10398], "93": [9731, 9734], "94": [10566, 10599], "95": [10652, 10695], "96": [10745, 10897]}}, "77": {"SettleBitmapAssets._settlefCashAsset": {"353": [4982, 5117], "354": [5128, 5171]}, "SettleBitmapAssets.settleBitmappedCashGroup": {"223": [2168, 2215], "224": [2297, 2336], "225": [2699, 2727], "226": [3279, 3342], "227": [3381, 3444], "228": [3528, 3569], "229": [3583, 3618], "230": [3899, 3915], "231": [3958, 4003], "232": [4074, 4115], "233": [4129, 4164], "234": [4185, 4252]}}, "79": {"AssetHandler.getDiscountFactor": {"401": [2402, 2472], "402": [2482, 2539], "403": [2549, 2619]}, "AssetHandler.getPresentfCashValue": {"275": [3007, 3015], "276": [3306, 3357], "277": [3550, 3600]}, "AssetHandler.getSettlementDate": {"331": [1325, 1411], "332": [1586, 1607], "333": [1910, 1972]}, "AssetHandler.isLiquidityToken": {"298": [920, 1051]}}, "87": {"ABDKMath64x64.div": {"479": [6721, 6737], "480": [6787, 6839]}, "ABDKMath64x64.exp": {"483": [21379, 21413], "484": [21463, 21471], "485": [21491, 21579]}, "ABDKMath64x64.exp_2": {"541": [14678, 14712], "542": [14762, 14770], "543": [14886, 14946], "544": [14990, 15050], "545": [15094, 15154], "546": [15198, 15258], "547": [15301, 15361], "548": [15404, 15464], "549": [15507, 15567], "550": [15610, 15670], "551": [15712, 15772], "552": [15814, 15874], "553": [15916, 15976], "554": [16018, 16078], "555": [16119, 16179], "556": [16220, 16280], "557": [16321, 16381], "558": [16422, 16482], "559": [16522, 16582], "560": [16622, 16682], "561": [16722, 16782], "562": [16822, 16882], "563": [16921, 16981], "564": [17020, 17080], "565": [17119, 17179], "566": [17218, 17278], "567": [17316, 17376], "568": [17414, 17474], "569": [17512, 17572], "570": [17610, 17670], "571": [17707, 17767], "572": [17804, 17864], "573": [17901, 17961], "574": [17998, 18058], "575": [18094, 18154], "576": [18190, 18250], "577": [18286, 18346], "578": [18382, 18442], "579": [18477, 18537], "580": [18572, 18632], "581": [18667, 18727], "582": [18762, 18822], "583": [18856, 18916], "584": [18950, 19010], "585": [19044, 19104], "586": [19138, 19198], "587": [19231, 19291], "588": [19324, 19384], "589": [19417, 19477], "590": [19510, 19570], "591": [19602, 19662], "592": [19694, 19754], "593": [19786, 19846], "594": [19878, 19938], "595": [19969, 20029], "596": [20060, 20120], "597": [20151, 20211], "598": [20242, 20302], "599": [20332, 20392], "600": [20422, 20482], "601": [20512, 20572], "602": [20602, 20662], "603": [20691, 20751], "604": [20780, 20840], "605": [20869, 20929], "606": [20958, 21018], "607": [21025, 21060], "608": [21066, 21105]}, "ABDKMath64x64.fromUInt": {"477": [1974, 2007], "478": [2013, 2036]}, "ABDKMath64x64.mul": {"486": [4277, 4329]}, "ABDKMath64x64.neg": {"481": [8637, 8661], "482": [8667, 8676]}, "ABDKMath64x64.toInt": {"487": [1651, 1673]}}, "88": {"Bitmap.getMSB": {"377": [2255, 2270], "378": [2367, 2376], "379": [2390, 2400], "380": [2464, 2472], "381": [2486, 2495], "382": [2551, 2559], "383": [2573, 2582], "384": [2634, 2642], "385": [2656, 2665], "386": [2715, 2722], "387": [2736, 2744], "388": [2793, 2800], "389": [2814, 2822], "390": [2870, 2877], "391": [2891, 2899], "392": [2933, 2941]}, "Bitmap.getNextBitNum": {"251": [3361, 3369], "252": [3380, 3420]}, "Bitmap.isBitSet": {"322": [803, 838], "323": [877, 942]}, "Bitmap.setBit": {"279": [430, 465], "280": [530, 576], "281": [607, 654]}, "Bitmap.totalBitsSet": {"424": [1113, 1269], "425": [1279, 1435], "426": [1445, 1532], "427": [1542, 1698], "428": [1708, 1725], "429": [1735, 1752], "430": [1762, 1780], "431": [1790, 1827]}}, "89": {}, "90": {"SafeInt256.abs": {"538": [1737, 1750], "539": [1765, 1773]}, "SafeInt256.add": {"235": [1516, 1553]}, "SafeInt256.div": {"134": [1111, 1150], "135": [1258, 1267]}, "SafeInt256.min": {"302": [3482, 3502]}, "SafeInt256.mul": {"131": [487, 496], "132": [519, 549], "133": [564, 594]}, "SafeInt256.mulInRatePrecision": {"404": [2350, 2397]}, "SafeInt256.neg": {"158": [1632, 1649]}, "SafeInt256.negChange": {"416": [3823, 3831], "417": [4040, 4052], "418": [4271, 4286], "419": [4562, 4584]}, "SafeInt256.sub": {"278": [1390, 1427]}, "SafeInt256.subNoNeg": {"124": [1867, 1880], "125": [1890, 1905]}, "SafeInt256.toInt128": {"324": [3167, 3239]}, "SafeInt256.toInt88": {"335": [2967, 3037]}, "SafeInt256.toUint": {"78": [2478, 2493], "79": [2503, 2520]}}, "91": {"SafeUint256.add": {"56": [473, 488], "57": [498, 506]}, "SafeUint256.div": {"150": [1871, 1885], "151": [1895, 1907]}, "SafeUint256.divInRatePrecision": {"476": [2805, 2861]}, "SafeUint256.divInScalarPrecision": {"514": [3129, 3178]}, "SafeUint256.mul": {"148": [1241, 1249], "149": [1286, 1305]}, "SafeUint256.mulInRatePrecision": {"625": [2966, 3022]}, "SafeUint256.mulInScalarPrecision": {"515": [3285, 3334]}, "SafeUint256.sub": {"249": [861, 876], "250": [886, 898]}, "SafeUint256.toInt": {"461": [4955, 4995]}, "SafeUint256.toUint32": {"516": [3552, 3582]}, "SafeUint256.toUint40": {"244": [3691, 3721]}, "SafeUint256.toUint80": {"420": [4251, 4281]}, "SafeUint256.toUint88": {"472": [4390, 4420]}}}}, "dependencies": ["ABDKMath64x64", "AccountContextHandler", "AggregatorInterface", "AggregatorV2V3Interface", "AggregatorV3Interface", "AssetHandler", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CTokenInterface", "CashGroup", "CompoundHandler", "Constants", "DateTime", "Deployments", "Emitter", "ExternalLending", "FloatingPoint", "GenericToken", "IBeacon", "IEIP20NonStandard", "IERC20", "IPrimeCashHoldingsOracle", "IRewarder", "ITransferEmitter", "IUpgradeableBeacon", "Incentives", "InterestRateCurve", "LibStorage", "Market", "PortfolioHandler", "PrimeCashExchangeRate", "PrimeRateLib", "PrimeSupplyCap", "SafeInt256", "SafeUint256", "SettleBitmapAssets", "TokenHandler", "WETH9", "nTokenCalculations", "nTokenHandler", "nTokenMintAction", "nTokenSupply"], "deployedBytecode": "730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063bb6dd58e14610050578063c4c96dae14610072578063d0e064c014610090575b600080fd5b81801561005c57600080fd5b5061007061006b366004615c27565b6100b0565b005b61007a61011a565b6040516100879190615cd8565b60405180910390f35b81801561009c57600080fd5b506100706100ab366004615c41565b610132565b604051635db6eac760e11b815273__$892f367d396be2b92d3b049e6e62920984$__9063bb6dd58e906100e7908490600401615ecb565b60006040518083038186803b1580156100ff57600080fd5b505af4158015610113573d6000803e3d6000fd5b5050505050565b73__$892f367d396be2b92d3b049e6e62920984$", "deployedSourceMap": "2166:26091:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17647:124;;;;;;;;;;-1:-1:-1;17647:124:22;;;;;:::i;:::-;;:::i;:::-;;28152:103;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;18072:9389;;;;;;;;;;-1:-1:-1;18072:9389:22;;;;;:::i;:::-;;:::i;17647:124::-;17715:49;;-1:-1:-1;;;17715:49:22;;:16;;:37;;:49;;17753:10;;17715:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17647:124;:::o;28152:103::-;28223:25;28152:103;:::o;18072:9389::-;18175:15;18200:29;;:::i;:::-;18239:46;:6;18274:10;18239:34;:46::i;:::-;18374:16;;:31;;;18295:41;;18351:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;18504:16:22;;:31;;;18295:111;;-1:-1:-1;18496:45:22;;;;;;18637:11;18633:97;;;18672:21;;;;:34;:41;:46;18664:55;;;;;;18740:28;18771:162;18816:6;18836:15;18865:9;18888:10;18912:11;18771:31;:162::i;:::-;18740:193;;18944:38;18997:69;19022:10;19034:6;:16;;;:31;;;18997:24;:69::i;:::-;18944:122;;19077:33;;:::i;:::-;19173:18;;19201:7643;19225:16;;:31;;;19221:35;;19201:7643;;;19342:103;19400:31;19425:1;19429;19425:5;19400:24;:31::i;:::-;19342:36;19368:9;19342:25;:36::i;:::-;:40;;:103::i;:::-;19321:18;;;:124;19592:24;;:27;;19460:29;;19508:279;;19549:21;;19592:24;19617:1;;19592:27;;;;;;;;;;;;19679:1;5641::46;19641:39:22;;;19732:9;19763:6;19508:19;:279::i;:::-;19460:327;;20337:11;:160;;;;20459:1;20464;20459:6;:37;;;;;20469:15;:22;20495:1;20469:27;20459:37;20337:313;;;-1:-1:-1;20608:21:22;;;;:34;:41;20603:46;;;20337:313;:491;;;;20783:1;20788;20783:6;:44;;;;;20793:15;20809:1;20793:18;;;;;;;;;;;;;;:29;;;20826:1;20793:34;20783:44;20316:6334;;;21071:18;21092:87;21129:22;21153:10;:22;;;21176:1;21153:25;;;;;;;;;;;;;;21092:36;:87::i;:::-;21071:108;;21221:11;21198:9;:20;;:34;;;;;21273:75;21322:10;:22;;;21345:1;21322:25;;;;;;;;;;;;;;21273:10;:29;;;21303:1;21273:32;;;;;;;;;;;;;;:48;;:75;;;;:::i;:::-;21250:20;;;:98;;;21500:60;;;;-1:-1:-1;;;21500:60:22;;;;;;;:::i;:::-;;;;;;;;;20316:6334;;;;21843:6;21839:2995;;22065:15;22081:1;22065:18;;;;;;;;;;;;;;:29;;;22052:42;;21839:2995;;;22123:1;22128;22123:6;22119:2715;;;22660:148;22709:15;22750:36;22776:9;22750:25;:36::i;:::-;22660:23;:148::i;:::-;22647:161;;22922:10;:29;;;22952:1;22922:32;;;;;;;;;;;;;;:42;;;22909:10;:55;22905:165;;;23005:10;:29;;;23035:1;23005:32;;;;;;;;;;;;;;:42;;;22992:55;;22905:165;22119:2715;;;23877:27;23931:69;23972:27;23997:1;23972:24;:27::i;:::-;23931:36;23957:9;23931:25;:36::i;:69::-;23877:123;;24035:519;24083:19;24400:10;24514:15;24530:1;24514:18;;;;;;;;;;;;;;24035:22;:519::i;:::-;24022:532;;24668:10;:29;;;24698:1;24668:32;;;;;;;;;;;;;;:42;;;24655:10;:55;24651:165;;;24751:10;:29;;;24781:1;24751:32;;;;;;;;;;;;;;:42;;;24738:55;;24651:165;22119:2715;;25148:19;25170:75;25234:10;25170;:29;;;25200:1;25170:32;;;;;;;;;;;;;;:63;;:75;;;;:::i;:::-;25148:97;;25749:41;:10;:29;;;25779:1;25749:32;;;;;;;;;;;;;;:39;:41::i;:::-;25735:11;:55;25731:323;;;25828:41;:10;:29;;;25858:1;25828:32;;;;;;;:41;25814:55;;25904:61;25953:11;25904:10;:29;;;25934:1;25904:32;;;;;;;:61;25891:74;-1:-1:-1;25995:15:22;25987:48;;;;-1:-1:-1;;;25987:48:22;;;;;;;:::i;:::-;26095:73;26132:22;26156:11;26095:36;:73::i;:::-;26072:20;;;:96;;;26402:1;-1:-1:-1;26375:54:22;;;26428:1;26405:20;;;:24;26375:54;-1:-1:-1;26448:20:22;;;:33;;;26596:27;;;:39;;;20316:6334;26754:20;;;;26726:25;;;:48;26788:45;26754:9;26814:10;26826:6;26788:14;:45::i;:::-;-1:-1:-1;19258:3:22;;19201:7643;;;;26958:22;27027:54;27061:6;:19;;;27027:6;:21;;;:33;;:54;;;;:::i;:::-;26881:200;;;;;27091:140;27146:6;:19;;;27179:10;27203:6;:18;;;27091:41;:140::i;:::-;27241:159;27301:6;:19;;;27334:16;27364:6;:26;;;27241:46;:159::i;:::-;27416:38;27442:10;27416:38;;;;;;:::i;:::-;;;;;;;;18072:9389;;;;;;;;;;:::o;13045:248:69:-;13163:50;13194:6;13202:10;13163:30;:50::i;:::-;13242:44;13275:10;13242:32;:44::i;:::-;13223:63;;;-1:-1:-1;13045:248:69:o;11133:1339:22:-;11367:28;11407:27;11449:11;11445:475;;;11512:31;11533:9;11512:20;:31::i;:::-;11476:68;;:26;;;:68;11445:475;;;11575:41;11598:6;11606:9;11575:22;:41::i;:::-;11630:67;11650:10;11630:67;;11662:9;11673:6;11681:15;11630:19;:67::i;:::-;11823:86;11874:6;11882:15;11899:9;11823:50;:86::i;:::-;11800:109;;11445:475;12071:18;;;;:49;;12099:20;12071:27;:49::i;:::-;12175:18;;;:41;;;12047:73;-1:-1:-1;2799:5:22;12358:41;;12350:50;;;;;;12437:28;11133:1339;;;;;;;;:::o;3055:1334::-;3165:27;;:::i;:::-;3208:34;;:::i;:::-;3304:96;3352:10;3304:96;;3376:14;3304:34;:96::i;:::-;3275:25;;;3252:148;;;3253:20;3442:69;;;;3496:14;3442:41;:69::i;:::-;3411:100;;3639:12;:19;3625:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3625:34:22;-1:-1:-1;3604:18:22;;;:55;3674:9;3669:123;3693:12;:19;3689:1;:23;3669:123;;;3757:24;:12;3770:1;3757:15;;;;;;;:24;3733:6;:18;;;3752:1;3733:21;;;;;;;;;;;;;;;;;:48;3714:3;;3669:123;;;;3951:61;4001:10;3951:49;:61::i;:::-;4079:14;4050:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;4022:25:22;;;:72;4160:1;4143:216;4168:14;4163:1;:19;4143:216;;4238:110;4305:10;4333:1;4238:49;:110::i;:::-;4203:6;:25;;;4233:1;4229;:5;4203:32;;;;;;;;;;;;;;;;;:145;4184:3;;4143:216;;;-1:-1:-1;4376:6:22;;-1:-1:-1;;3055:1334:22;;;;;:::o;948:470:64:-;1011:7;1034:5;1043:1;1034:10;1030:40;;;-1:-1:-1;3200:9:46;1046:24:64;;1030:40;1084:5;1093:1;1084:10;1080:44;;;-1:-1:-1;1103:21:64;1096:28;;1080:44;1138:5;1147:1;1138:10;1134:37;;;-1:-1:-1;3248:11:46;1150:21:64;;1134:37;1185:5;1194:1;1185:10;1181:41;;;-1:-1:-1;1204:18:64;1197:25;;1181:41;1236:5;1245:1;1236:10;1232:41;;;-1:-1:-1;1255:18:64;1248:25;;1232:41;1287:5;1296:1;1287:10;1283:42;;;-1:-1:-1;1306:19:64;1299:26;;1283:42;1339:5;1348:1;1339:10;1335:42;;;-1:-1:-1;1358:19:64;1351:26;;1335:42;1388:23;;-1:-1:-1;;;1388:23:64;;;;;;;:::i;948:470::-;;;;:::o;350:193::-;418:7;3200:9:46;445:30:64;;;437:39;;;;;;3200:9:46;506::64;:29;;493:43;;;;350:193;-1:-1:-1;350:193:64:o;369:144:91:-;427:7;458:5;;;481:6;;;;473:15;;;;;;505:1;369:144;-1:-1:-1;;;369:144:91:o;15417:1007:22:-;15650:6;;15791:76;6556:3:46;15791:39:22;:21;15817:12;15791:25;:39::i;:::-;:43;;:76::i;:::-;15877:24;;;:44;;;15931:24;;;:44;;;16108:16;;:27;16149:18;;;;;16064:21;;;;15752:115;;-1:-1:-1;16064:205:22;;:21;16108:27;16181:9;15752:115;16064:30;:205::i;:::-;16352:16;;:26;;;:65;;16399:17;16352:46;:65::i;:::-;16345:72;15417:1007;-1:-1:-1;;;;;;;15417:1007:22:o;16873:448::-;17016:6;4071:3:46;17042:11:22;:47;17034:56;;;;;;17129:11;4071:3:46;17273:39:22;;;17229:40;:22;17129:11;17229:26;:40::i;:::-;:84;;;;;;;16873:448;-1:-1:-1;;;;16873:448:22:o;12518:2178:66:-;12649:26;12831:1;12812:8;:16;;;:20;12804:29;;;;;;4071:3:46;13163:11:66;:48;;13155:57;;;;;;13242:25;;13227:40;;13223:1467;;13436:25;;13395:18;;;;13362:100;;13436:25;13362:52;;:11;;:32;:52::i;:::-;:73;;:100::i;:::-;13341:121;;13223:1467;;;13498:8;:25;;;13483:11;:40;13479:1211;;14077:18;;;;13994:25;;13966;;;;13869:18;;;;13785:311;;14077:18;13785:235;;13966:53;;;;13785:124;;13786:39;;;13869;;;13785:83;:124::i;13479:1211::-;14362:317;14660:8;:18;;;14362:241;14577:8;:25;;;4071:3:46;14541:61:66;14362:122;14465:8;:18;;;14446:8;:16;;;:37;14377:8;:25;;;14363:11;:39;14362:83;;:122;;;;:::i;12746:653:22:-;12889:7;13011:1;12985:15;:22;:27;;12977:36;;;;;;13043:349;13092:15;13108:1;13092:18;;;;;;;;;;;;;;:27;;;13137:15;13153:1;13137:18;;;;;;;;;;;;;;:27;;;13182:15;13198:1;13182:18;;;;;;;;;;;;;;:29;;;13229:15;13245:1;13229:18;;;;;;;;;;;;;;;;;;:29;;;13357:21;13341:37;;13043:31;:349::i;13706:1660::-;13910:19;;;;13958:21;;;;13868:7;;13910:19;3200:9:46;14072:39:22;;14129:28;;;14121:37;;;;;;14351:9;14339:8;:21;14335:1025;;14399:219;14608:9;14399:183;14553:28;;;14399:76;14400:20;;;14447:27;;;14399:47;:76::i;:219::-;14376:242;;;;;;;14335:1025;14809:12;14840:183;14994:28;;;14840:76;14841:20;;;14888:27;;;14840:47;:76::i;:183::-;14809:214;;15322:4;15310:9;:16;:39;;15348:1;15310:39;;;15341:4;15329:9;:16;15310:39;15303:46;;;;;;;;14335:1025;13706:1660;;;;;;;;:::o;14815:2162:66:-;14962:19;15137:1;15118:8;:16;;;:20;15110:29;;;;;;15170:8;:18;;;15154:12;:34;15150:1821;;15359:18;;;;15311:25;;15277:101;;15359:18;15277:60;;:12;;:33;:60::i;15150:1821::-;15415:8;:18;;;15399:12;:34;15395:1576;;15991:25;;15915:18;;;;15894;;;;15783:25;;;;15705:312;;15991:25;15705:229;;15894:39;;;;15705:132;;15706:33;;;15783:53;;;15705:77;:132::i;15395:1576::-;16934:25;;;;16858:18;;;;16839:16;;;;16642:318;;16934:25;16642:235;;16839:37;;;;16642:140;;16643:33;;4071:3:46;16720:61:66;;;16642:77;:140::i;2410:117:90:-;2459:7;2491:1;2486;:6;;2478:15;;;;;;-1:-1:-1;2518:1:90;2410:117::o;27467:597:22:-;27678:22;3200:9:46;27703:42:22;27729:15;27703:25;:42::i;:::-;:62;;-1:-1:-1;27775:64:22;:6;:64;;;27703:62;27775:36;:64::i;:::-;27850:207;27898:6;:19;;;27931:10;27955:6;:15;;;27984:6;:26;;;28024:23;:6;:17;;;:21;:23::i;:::-;27850:34;:207::i;6716:4188:75:-;6839:4;;;;;;;;7451:574;7475:27;;:34;7471:38;;7451:574;;;7530:27;7560:14;:27;;;7588:1;7560:30;;;;;;;;;;;;;;7530:60;;7773:32;7751:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7743:63;;;;;;7903:24;7881:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7931:14:75;;;;:19;7881:69;7877:138;;;7970:30;7982:14;7998:1;7970:11;:30::i;:::-;-1:-1:-1;7511:3:75;;7451:574;;;;8124:9;8119:1217;8143:27;;:34;8139:38;;8119:1217;;;8198:27;8228:14;:27;;;8256:1;8228:30;;;;;;;;;;;;;;8198:60;;8299:24;8277:46;;;;;;;;:5;:18;;;:46;;;;;;;;;8273:1053;;;8410:17;;;;8388:19;8476:25;;8454:65;;;8583:24;8561:5;:18;;;:46;;;;;;;;;8557:361;;;8717:17;;;;;8867:32;8717:5;:17;8867:11;:32::i;:::-;8557:361;;;9131:180;9176:5;9203:7;9232:25;9279:14;9131:23;:180::i;:::-;9076:235;;-1:-1:-1;9076:235:75;-1:-1:-1;9076:235:75;-1:-1:-1;8273:1053:75;-1:-1:-1;8179:3:75;;8119:1217;;;-1:-1:-1;9401:32:75;;;;9372:26;9536:37;:35;:37::i;:::-;-1:-1:-1;;;;;9650:14:75;;9583:64;9650:14;;;;;;;;;;9443:130;;-1:-1:-1;9674:735:75;9698:14;:24;;;:31;9694:1;:35;9674:735;;;9750:27;9780:14;:24;;;9805:1;9780:27;;;;;;;;;;;;;;9750:57;;9825:5;:14;;;9843:1;9825:19;9821:33;;;9846:8;;;9821:33;9915:24;9893:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9981:32:75;9959:5;:18;;;:54;;;;;;;;;;9893:120;9868:159;;;;;;10134:160;10175:5;10198:7;10223:25;10266:14;10134:23;:160::i;:::-;10079:215;;-1:-1:-1;10079:215:75;-1:-1:-1;10079:215:75;-1:-1:-1;10309:52:75;10321:5;10328:12;10341:18;10328:32;;;;;;;;10309:11;:52::i;:::-;10397:1;10375:23;;;;9674:735;;9731:3;;9674:735;;;;10596:2;10574:18;:24;;10566:33;;;;;;10678:16;10660:34;;;10652:43;;;;;;-1:-1:-1;10766:7:75;;10787:25;;-1:-1:-1;10787:25:75;-1:-1:-1;10832:18:75;-1:-1:-1;6716:4188:75;-1:-1:-1;;;;6716:4188:75:o;14523:217:54:-;14670:63;14694:13;14709:10;14721:11;14670:23;:63::i;:::-;14523:217;;;:::o;6455:558:69:-;6683:16;6652:47;;6616:84;;;;;;6744:47;6794:36;:34;:36::i;:::-;-1:-1:-1;;;;;6872:19:69;;;6840:29;6872:19;;;;;;;;-1:-1:-1;6872:19:69;;;;6901:57;;6968:38;;;;-1:-1:-1;;;6968:38:69;-1:-1:-1;;;;6901:57:69;;;;-1:-1:-1;;;6901:57:69;-1:-1:-1;;6901:57:69;;;;;;;6968:38;;;;;;;6455:558::o;11910:1085::-;12066:25;12080:10;12066:25;;:13;:25::i;:::-;-1:-1:-1;;;;;12044:47:69;:19;;;:47;;;12205:27;;;;;;12312:37;;:16;:37::i;:::-;12128:221;;;;;;;;12401:19;12516:62;12558:6;:19;;;12516:41;:62::i;:::-;-1:-1:-1;;12589:26:69;;;:48;;;12647:18;;;:40;;;-1:-1:-1;;;;;;12697:30:69;;:17;;;:30;12812:19;;;;12387:191;;-1:-1:-1;12762:124:69;;12845:16;-1:-1:-1;12762:36:69;:124::i;:::-;12738:21;;;:148;12956:19;;;;12918:70;;12977:10;12918:37;:70::i;:::-;12897:18;;;;:91;;;;-1:-1:-1;;;;;11910:1085:69:o;15734:264:63:-;15819:26;;:::i;:::-;15861;15890:47;15926:10;15890:35;:47::i;:::-;15861:76;;15954:37;15969:10;15981:9;15954:14;:37::i;603:160:64:-;661:7;2982:5:46;688:4:64;:21;;680:30;;;;;;2982:5:46;735:4:64;:20;;6621:2848:22;7493:21;7517:36;7543:9;7517:25;:36::i;:::-;7493:60;;7600:13;7571:6;:26;;;:42;7563:51;;;;;;7881:20;7903:27;7934:47;7963:6;7971:9;7934:28;:47::i;:::-;7880:101;;;;8158:26;8186;8214:21;8251:254;8312:6;:19;;;8349:6;:16;;;:27;;;8394:6;:26;;;8438:9;8465:6;:16;;;:26;;;8251:43;:254::i;:::-;8157:348;;-1:-1:-1;8157:348:22;-1:-1:-1;8157:348:22;-1:-1:-1;8601:45:22;8157:348;8625:20;8601:23;:45::i;:::-;8738:18;;;;8579:67;;-1:-1:-1;8738:37:22;;8761:13;8738:22;:37::i;:::-;8717:18;;;:58;;;9008:19;;;;9041:16;;:27;;8939:26;;;;;:262;;:26;;9008:19;9041:27;9139:19;9172;8939:55;:262::i;:::-;8918:18;;;:283;;;9313:1;-1:-1:-1;9284:31:22;;;;;;9438:24;:13;:22;:24::i;:::-;9409:53;;:26;;;;:53;;;;-1:-1:-1;;;;;;;6621:2848:22:o;9601:1526::-;9804:28;9835:42;:6;:16;;;:40;:42::i;:::-;9804:73;;9975:22;10000:36;10026:9;10000:25;:36::i;:::-;9975:61;-1:-1:-1;10626:1:22;10609:512;10633:21;;;;:34;:41;10629:45;;10609:512;;;10695:415;10760:10;10865:6;:21;;;:34;;;10900:1;10865:37;;;;;;;;;;;;;;:46;;;10929:9;11021:5;11044:20;11082:14;10695:15;10711:1;10695:18;;;;;;;;;;;;;;:47;;:415;;;;;;;;;:::i;:::-;10676:3;;10609:512;;;;9601:1526;;;;;;:::o;17780:3622:32:-;17969:27;18008:20;18031:85;18067:6;:19;;;18088:6;:16;;;:27;;;18031:85;;:35;:85::i;:::-;18391:17;;;;18971:22;;18008:108;;-1:-1:-1;6853:1:46;18391:52:32;4771:16:46;18377:97:32;;18338:24;;18971:27;:74;;19013:32;:9;3200::46;19013:13:32;:32::i;:::-;18971:74;;;19001:9;18971:74;18941:104;;19056:14;19073:28;:12;:26;:28::i;:::-;19056:45;;19111:2197;19118:11;;19111:2197;;19229:16;19248:66;19279:6;:26;;;19307:6;19248:30;:66::i;:::-;19229:85;;19328:18;19349:146;19397:6;:16;;;:31;;;19446:8;19472:9;19349:30;:146::i;:::-;19328:167;;19577:13;19572:1553;;19711:19;;;;19756:16;;:27;19610:15;;19648:191;;;;19809:8;19648:37;:191::i;:::-;19610:229;;19944:1;19933:8;:12;19929:1182;;;20611:16;;20590:18;;20611:67;;20648:8;20658:19;20611:36;:67::i;:::-;20590:88;;20724:10;20705:16;:29;20701:198;;;-1:-1:-1;20775:1:32;20701:198;;;20844:32;:10;20859:16;20844:14;:32::i;:::-;20831:45;;20701:198;20944:148;20994:76;21028:8;21038;21048:9;21059:10;20994:33;:76::i;:::-;20944:20;;:24;:148::i;:::-;20921:171;;19929:1182;;19572:1553;;21212:34;:12;21232:6;21240:5;21212:19;:34::i;:::-;21197:49;;21269:28;:12;:26;:28::i;:::-;21260:37;;19111:2197;;;;;21325:16;;:26;;;:70;;21374:20;21325:48;:70::i;:::-;21318:77;17780:3622;-1:-1:-1;;;;;;;;17780:3622:32:o;1786:176:90:-;1847:8;1871:9;1875:1;1878;1871:3;:9::i;:::-;1867:13;;1903:1;1898;:6;;1890:15;;;;;7107:501:69;7228:29;7259:34;7309:67;7379:36;:34;:36::i;:::-;7425:59;7487:17;;;;;;;;;;7309:106;;-1:-1:-1;7552:49:69;7487:17;7586:14;7552;:49::i;:::-;7514:87;;;;-1:-1:-1;7107:501:69;-1:-1:-1;;;;;7107:501:69:o;10403:567::-;10531:27;10574:67;10644:33;:31;:33::i;:::-;10687:56;10746:17;;;;;;;;;;10574:103;;-1:-1:-1;10917:46:69;10746:17;10948:14;10917;:46::i;:::-;10872:91;10403:567;-1:-1:-1;;;;;;10403:567:69:o;9198:496:66:-;9413:30;9446:42;:40;:42::i;:::-;:54;;;;;;;;;;;;;;;;-1:-1:-1;9545:44:66;:42;:44::i;:::-;:56;;;;;;;;;;;;;;-1:-1:-1;9545:56:66;;;;9630:14;;9611:33;;9685:1;9673:14;;;;9654:16;;:33;9198:496::o;7357:327::-;7483:31;;:::i;:::-;7533:144;7574:10;7598:11;7623:44;:42;:44::i;:::-;7533:27;:144::i;411:190:90:-;491:5;;;-1:-1:-1;;510:7:90;;506:88;;;528:6;;;:20;;;547:1;542;538;:5;;;;;;:10;528:20;519:30;;;;;;506:88;;;573:6;;;:20;;;592:1;587;583;:5;;;;;;:10;573:20;564:30;;;;;1035:239;1091:8;1121:1;-1:-1:-1;;1121:7:90;:27;;;;;-1:-1:-1;;;1132:1:90;:16;1121:27;1119:30;1111:39;;;;;;1266:1;1262;:5;;;;;;;1035:239;-1:-1:-1;;;1035:239:90:o;3228:2070:75:-;3524:27;;3486:186;;3569:10;3597:8;3623:9;3650:8;3486:20;:186::i;:::-;3427:263;;;3683:7;;3427:263;3704:32;;;;:36;3700:296;;3756:11;3770:183;3808:14;:24;;;3850:10;3878:8;3904:9;3931:8;3770:20;:183::i;:::-;3756:197;;3971:6;3967:19;;;3979:7;;;3967:19;3700:296;;4160:40;4190:9;4160:29;:40::i;:::-;4156:152;;;4236:1;4224:8;:13;;4216:22;;;;;;-1:-1:-1;;;;;;4325:27:75;;;;;:58;;-1:-1:-1;;;;;;4356:27:75;;;4325:58;4317:67;;;;;;4534:14;:24;;;:31;4498:14;:32;;;:67;4494:171;;;4608:46;4629:14;:24;;;4608:20;:46::i;:::-;4581:24;;;:73;4494:171;4935:30;4968:14;:24;;;4993:14;:32;;;4968:58;;;;;;;;;;;;;;;;;;;5036:32;;;;;;;5078:17;;:28;;;;5116:18;;;;:30;;;;5156:17;;;:28;-1:-1:-1;5194:21:75;;;;:50;;;;-1:-1:-1;5254:32:75;:37;;5290:1;5254:37;;;3228:2070::o;14554:312:72:-;14674:6;14692:13;14708:76;4251:4:46;14708:37:72;14729:2;:15;;;14708:16;:20;;:37;;;;:::i;:76::-;14692:92;;14820:1;14801:16;:20;:58;;14853:6;14801:58;;;14824:26;14839:6;-1:-1:-1;;14824:14:72;:26::i;:::-;14794:65;14554:312;-1:-1:-1;;;;14554:312:72:o;1152:178:91:-;1210:7;1233:6;1229:20;;-1:-1:-1;1248:1:91;1241:8;;1229:20;1271:5;;;1275:1;1271;:5;:1;1294:5;;;;;:10;1286:19;;;;;1794:120;1852:7;1883:1;1879;:5;1871:14;;;;;;1906:1;1902;:5;;;;;;;1794:120;-1:-1:-1;;;1794:120:91:o;6010:1576:63:-;6215:7;6258:13;6242;:29;6234:38;;;;;;6361:12;6345:13;:28;6337:37;;;;;;6621:9;6609:8;:21;6605:975;;6669:221;6880:9;6669:185;6825:28;;;6669:78;6670:20;;;6717:29;;;6669:47;:78::i;:221::-;6646:244;;;;6605:975;7256:313;7354:197;7522:28;;;7354:82;7355:20;;;7406:29;;;7354:51;:82::i;:197::-;7256:9;;:13;:313::i;7696:796:67:-;7952:100;8055:29;:27;:29::i;:::-;8094:35;8132:17;;;;;;;;;;;8150:15;;;;8132:34;;;;;;;:50;;;;;;;;;;8251:17;;;;8282:21;;;;8317:22;;;;8353:17;;;;8384:24;;;;7952:132;;-1:-1:-1;8132:50:67;;8193:225;;8132:50;;8251:17;8282:21;8317:22;8193:17;:225::i;:::-;8429:56;8448:13;8463:6;:21;;;8429:18;:56::i;1566:90:90:-;1612:8;1639:10;-1:-1:-1;;1647:1:90;1639:3;:10::i;3383:2020:74:-;3566:6;3584:20;3607:36;3623:7;3632:10;3607:36;;:15;:36::i;:::-;3584:59;;3653:99;3755:35;:33;:35::i;:::-;-1:-1:-1;;;;;3834:14:74;;3800:31;3834:14;;;;;;;;;;;:26;;;;;;;;;;:36;;;;;;;;3653:137;;-1:-1:-1;3800:31:74;3913:56;3944:14;3861:8;3913:30;:56::i;:::-;3880:89;;;;3987:7;3979:16;;;;;;4055:29;:12;4077:6;4055:21;:29::i;:::-;4051:741;;;4193:18;;;;;;4168:43;;:22;4248:29;:8;4168:43;4248:12;:29::i;:::-;4225:52;;4312:24;:13;:22;:24::i;:::-;4291:45;;;;;;;-1:-1:-1;;;;;4291:45:74;-1:-1:-1;;;;;;4291:45:74;;;;;;4351:146;4422:7;4431:10;4443:8;4453:15;4470:13;4351:53;:146::i;:::-;4581:18;4577:106;;4634:34;:12;4654:6;4662:5;4634:19;:34::i;:::-;4619:49;;4577:106;4697:50;4713:7;4722:10;4697:50;;4734:12;4697:15;:50::i;:::-;4768:13;-1:-1:-1;4761:20:74;;-1:-1:-1;;;;;;4761:20:74;4051:741;4806:13;;4802:569;;4954:19;:8;:17;:19::i;:::-;4933:40;;;;;;;-1:-1:-1;;;;;4933:40:74;-1:-1:-1;;;;;;4933:40:74;;;;;;4988:245;5059:7;5084:10;5112:8;4933:18;5211:8;4988:53;:245::i;:::-;5263:33;:12;5283:6;5291:4;5263:19;:33::i;:::-;5248:48;;5310:50;5326:7;5335:10;5310:50;;5347:12;5310:15;:50::i;:::-;-1:-1:-1;5388:8:74;;3383:2020;-1:-1:-1;;;;;;;;;3383:2020:74:o;13045:2038:75:-;13159:27;;:34;13151:42;;13143:51;;;;;;13276:1;13241:14;:32;;;:36;13233:45;;;;;;13325:35;13363:14;:27;;;13391:5;13363:34;;;;;;;;;;;;;;13325:72;;13458:24;13428:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13528:32:75;13498:13;:26;;;:62;;;;;;;;;;13428:132;13407:163;;;;;;13609:32;;;:37;;-1:-1:-1;;13609:37:75;;;-1:-1:-1;;;13887:338:75;13907:27;;:34;13903:38;;13887:338;;;13962:23;13988:14;:27;;;14016:1;13988:30;;;;;;;;;;;;;;13962:56;;14052:13;14036:1;:13;;;:29;:75;;;;-1:-1:-1;14087:24:75;14069:1;:14;;;:42;;;;;;;;;;14036:75;14032:183;;;14147:1;:13;;;14131:29;;14199:1;14178:22;;14032:183;-1:-1:-1;13943:3:75;;13887:338;;;;14248:18;14239:5;:27;14235:236;;;-1:-1:-1;;14416:24:75;14387:26;;;;;:53;14454:7;;14235:236;14684:33;14720:14;:27;;;14748:18;14720:47;;;;;;;;;;;;;;;;;;14880:25;;;;;;14919:23;;;;;14777:175;;;;14989:24;14962;;;;:51;15052:24;15023:26;;:53;;;;-1:-1:-1;;;13045:2038:75;;;:::o;11948:862::-;12095:16;;12091:20;;;;;;:68;;-1:-1:-1;12115:16:75;;6326:6:46;12115:44:75;;;;;;12091:68;12083:77;;;;;;12224:5;:14;;;12220:1;:18;:56;;;;-1:-1:-1;12242:14:75;;;;12260:16;-1:-1:-1;12242:34:75;12220:56;12212:65;;;;;;12338:5;:15;;;12334:1;:19;:77;;;;-1:-1:-1;12357:15:75;;;;5700:1:46;-1:-1:-1;12357:54:75;12334:77;12326:86;;;;;;12483:14;;;;-1:-1:-1;;;;;;12464:33:75;;;;:70;;-1:-1:-1;12501:14:75;;;;-1:-1:-1;;;;;;12501:33:75;12464:70;12456:79;;;;;;12618:16;;12585:50;;12676:14;;;;12732:15;;;;12788:14;;;;;12758:45;;-1:-1:-1;;;;;12758:45:75;-1:-1:-1;;;12758:45:75;-1:-1:-1;;12701:47:75;;;;-1:-1:-1;;;12701:47:75;-1:-1:-1;;12645:46:75;;;;;;-1:-1:-1;;12585:50:75;;;;-1:-1:-1;;12585:50:75;;;;;;;12645:46;;;;;;;;12701:47;;;;;12758:45;;;;;;;;;;11948:862::o;10985:917::-;11217:4;11235:7;11256;11288:22;11313:25;:5;:23;:25::i;:::-;11288:50;-1:-1:-1;11410:19:75;;;:54;;;11450:14;11433;:31;11410:54;11406:116;;;11497:14;11480:31;;11406:116;11541:7;:29;;;;11569:1;11552:5;:14;;;:18;11541:29;11531:39;-1:-1:-1;11589:47:75;;;;11581:56;;;;;;-1:-1:-1;;11799:16:75;;11844:7;;11821:3;11783:41;;;;-1:-1:-1;;;;;;11783:41:75;11763:2;11734:31;;;;11733:92;;;;;-1:-1:-1;11880:14:75;11844:7;-1:-1:-1;10985:917:75:o;6875:263:48:-;6942:77;7035:12;7050:41;7066:24;7050:15;:41::i;17410:420:54:-;17547:1;17529:14;:19;;17521:28;;;;;;17583:68;17654:30;:28;:30::i;:::-;-1:-1:-1;;;;;17734:14:54;;17694:37;17734:14;;;;;;;;;;;:26;;;;;;;;;;17583:101;;-1:-1:-1;17799:24:54;:14;:22;:24::i;:::-;17770:53;;;;;;;-1:-1:-1;;;;;17770:53:54;-1:-1:-1;;;17770:53:54;-1:-1:-1;;;;;17770:53:54;;;;;;-1:-1:-1;;;;17410:420:54:o;3008:232:48:-;3074:47;3138:12;3153:40;3169:23;3153:15;:40::i;1900:219:69:-;1966:20;1998:41;2042:36;:34;:36::i;:::-;2095:17;;;;;;-1:-1:-1;;2095:17:69;;;;-1:-1:-1;;;;;2095:17:69;;1900:219::o;1087:737::-;1195:17;1226:35;1275:27;1316:22;1352:17;1394:47;1444:36;:34;:36::i;:::-;-1:-1:-1;;;;;1522:19:69;;;1490:29;1522:19;;;;;;;;-1:-1:-1;;1522:19:69;;;;1565:18;;;;;1623:35;;;;;;;-1:-1:-1;;;;1690:27:69;;;;-1:-1:-1;1746:24:69;-1:-1:-1;;;1746:24:69;;;;-1:-1:-1;;;;1793:24:69;;;;;;-1:-1:-1;1087:737:69:o;730:829:70:-;850:19;883:32;929:27;981:58;1042:40;:38;:40::i;:::-;-1:-1:-1;;;;;1141:19:70;;;;1092:46;1141:19;;;;;;;;-1:-1:-1;;1141:19:70;;;;1184:25;;;;;-1:-1:-1;;;1449:38:70;;-1:-1:-1;;;;;1449:38:70;;-1:-1:-1;;;;1519:33:70;;;;;;-1:-1:-1;730:829:70:o;15899:477:75:-;16045:21;;:::i;:::-;16078:27;;:::i;:::-;16119:21;;;16115:39;;16149:5;-1:-1:-1;16142:12:75;;16115:39;16186:45;16205:7;16214:16;16186:18;:45::i;:::-;16165:66;;16241:42;;;:23;;;:42;16332:13;16311:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;16293:15:75;;;:53;:15;15899:477;-1:-1:-1;;;;15899:477:75:o;16666:483:54:-;16779:18;16809:68;16880:30;:28;:30::i;:::-;-1:-1:-1;;;;;16960:14:54;;16920:37;16960:14;;;;;;;;;;;:26;;;;;;;;;;17010;;-1:-1:-1;;;17010:26:54;;;;;;16996:40;;;-1:-1:-1;16809:101:54;;-1:-1:-1;17125:16:54;;;17117:25;;;;;;16666:483;;;;;;:::o;16345:200:72:-;16428:16;;:::i;:::-;16463:75;16510:10;16522:15;16463:46;:75::i;14775:487:63:-;14877:26;;:::i;:::-;14920:12;14935:37;14961:10;14935:37;;:25;:37::i;:::-;15066:189;;;;;;;;;;;;;;;15013:22;;;15066:189;;;;;;;;;;-1:-1:-1;;15066:189:63;;;;;14775:487::o;4395:2220:22:-;4523:20;4545:27;4584:30;;:::i;:::-;4663:21;;;;:34;4624:36;4797:1812;4817:12;:19;4813:1;:23;4797:1812;;;4857:27;4887:12;4900:1;4887:15;;;;;;;;;;;;;;4857:45;;4968:46;4998:5;:15;;;4968:29;:46::i;:::-;4960:55;;;;;;5047:18;5068:37;5099:5;5068:30;:37::i;:::-;5047:58;;5205:9;5191:10;:23;;5183:32;;;;;;5233:81;5261:6;5269:5;:16;;;5233:81;;5287:5;:14;;;5303:10;5233:27;:81::i;:::-;4797:1812;5343:12;5387:16;5442:38;5465:5;:14;;;5442:6;:22;;:38;;;;:::i;:::-;5421:59;-1:-1:-1;5421:59:22;-1:-1:-1;5514:28:22;:13;5421:59;5514:17;:28::i;:::-;5498:44;;4797:1812;5877:9;5859:5;:14;;;:27;5855:693;;6080:19;;;;6101:16;;6119:14;;;;6012:16;;:26;;;5986:23;;6012:157;;:26;;6080:19;;6101:16;6135:5;6142:9;6012:46;:157::i;:::-;5986:183;-1:-1:-1;6210:42:22;:20;5986:183;6210:24;:42::i;:::-;6187:65;;5855:693;;;;6291:242;6347:6;:19;;;6388:5;:16;;;6426:5;:14;;;6462:6;:26;;;6510:5;6291:34;:242::i;:::-;;5855:693;6562:21;;;;:36;;6596:1;6562:33;:36::i;:::-;-1:-1:-1;;4838:3:22;;4797:1812;;;;4395:2220;;;;;;;:::o;1458:2801:77:-;1669:26;1697;1725:21;1758:14;1775:56;1811:7;1820:10;1775:56;;:35;:56::i;:::-;1758:73;;2184:31;2205:9;2184:20;:31::i;:::-;2168:47;;2322:13;2305;:30;;2297:39;;;;;;2565:21;2605:60;2636:13;2651;2605:30;:60::i;:::-;-1:-1:-1;2564:101:77;-1:-1:-1;2679:18:77;2675:52;;2707:1;2710;2699:28;;;;;;;;2675:52;2796:18;2817:22;:6;:20;:22::i;:::-;2796:43;;2849:780;2856:15;;;;;:46;;;2889:13;2875:10;:27;;2856:46;2849:780;;;2918:16;2937:57;2968:13;2983:10;2937:30;:57::i;:::-;2918:76;;3008:23;3034:77;3052:7;3061:10;3073:8;3083:9;3094:16;3034:17;:77::i;:::-;3008:103;;3258:1;3239:16;:20;3235:224;;;3301:41;:19;3325:16;3301:23;:41::i;:::-;3279:63;;3235:224;;;3403:41;:19;3427:16;3403:23;:41::i;:::-;3381:63;;3235:224;3537:32;:6;3551:10;3563:5;3537:13;:32::i;:::-;3528:41;;3596:22;:6;:20;:22::i;:::-;3583:35;;2849:780;;;;;3639:17;3666:509;3673:15;;3666:509;;3704:16;3723:57;3754:13;3769:10;3723:30;:57::i;:::-;3704:76;;3795:17;3814:12;3830:55;3861:13;3876:8;3830:30;:55::i;:::-;3794:91;;;;3907:7;3899:16;;;;;;3970:33;:9;3987;3998:4;3970:16;:33::i;:::-;3958:45;-1:-1:-1;4083:32:77;:6;4097:10;4109:5;4083:13;:32::i;:::-;4074:41;;4142:22;:6;:20;:22::i;:::-;4129:35;;3666:509;;;;;;4185:67;4221:7;4230:10;4185:67;;4242:9;4185:35;:67::i;:::-;1458:2801;;;;;;;;;;;;;;:::o;1440:120:90:-;1529:5;;;1524:16;;;;1496:8;1545:6;;;1524:28;1516:37;;;;;8520:4051:72;8777:27;;8941:75;8996:19;8941:50;:25;8971:19;8941:29;:50::i;:::-;:54;;:75::i;:::-;8915:101;;9049:43;9071:2;9075:16;9049:21;:43::i;:::-;9026:66;;11462:19;11457:1;:24;;11449:33;;;;;;11523:1;11500:19;:24;;11492:33;;;;;;11544:25;11540:1;:29;11536:235;;;11607:50;:25;11637:19;11607:29;:50::i;:::-;11585:72;;11536:235;;;11710:50;:25;11740:19;11710:29;:50::i;:::-;11688:72;;11536:235;11781:27;11850:19;11822:25;:19;:23;:25::i;:::-;:47;11818:316;;;-1:-1:-1;11966:19:72;11818:316;;;12098:25;:19;:23;:25::i;:::-;12075:48;;11818:316;12251:1;12228:20;:24;12224:341;;;12342:13;;;;12321:15;;12268:25;;12296:60;;:41;;:20;;:24;:41::i;:60::-;12268:88;;12371:183;12431:7;12456:10;12484:18;12520:20;12371:42;:183::i;:::-;12224:341;;8520:4051;;;;;;;;;;:::o;3621:133:91:-;3673:6;3704:16;3699:21;;;3691:30;;;;;4759:311:63;4994:14;;;2847:3:46;1642:1:63;4994:41;;;;4972:66;;:91;;4759:311::o;10850:612:67:-;11138:80;11157:6;11165:10;11177:8;11187:14;11203;11138:18;:80::i;:::-;11249:206;11297:6;:24;;;11335:6;:22;;;11371:6;:17;;;11402:20;11436:9;11249:34;:206::i;:::-;11229:17;;;;:226;;;;-1:-1:-1;;;;;;10850:612:67:o;1024:266:74:-;1109:20;1141:61;1205:35;:33;:35::i;:::-;-1:-1:-1;;;;;1257:14:74;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;1024:266:74;;;;:::o;784:121:91:-;842:7;874:1;869;:6;;861:15;;;;;;-1:-1:-1;893:5:91;;;784:121::o;3194:233:88:-;3256:14;3345;3341:28;;-1:-1:-1;3368:1:88;3361:8;;3341:28;3393:23;3408:6;3393;:23::i;:::-;3387:3;:29;3419:1;3387:33;3380:40;;3194:233;;;:::o;6826:1476:64:-;6939:7;6970:11;6962:20;;;;;;7063:3;7053:6;:13;;7045:22;;;;;;7131:21;7155:22;7167:9;7155:11;:22::i;:::-;7131:46;;7187:16;3840:2:46;7218:6:64;:35;7214:1082;;-1:-1:-1;2982:5:46;7292:22:64;;7276:38;;-1:-1:-1;7269:45:64;;7214:1082;3893:3:46;7335:6:64;:36;7331:965;;-1:-1:-1;;;7642:34:64;;3103:7:46;7641:53:64;;;7578:30;;;7414:195;;;7630:64;7446:40;7630:64;;-1:-1:-1;7623:71:64;;7331:965;3949:3:46;7715:6:64;:38;7711:585;;-1:-1:-1;;;7954:35:64;;3150:8:46;7953:55:64;;;7889:31;;;7796:125;;;7942:66;7828:41;7942:66;;-1:-1:-1;7935:73:64;;7711:585;-1:-1:-1;;;8227:37:64;;3200:9:46;8226:59:64;;;8160:33;;;8066:128;;;8215:70;8098:42;8215:70;;-1:-1:-1;8208:77:64;;1516:609;1661:4;1702:1;1685:14;:18;1677:52;;;;-1:-1:-1;;;1677:52:64;;;;;;;:::i;:::-;2606:1:46;1747:14:64;:51;;1739:86;;;;-1:-1:-1;;;1739:86:64;;;;;;;:::i;:::-;3200:9:46;1840:8:64;:28;:33;1836:51;;-1:-1:-1;1882:5:64;1875:12;;1836:51;1897:12;1912:36;1938:9;1912:25;:36::i;:::-;1897:51;-1:-1:-1;1976:1:64;1959:137;1984:14;1979:1;:19;1959:137;;2035:37;2044:27;2069:1;2044:24;:27::i;:::-;2035:4;;:8;:37::i;:::-;2023:8;:49;2019:66;;;2081:4;2074:11;;;;;;2019:66;2000:3;;1959:137;;;-1:-1:-1;2113:5:64;;1516:609;-1:-1:-1;;;;;1516:609:64:o;1688:368:74:-;1823:15;1850:99;1952:35;:33;:35::i;:::-;-1:-1:-1;;;;;2004:14:74;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;1997:52;;;-1:-1:-1;;1688:368:74;;;;;:::o;8808:1744:63:-;8965:18;8996:19;9017:18;9051:70;9075:9;:24;;;9101:8;9111:9;9051:23;:70::i;:::-;8995:126;;;;9131:18;9152:34;9176:9;9152:23;:34::i;:::-;9131:55;;9202:13;9197:1349;;9265:20;;9244:75;;;;9287:8;9297:10;9309:9;9244:20;:75::i;:::-;9231:88;;9197:1349;;;9350:21;9374:36;9400:9;9374:25;:36::i;:::-;9350:60;;9525:20;9548:56;9566:37;9591:11;9566:24;:37::i;9548:56::-;9525:79;;9618:16;9653:79;9674:9;:20;;;9653:79;;9696:12;9710:10;9722:9;9653:20;:79::i;:::-;9618:114;;9747:17;9778:21;9817:11;9832:1;9817:16;9813:614;;;-1:-1:-1;;9993:19:63;;;;;:36;;9954:9;9813:614;;;10143:60;10161:41;10200:1;10186:11;:15;10161:24;:41::i;:::-;10143:13;;:17;:60::i;:::-;10127:76;;10234:178;10276:9;:20;;;10234:178;;10318:13;10353:10;10385:9;10234:20;:178::i;:::-;10222:190;;9813:614;10454:81;10476:13;10491:12;10505:9;10516:8;10526;10454:21;:81::i;:::-;10441:94;8808:1744;-1:-1:-1;;;;;;;;;;;;8808:1744:63:o;2805:802:79:-;2970:6;2992:13;2988:27;;-1:-1:-1;3014:1:79;3007:8;;2988:27;3168:22;3193:23;:8;3206:9;3193:12;:23::i;:::-;3168:48;;3226:21;3250:45;3268:14;3284:10;3250:17;:45::i;:::-;3226:69;;4071:3:46;3314:14:79;:42;;3306:51;;;;;;3418:9;3430:43;:8;3458:14;3430:27;:43::i;:::-;3418:55;;3568:1;3557:8;:12;:43;;3598:2;3557:43;;;3573:22;3588:2;-1:-1:-1;;3573:14:79;:22::i;1280:154:90:-;1403:5;;;1398:16;;;;1336:8;1419:6;;;1398:28;1390:37;;;;;299:372:88;411:7;447:1;438:5;:10;;:26;;;;;461:3;452:5;:12;;438:26;430:35;;;;;;509:5;505:160;;;-1:-1:-1;;;;;;565:9:88;;547:28;537:39;;530:46;;505:160;-1:-1:-1;;;;;;643:9:88;;625:28;623:31;614:40;;607:47;;14980:317:72;15198:15;;15103:6;;;;15137:77;;:56;:17;4251:4:46;15137:21:72;:56::i;3732:251:48:-;3798:67;3881:12;3896:40;3912:23;3896:15;:40::i;10976:545:69:-;11116:15;11133;11160:13;11187:22;11225:14;11212:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11212:28:69;;11187:53;;11250:22;11288:14;11275:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11275:28:69;;11250:53;;11318:9;11313:168;11333:14;11329:1;:18;11313:168;;;11380:4;11385:5;11380:11;;;;;;;;;;;;;;;;;;;;;;;;;;;11368:23;;:6;11375:1;11368:9;;;;;;;;;;;;;;;;;:23;11405:7;;;;;11438:4;11405:7;11438:11;;;;;;;;;;;;;;;;;;;;;;;;;;;11426:23;;:6;11433:1;11426:9;;;;;;;;;;;;;;;;;:23;11463:7;;;;;11349:3;11313:168;;;-1:-1:-1;11499:6:69;;-1:-1:-1;11507:6:69;-1:-1:-1;;10976:545:69;;;;;;:::o;4120:255:48:-;4183:67;4266:12;4281:47;4297:30;4281:15;:47::i;12192:249::-;12265:44;12326:12;12341:53;12357:36;12341:15;:53::i;11787:253::-;11862:44;11923:12;11938:55;11954:38;11938:15;:55::i;2511:396:66:-;2686:31;;:::i;:::-;2729:12;2744:34;2766:11;2744:21;:34::i;:::-;2803:17;;;2788:12;2803:17;;;;;;;;;;2729:49;;-1:-1:-1;2788:12:66;2835:1;2821:15;;:23;;2843:1;2821:23;;;2839:1;2821:23;2803:42;;;;;;;;;;;2788:57;;2862:38;2887:6;2895:4;2862:24;:38::i;1424:1464:75:-;1631:4;;1647:1212;1671:10;:17;1667:1;:21;1647:1212;;;1709:27;1739:10;1750:1;1739:13;;;;;;;;;;;;;;1709:43;;1806:9;1787:5;:15;;;:28;;:78;;;;1855:10;1835:30;;:5;:16;;;:30;;;;1787:78;:124;;;;1903:8;1885:5;:14;;;:26;;1787:124;1766:168;;;1926:8;;;1766:168;2132:24;2110:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;2198:32:75;2176:5;:18;;;:54;;;;;;;;;;2110:120;2085:159;;;;;;2322:14;;;;2301:18;;2322:28;;2341:8;2322:18;:28::i;:::-;2301:49;;2430:40;2460:9;2430:29;:40::i;:::-;2426:163;;;2513:1;2498:11;:16;;2490:25;;;;;;-1:-1:-1;;;;;;2611:30:75;;;;;:64;;-1:-1:-1;;;;;;2645:30:75;;;2611:64;2603:73;;;;;;2735:14;;;:28;2798:24;2777:18;;;;:45;;;2798:24;-1:-1:-1;2837:11:75;;-1:-1:-1;2837:11:75;1647:1212;1690:3;;1647:1212;;;-1:-1:-1;2876:5:75;;1424:1464;-1:-1:-1;;;;;;1424:1464:75:o;836:222:79:-;904:4;5641:1:46;939:48:79;;;;;:112;;-1:-1:-1;;5700:1:46;-1:-1:-1;1003:48:79;;836:222::o;5439:648:75:-;5550:23;5788:17;5808:9;:16;5828:1;5808:21;:48;;5836:9;:16;5855:1;5836:20;5808:48;;;5832:1;5808:48;5788:68;;5866:37;5927:9;5906:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5866:71;;5952:9;5947:103;5971:9;:16;5967:1;:20;5947:103;;;6027:9;6037:1;6027:12;;;;;;;;;;;;;;6008:13;6022:1;6008:16;;;;;;;;;;;;;;;;;:31;5989:3;;5947:103;;;-1:-1:-1;6067:13:75;5439:648;-1:-1:-1;;;5439:648:75:o;3408:101:90:-;3464:6;3493:1;3489;:5;:13;;3501:1;3489:13;;;-1:-1:-1;3497:1:90;;3408:101;-1:-1:-1;3408:101:90:o;5837:257:48:-;5896:87;5999:12;6014:33;6030:16;6014:15;:33::i;8816:1123:67:-;9088:1;9074:10;:15;;:49;;;;-1:-1:-1;;;;;;9093:30:67;;;9074:49;9066:58;;;;;;9196:1;9178:14;:19;;:57;;;;-1:-1:-1;;;;;;9201:34:67;;;9178:57;9170:66;;;;;;9298:15;9294:1;:19;:58;;;;-1:-1:-1;9336:16:67;9317:35;;;9294:58;9286:67;;;;;;9416:10;9412:1;:14;:48;;;;-1:-1:-1;9444:16:67;9430:30;;;9412:48;9404:57;;;;;;9562:16;9541:37;;;9507:72;;;;;;9635:45;;-1:-1:-1;;;;;;9635:45:67;-1:-1:-1;;;;;9635:45:67;;;;-1:-1:-1;;;;9690:53:67;-1:-1:-1;;;9690:53:67;;;;;;;;;;;;-1:-1:-1;;;;9753:55:67;-1:-1:-1;;;9753:55:67;;;;;;-1:-1:-1;;;;9818:45:67;-1:-1:-1;;;9818:45:67;;;;;;;;;;;-1:-1:-1;;;;;9873:59:67;-1:-1:-1;;;9873:59:67;;;;;;;;8816:1123::o;8498:312::-;8653:1;8635:14;:19;;:57;;;;-1:-1:-1;;;;;;8658:34:67;;;8635:57;8627:66;;;;;;8750:28;;;;;:53;;-1:-1:-1;;;;;;8750:53:67;-1:-1:-1;;;;;8750:53:67;;;;;;;;;8498:312::o;6520:269:48:-;6585:87;6688:12;6703:39;6719:22;6703:15;:39::i;3973:2699:64:-;4088:7;4097:4;4117:21;4141:22;4153:9;4141:11;:22::i;:::-;4117:46;-1:-1:-1;2982:5:46;4231:8:64;:24;:29;4227:52;;4270:1;4273:5;4262:17;;;;;;;4227:52;4352:8;4335:13;:25;4331:48;;4370:1;4373:5;4362:17;;;;;;;4331:48;2982:5:46;4504:24:64;;;4503:42;3567:2:46;4628:38:64;;4624:1887;;4690:10;-1:-1:-1;4702:4:64;;-1:-1:-1;4682:25:64;;-1:-1:-1;4682:25:64;4624:1887;3619:3:46;4728:10:64;:39;4724:1787;;5040:20;2982:5:46;3103:7;5160:30:64;;5159:68;5079:148;;-1:-1:-1;;5079:148:64;;-1:-1:-1;3359:1:46;5079:148:64;5476:37;3840:2:46;5448:65:64;3359:1:46;5532:12:64;:37;;;;;;5574:1;5531:44;5254:335;;;;;;;;;4724:1787;3673:4:46;5610:10:64;:40;5606:905;;5666:20;2982:5:46;3150:8;5787:31:64;;5786:69;5705:150;;-1:-1:-1;;5705:150:64;;-1:-1:-1;3408:2:46;5705:150:64;5924:38;3893:3:46;5895:67:64;3408:2:46;5981:12:64;:38;;;;5606:905;3730:4:46;6060:10:64;:42;6056:455;;6118:20;2982:5:46;3200:9;6240:33:64;;6239:71;6157:153;;-1:-1:-1;;6157:153:64;;-1:-1:-1;3460:2:46;6157:153:64;6381:40;3949:3:46;6350:71:64;3460:2:46;6440:12:64;:40;;;;6056:455;-1:-1:-1;6654:3:64;;6659:5;;-1:-1:-1;3973:2699:64;-1:-1:-1;;;;3973:2699:64:o;715:234:88:-;787:4;820:1;811:5;:10;;:26;;;;;834:3;825:5;:12;;811:26;803:35;;;;;;-1:-1:-1;;;897:9:88;886:21;-1:-1:-1;;;885:39:88;;;884:58;;715:234::o;3098:197:90:-;3149:6;-1:-1:-1;;;;;;3176:29:90;-1:-1:-1;3176:29:90;;;:62;;-1:-1:-1;;;;;;3209:29:90;;;3176:62;3167:72;;;;;17615:1780:71;17827:20;17850:46;:18;17879:16;17850:28;:46::i;:::-;17827:69;-1:-1:-1;17910:18:71;17906:31;;17930:7;;;17906:31;17947:75;18025:41;:39;:41::i;:::-;18146:17;;;18119:16;18146:17;;;;;;;;;;;:27;;;;;;;;:42;17947:119;;-1:-1:-1;;;;;;18146:42:71;;;18138:51;;;18374:28;18138:51;18388:13;18374;:28::i;:::-;18352:50;;18436:1;18420:12;:17;;18412:26;;;;;;18493:38;:27;:18;:12;:16;:18::i;:::-;:25;:27::i;:::-;:36;:38::i;:::-;18448:17;;;;;;;;;;;;;;;:27;;;;;;;;:83;;-1:-1:-1;;;;;;18448:83:71;-1:-1:-1;;;;;18448:83:71;;;;;;;;;;19310:78;19343:7;18448:17;:27;19374:13;19310:32;:78::i;:::-;17615:1780;;;;;;;;;:::o;1296:386:74:-;2798:2:46;1437:27:74;:12;:25;:27::i;:::-;:58;;1429:86;;;;-1:-1:-1;;;1429:86:74;;;;;;;:::i;:::-;1525:61;1589:35;:33;:35::i;:::-;-1:-1:-1;;;;;1634:14:74;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1634:26:74;;:41;1296:386::o;1227:752:79:-;1306:7;1351:1;1333:5;:15;;;:19;:77;;;;-1:-1:-1;1356:15:79;;;;5700:1:46;-1:-1:-1;1356:54:79;1333:77;1325:86;;;;;;1530:15;;;;5641:1:46;-1:-1:-1;1526:81:79;;-1:-1:-1;1593:14:79;;;;1586:21;;1526:81;1618:20;1641:45;1684:1;1666:5;:15;;;:19;1641:24;:45::i;:::-;1917:14;;;;1618:68;;-1:-1:-1;1917:55:79;;3200:9:46;;1917:32:79;;1618:68;1917:18;:32::i;15738:329:48:-;15830:12;490:7;16030:9;16022:18;;;;;;;;:38;;15738:329;-1:-1:-1;;15738:329:48:o;4471:240::-;4531:68;4615:12;4630:34;4646:17;4630:15;:34::i;2900:192:90:-;2950:5;-1:-1:-1;;;;;;2976:28:90;-1:-1:-1;2976:28:90;;;:60;;-1:-1:-1;;;;;;3008:28:90;;;2967:70;;;;;3301:225:48;3367:41;3424:12;3439:40;3455:23;3439:15;:40::i;7500:250::-;7570:58;7644:12;7659:44;7675:27;7659:15;:44::i;15147:219:75:-;15247:30;15307:52;15333:7;15342:16;15307:25;:52::i;27850:1073:71:-;27962:21;;:::i;:::-;27995:31;28029;28049:10;28029:19;:31::i;:::-;27995:65;;28155:9;28130:7;:22;;;:34;28126:528;;;28180:28;28222:30;28255:38;28282:10;28255:26;:38::i;:::-;28222:71;;28341:109;28382:10;28394:7;28403:22;28427:9;28341:23;:109::i;:::-;28307:143;;-1:-1:-1;28307:143:71;-1:-1:-1;28464:71:71;28493:10;28307:143;;28464:28;:71::i;:::-;28126:528;;;;;28574:22;;:35;;28566:44;;;;;;28671:245;;;;;;;;28709:58;:50;28734:7;:24;;;28709:7;:20;;;:24;;:50;;;;:::i;:::-;:56;:58::i;:::-;28671:245;;;;28793:56;:48;28816:7;:24;;;28793:7;:18;;;:22;;:48;;;;:::i;:56::-;28671:245;;;;28881:7;:24;;;28671:245;;;28664:252;;27850:1073;;;;;:::o;10558:218:63:-;10635:12;10659:41;10703:32;:30;:32::i;:::-;10752:17;;;;;;-1:-1:-1;;10752:17:63;;;;;10558:218::o;11468:263:67:-;11654:70;11673:6;11681:10;11693:8;11703:4;11709:14;11654:18;:70::i;:::-;11468:263;;;;:::o;2017:716::-;2131:16;;2181:19;2177:38;;-1:-1:-1;2210:1:67;;-1:-1:-1;2210:1:67;2202:13;;2177:38;2250:1;2233:14;:18;2225:27;;;;;;2309:68;2355:6;:21;;;2309:41;2335:14;2309:6;:21;;;:25;;:41;;;;:::i;:68::-;2297:80;;2395:64;2437:6;:21;;;2395:37;2417:14;2395:6;:17;;;:21;;:37;;;;:::i;:64::-;2494:21;;;;2387:72;;-1:-1:-1;2494:46:67;;2525:14;2494:30;:46::i;:::-;2470:21;;;:70;2570:17;;;;:33;;2597:5;2570:26;:33::i;:::-;2550:17;;;:53;2637:21;;;;:41;;2668:9;2637:30;:41::i;:::-;2613:21;;;:65;2689:37;2613:6;2689:29;:37::i;4704:853:72:-;4934:29;4975:33;5011:65;5044:10;5056:8;5066:9;5011:32;:65::i;:::-;4975:101;;5087:31;5181:92;5215:16;5233;5251:12;5181:20;:92::i;:::-;5128:145;;-1:-1:-1;5128:145:72;-1:-1:-1;;;;;;5379:21:72;;;5375:176;;5416:124;5457:7;5466:10;5478:8;5488:12;5502:24;5416:23;:124::i;4397:781:77:-;4595:29;4636:99;4738:35;:33;:35::i;:::-;-1:-1:-1;;;;;4801:14:77;;4783:15;4801:14;;;;;;;;;;;:26;;;;;;;;;;:36;;;;;;;;:45;4636:137;;-1:-1:-1;4801:45:77;;;;4783:63;;5007:110;:16;4807:7;4816:10;4828:8;4783:63;5098:9;5007:36;:110::i;:::-;-1:-1:-1;;;;;5135:14:77;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:36;;;;;;;-1:-1:-1;;;5135:36:77;;;5128:43;;-1:-1:-1;;;;;;5128:43:77;;;-1:-1:-1;4982:135:77;4397:781::o;7489:546:72:-;7624:27;7719:1;7686:29;:34;;:342;;7952:76;8026:1;7952:69;8007:2;:13;;;7952:50;7986:2;:15;;;7952:29;:33;;:50;;;;:::i;:69::-;:73;;:76::i;:::-;7686:342;;;-1:-1:-1;7735:29:72;7663:365;-1:-1:-1;7489:546:72:o;11857:2115:71:-;12036:33;12072:32;:30;:32::i;:::-;:44;;;;;;;;;;;;;;;12205:16;;12072:44;;-1:-1:-1;12205:16:71;;12225:15;12205:35;12197:44;;;;;;12696:11;;-1:-1:-1;;;12696:11:71;;;;12688:20;;;;;;12761:16;;;;12719:24;;12746:70;;-1:-1:-1;;;;;12761:16:71;12797:18;12746:50;:70::i;:::-;13286:18;;12719:97;;-1:-1:-1;13242:26:71;;13271:74;;-1:-1:-1;;;13286:18:71;;-1:-1:-1;;;;;13286:18:71;13324:20;13271:52;:74::i;:::-;13242:103;;13536:17;-1:-1:-1;;13530:23:71;:48;;;;;13577:1;13557:17;:21;13530:48;13526:75;;;13600:1;13580:21;;13526:75;13621:19;-1:-1:-1;;13615:25:71;:52;;;;;13666:1;13644:19;:23;13615:52;13611:81;;;-1:-1:-1;13691:1:71;13611:81;13722:37;:26;:17;:24;:26::i;:::-;:35;:37::i;:::-;13703:16;;;:56;;-1:-1:-1;;13703:56:71;-1:-1:-1;;;;;13703:56:71;;;;;;;;;;13790:39;:28;:19;:26;:28::i;:39::-;13769:60;;-1:-1:-1;;;;;13769:60:71;;;;-1:-1:-1;;;13769:60:71;-1:-1:-1;;13769:60:71;;;;;;13840:97;13875:7;13884:10;13896:20;13918:18;13840:34;:97::i;:::-;13947:18;13963:1;13947:15;:18::i;5679:1161:67:-;5983:100;6086:29;:27;:29::i;:::-;6125:35;6163:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;6307:25;;;6342:15;;;:26;;;6398:24;;-1:-1:-1;;;;;6398:24:67;;;6378:17;;;:44;;;;-1:-1:-1;;;6456:28:67;;;;;6432:21;;;:52;6519:29;-1:-1:-1;;;6519:29:67;;;;6494:22;;;:54;-1:-1:-1;;;6578:24:67;;;;6558:17;;;:44;-1:-1:-1;;;6639:31:67;;;;;;6612:24;;;:58;5983:132;;-1:-1:-1;6163:43:67;6681:153;;;;6739:28;;;;-1:-1:-1;;;;;6739:28:67;6715:21;;;:52;6681:153;;;6822:1;6798:21;;;:25;6681:153;5679:1161;;;;;;;;:::o;10661:1216:66:-;10875:21;10939:1;10916:20;:24;10908:33;;;;;;11105:9;11088:14;:26;11084:55;;;-1:-1:-1;11123:16:66;11116:23;;11084:55;11150:16;11169:29;:9;11183:14;11169:13;:29::i;:::-;11150:48;;11291:20;11280:8;:31;11276:60;;;11320:16;11313:23;;;;;11276:60;11396:23;11422:49;:8;11450:20;11422:27;:49::i;:::-;11396:75;-1:-1:-1;11535:20:66;11558:54;4071:3:46;11396:75:66;11558:37;:54::i;:::-;11535:77;-1:-1:-1;11741:129:66;4071:3:46;11742:71:66;11784:28;:10;11535:77;11784:14;:28::i;:::-;11742:37;:16;11763:15;11742:20;:37::i;11741:129::-;11713:157;10661:1216;-1:-1:-1;;;;;;;;;10661:1216:66:o;6170:243:48:-;6235:61;6312:12;6327:39;6343:22;6327:15;:39::i;1923:1056:88:-;1973:11;2263:6;2255:15;;;;;;-1:-1:-1;;;2311:1:88;:40;2307:104;;2373:3;2367:9;;;;2390:10;2307:104;-1:-1:-1;;;2424:1:88;:24;2420:86;;2470:2;2464:8;;;;2486:9;2420:86;2524:11;2519:1;:16;2515:78;;2557:2;2551:8;;;;2573:9;2515:78;2611:7;2606:1;:12;2602:74;;2640:2;2634:8;;;;2656:9;2602:74;2694:5;2689:1;:10;2685:70;;2721:1;2715:7;;;;2736:8;2685:70;2773:4;2768:1;:9;2764:69;;2799:1;2793:7;;;;2814:8;2764:69;2851:3;2846:1;:8;2842:68;;2876:1;2870:7;;;;2891:8;2842:68;2928:3;2923:1;:8;2919:22;;2940:1;2933:8;1923:1056;;;:::o;3004:753:64:-;3142:7;3151:4;3192:1;3175:14;:18;3167:27;;;;;;2606:1:46;3212:14:64;:51;;3204:60;;;;;;3274:12;3289:36;3315:9;3289:25;:36::i;:::-;3274:51;-1:-1:-1;3353:1:64;3336:396;3361:14;3356:1;:19;3336:396;;3396:22;3421:37;3430:27;3455:1;3430:24;:27::i;:::-;3421:4;;:8;:37::i;:::-;3396:62;;3553:8;3535:14;:26;3531:49;;;-1:-1:-1;3571:1:64;-1:-1:-1;3574:5:64;;-1:-1:-1;3563:17:64;;-1:-1:-1;3563:17:64;3531:49;3695:8;3678:14;:25;3674:47;;;-1:-1:-1;3713:1:64;-1:-1:-1;3716:4:64;;-1:-1:-1;3705:16:64;;-1:-1:-1;3705:16:64;3674:47;-1:-1:-1;3377:3:64;;3336:396;;;;3742:8;;;3004:753;;;;;;;:::o;4108:1391:67:-;4279:7;4298:100;4401:29;:27;:29::i;:::-;4298:132;-1:-1:-1;4440:22:67;3200:9:46;4465:36:67;4491:9;4465:25;:36::i;:::-;4531:35;4569:17;;;;;;;;;;;:27;;;;;;;;4465:56;;;;4569:43;;;;;;;4649:29;;4465:56;;-1:-1:-1;4569:43:67;4649:29;-1:-1:-1;;;4649:29:67;;;;;-1:-1:-1;;;4709:24:67;;;;;-1:-1:-1;;;4771:31:67;;;;5212:14;5204:49;;;;-1:-1:-1;;;5204:49:67;;;;;;;:::i;:::-;5283:209;5335:17;5370:15;5403:10;5431:20;5469:9;5283:34;:209::i;:::-;5264:228;4108:1391;-1:-1:-1;;;;;;;;;;;4108:1391:67:o;2148:573:79:-;2266:6;;2318:74;2341:50;3248:11:46;2341:30:79;:10;2356:14;2341;:30::i;:50::-;2318:22;:74::i;:::-;2288:104;;2413:59;2431:8;-1:-1:-1;;;2413:17:79;:59::i;:::-;2402:70;;2493:46;2511:27;2529:8;2511:17;:27::i;:::-;2493:17;:46::i;:::-;2482:57;;2560:59;2578:8;-1:-1:-1;;;2560:17:79;:59::i;:::-;2549:70;;2629:21;2653:29;2673:8;2653:19;:29::i;:::-;2629:53;;;2148:573;-1:-1:-1;;;;;2148:573:79:o;2261:143:90:-;2332:6;2357:40;2361:9;2365:1;2368;2361:3;:9::i;:::-;4071:3:46;2357::90;:40::i;2232:273:66:-;2306:12;2342:11;2338:1;:15;2330:24;;;;;;2606:1:46;2372:11:66;:48;;2364:57;;;;;;2460:1;2446:11;:15;:47;;2492:1;2478:11;:15;2446:47;;;2464:11;2446:47;2497:1;2440:58;;2232:273;-1:-1:-1;;2232:273:66:o;3552:1423::-;3659:31;;:::i;:::-;2186:3:46;4071;3879:4:66;3884:32;;;3879:38;;;;;;;;3865:90;:143;;;;;;3844:164;;2186:3:46;4071;4053:4:66;4058:32;;;1019:1;4058:32;4053:38;;;;;;;;4039:90;:143;;;;;;4018:1;:18;;:164;;;;;4204:53;4227:4;1077:1;4232:6;:22;;;4227:28;;;;;;;;4204:16;:53::i;:::-;4192:9;;;:65;;;4515:3;;4467:4;4472:25;;;1135:1;4472:25;4467:31;;;;;;;;4453:59;:65;;;;;;4439:11;;;:79;4592:9;;;;4604:3;;4556:4;4561:25;;;1193:1;4561:25;4556:31;;;;;;;;4542:59;:65;;;;;;4528:11;;;:79;4633:15:46;4695:4:66;4700:26;;;4633:1:46;4700:26:66;4695:32;;;;;;;;4681:87;4666:12;;;:102;5125:16:46;4807:4:66;4812:26;;;1309:1;4812:26;4807:32;;;;;;;;4793:94;4778:12;;;:109;4930:4;4801:39;4935:30;;1367:1;4935:30;4930:36;;;;;;;;4897:16;;;:71;:1;3552:1423;-1:-1:-1;;3552:1423:66:o;3647:1015:90:-;3715:6;3790:3;3781:5;:12;:40;;;;3807:1;3798:5;:10;;:22;;;;;3819:1;3812:3;:8;;3798:22;3777:54;;;-1:-1:-1;3830:1:90;3823:8;;3777:54;3854:1;3845:5;:10;;:21;;;;;3863:3;3859:1;:7;3845:21;3841:754;;;-1:-1:-1;4047:5:90;4040:12;;3841:754;4080:1;4073:3;:8;;:21;;;;;4089:5;4085:1;:9;4073:21;4069:526;;;4278:8;4282:3;4278;:8::i;4069:526::-;4316:1;4307:5;:10;;:22;;;;;4328:1;4321:3;:8;;4307:22;4303:292;;;4569:15;4573:5;4580:3;4569;:15::i;13605:278:48:-;13677:75;13769:12;13784:52;13800:35;13784:15;:52::i;4181:133:91:-;4233:6;-1:-1:-1;;;;;4259:21:91;;;4251:30;;;;;8144:440:53;8288:20;8310:23;8337:47;8348:10;8360:8;8370:13;8337:10;:47::i;:::-;8287:97;;;;8394:12;8408:10;8448:1;8432:13;:17;8428:75;;;8458:7;8451:14;;8428:75;;;-1:-1:-1;8496:7:53;8428:75;8561:2;-1:-1:-1;;;;;8529:48:53;8555:4;-1:-1:-1;;;;;8529:48:53;8543:10;-1:-1:-1;;;;;8529:48:53;;8565:3;8570:6;8529:48;;;;;;;:::i;:::-;;;;;;;;8144:440;;;;;;;;:::o;996:838:88:-;1198:1;1193:6;;;1202:66;1193:75;;;1118:70;;1117:152;1364:1;1359:6;;;1368:66;1359:75;;;1284:70;;1283:152;1530:1;1525:6;;;1454:66;1450:70;;;;1449:83;1627:1;1622:6;;;1631:66;1622:75;;;1547:70;;1546:152;1722:2;1717:7;;;1712:13;1749:2;1744:7;;;1739:13;1777:2;1772:7;;;1766:14;1816:3;1811:8;;;1822:4;1811:15;;;1798:8;;1797:30;;996:838::o;15372:265:75:-;15479:30;15511:20;15552:42;15568:7;15577:16;15552:15;:42::i;:::-;15543:51;;15610:20;15623:6;15610:12;:20::i;:::-;15604:26;;15372:265;;;;;:::o;1663:662:71:-;1748:25;;:::i;:::-;1785:33;1821:32;:30;:32::i;:::-;:44;;;;;;;;;;;;;;;;;1894:16;;;;;1875:35;;-1:-1:-1;;;1941:18:71;;-1:-1:-1;;;;;1941:18:71;;;1920;;;:39;;;;1894:16;1988;;;;;1969;;;:35;;;;-1:-1:-1;;;2035:18:71;;;;2014;;;:39;-1:-1:-1;;;2092:26:71;;;;;;2063;;;:55;2149:18;;;-1:-1:-1;;;;;2149:18:71;;;2128;;;:39;-1:-1:-1;;;2194:14:71;;;;2177;;;:31;-1:-1:-1;;;2233:12:71;;;2218;;;:27;-1:-1:-1;;;2280:26:71;;;;2309:9;2280:38;2255:63;;;1894:16;2255:22;;:63;1875:35;:1;-1:-1:-1;1663:662:71:o;4438:255::-;4511:7;4538:25;4567:38;4594:10;4567:26;:38::i;:::-;-1:-1:-1;;;;;4567:83:71;;:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;24613:2042::-;24807:23;;:::i;:::-;24832:7;24851:28;24889:24;25062:48;25081:10;25093:9;25104:5;25062:18;:48::i;:::-;24967:18;;;24923:187;;;;24937:16;;;24923:187;;;;25280:22;;;;24923:187;;-1:-1:-1;24923:187:71;-1:-1:-1;25280:48:71;;24923:187;25280:26;:48::i;:::-;25255:22;;;:73;25867:30;;;;25818;;25867:34;25863:422;;26239:30;;;;26138:132;;:58;:22;26239:30;26138:26;:58::i;:::-;:100;;:132::i;:::-;26113:157;;25863:422;26324:116;26385:54;4160:4:46;26416:22:71;26385:30;:54::i;:::-;26324:22;;;;;:60;:116::i;:::-;26299:22;;;:141;-1:-1:-1;;26454:30:71;;;:55;;;;-1:-1:-1;;26569:32:71;;26299:22;;26627:20;;-1:-1:-1;24613:2042:71:o;10176:1240::-;10338:33;10374:32;:30;:32::i;:::-;:44;10407:10;10374:44;;;;;;;;;;;;;10338:80;;10447:27;:1;:16;;;:25;:27::i;:::-;10428:46;;-1:-1:-1;;10428:46:71;;;;;;;;;10505:18;;;;:29;;:27;:29::i;:::-;10484:18;;;:50;;-1:-1:-1;;;;;;10484:50:71;-1:-1:-1;;;;;10484:50:71;;;;;;;;;;10561:14;;;;:25;;:23;:25::i;:::-;10544:1;:14;;;:42;;;;;-1:-1:-1;;;;;10544:42:71;;;;;-1:-1:-1;;;;;10544:42:71;;;;;;10611:23;:1;:12;;;:21;:23::i;:::-;10596:1;:12;;;:38;;;;;-1:-1:-1;;;;;10596:38:71;;;;;-1:-1:-1;;;;;10596:38:71;;;;;;10735:29;:1;:18;;;:27;:29::i;:::-;10714:50;;-1:-1:-1;;;;;10714:50:71;;;;-1:-1:-1;;;10714:50:71;-1:-1:-1;;10714:50:71;;;;;;10793:16;;;;:27;;:25;:27::i;:::-;10774:16;;;:46;;-1:-1:-1;;10774:46:71;-1:-1:-1;;;;;10774:46:71;;;;;;;;;;10859:26;;;;:37;;:35;:37::i;:::-;10830:66;;-1:-1:-1;;;;;10830:66:71;;;;-1:-1:-1;;;10830:66:71;-1:-1:-1;;;;10830:66:71;;;;;;10927:18;;;;:29;;:27;:29::i;:::-;10906:50;;;;;;;-1:-1:-1;;;10906:50:71;-1:-1:-1;;;;10906:50:71;;;;;;11018:24;;11014:272;;11058:18;11079:28;:20;:26;:28::i;:::-;11058:49;;11121:61;11158:10;11170:11;11121:36;:61::i;:::-;11196:79;1172:42:46;11251:10:71;11263:11;11196:31;:79::i;:::-;11014:272;;11339:10;11301:108;;;11351:1;:18;;;11371:1;:14;;;11387:1;:12;;;11301:108;;;;;;;;:::i;:::-;;;;;;;;10176:1240;;;;:::o;4888:163:91:-;4937:6;-1:-1:-1;;;;;4964:1:91;:30;;4955:40;;;;;5532:217:48;5594:41;5651:12;5666:36;5682:19;5666:15;:36::i;7109:581:67:-;7199:35;7237:32;7262:6;7237:24;:32::i;:::-;7199:70;;7331:23;7357:13;:24;;;;;;;;;;;;7331:50;;7392:224;7423:13;7450:6;:17;;;7481:6;:21;;;7516:6;:22;;;7552:16;7392:224;;7582:6;:24;;;7392:17;:224::i;:::-;7627:56;7646:13;7661:6;:21;;;7627:18;:56::i;17280:371:72:-;17426:19;;:::i;:::-;17457:10;17491:45;17515:10;17527:8;17491:23;:45::i;:::-;17477:59;;-1:-1:-1;17477:59:72;-1:-1:-1;17477:59:72;17547:98;;17578:56;17602:10;17614:8;17624:9;17578:23;:56::i;5853:1630::-;6026:29;6057:31;6186:53;6208:16;6226:12;6186:21;:53::i;:::-;6161:78;;6276:63;6298:16;6316:22;6276:21;:63::i;:::-;6249:90;;6925:1;6900:22;:26;6896:581;;;7117:349;7464:1;7117:226;7313:16;:29;;;7117:174;7263:16;:27;;;7117:124;7213:16;:27;;;7117:74;7161:16;:29;;;7117:22;:43;;:74;;;;:::i;:124::-;:145;;:174::i;:349::-;7092:374;;5853:1630;;;;;;:::o;9779:746:53:-;10079:10;10092:33;10104:10;10116:8;10092:11;:33::i;:::-;10079:46;;10154:1;10139:12;:16;10135:51;;;-1:-1:-1;;;10162:24:53;10135:51;10245:1;-1:-1:-1;;;;;10201:80:53;;10216:10;10201:80;10249:2;10261:18;:12;:16;:18::i;:::-;10201:80;;;;;;;:::i;:::-;;;;;;;;10345:22;10370:48;10404:1;10385:16;:20;10407:10;10370:14;:48::i;:::-;10345:73;;10428:5;-1:-1:-1;;;;;10428:18:53;;1390:42:46;10477:7:53;10494:22;:16;:20;:22::i;:::-;10428:90;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9779:746;;;;;;;:::o;12513:242:48:-;12576:57;12650:12;12665:43;12681:26;12665:15;:43::i;4320:133:91:-;4372:6;-1:-1:-1;;;;;4398:21:91;;;4390:30;;;;;15412:494:53;15573:26;15619:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15619:47:53;;-1:-1:-1;15723:35:53;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;;;15781:53;;-1:-1:-1;;;15781:53:53;;-1:-1:-1;;;;;15723:47:53;;;;-1:-1:-1;15723:47:53;;15781:24;;:53;;15806:7;;15815:18;;15781:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;15844:55:53;;-1:-1:-1;;;15844:55:53;;-1:-1:-1;;;;;15844:24:53;;;-1:-1:-1;15844:24:53;;-1:-1:-1;15844:55:53;;15869:7;;15878:20;;15844:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15412:494;;;;;;:::o;15468:575:71:-;15618:18;;15594;;;;15551:13;;15567:70;;-1:-1:-1;;;15618:18:71;;;-1:-1:-1;;;;;15618:18:71;;15567:46;;-1:-1:-1;;;;;;;;15574:14:71;;;;;15594:18;15567:26;:46::i;:70::-;15710:16;;;;15686:18;;;;15551:86;;-1:-1:-1;15647:11:71;;15661:66;;-1:-1:-1;;;;;15710:16:71;;15661:44;;-1:-1:-1;;;;;;;;15668:12:71;;;;;15686:18;15661:24;:44::i;:66::-;15892:26;;15647:80;;-1:-1:-1;15865:17:71;;15885:77;;15921:1;-1:-1:-1;;;;;;;;15892:26:71;;;;;:30;15885:38;4251:4:46;15885:42:71;:77::i;:::-;15865:97;-1:-1:-1;15865:97:71;15980:16;:6;15991:4;15980:10;:16::i;:::-;:30;;15972:39;;;;;2713:155:91;2786:7;2812:49;2816:41;2820:1;4071:3:46;2816::91;:41::i;:::-;2859:1;2812:3;:49::i;1907:134:87:-;1960:6;1988:18;1983:1;:23;;1974:33;;;;;;-1:-1:-1;2033:2:87;2028:7;;1907:134::o;6650:222::-;6707:6;6730:1;:6;;6735:1;6730:6;;6721:16;;;;;;6743:13;6780:1;6759:22;;6774:2;6768:1;6760:10;;:16;;6759:22;;;;;;;-1:-1:-1;;;;;;;6796:19:87;;;;;:42;;-1:-1:-1;;;;;;6819:19:87;;;6796:42;6787:52;;;;;8576:105;8623:6;8646:14;;;;-1:-1:-1;;;;;;8646:14:87;;8637:24;;;;;;-1:-1:-1;8674:2:87;;;8576:105::o;21318:266::-;21365:6;-1:-1:-1;;;21388:1:87;:24;;;21379:34;;;;;;-1:-1:-1;;21436:1:87;:25;;;21432:39;;;-1:-1:-1;21470:1:87;21463:8;;21432:39;21498:81;21574:3;21530:1;21522:10;;21535:35;21522:48;:55;;21498:5;:81::i;4165:197::-;4222:6;4252:13;:9;;;:13;;;;;4269:2;4252:19;-1:-1:-1;;;;;;4286:19:87;;;;;:42;;-1:-1:-1;;;;;;4309:19:87;;;4277:52;;;;;1589:89;1665:7;;1670:2;1665:7;;1589:89::o;2913:633:66:-;2981:7;3306:11;3274:43;;4981:3:46;3274:43:66;:265;;3491:48;;;5125:16:46;3491:48:66;3274:265;;;-1:-1:-1;;;3388:43:66;;;;;;5206:17:46;3387:88:66;5044:22:46;3333:142:66;;2913:633::o;7493:490:53:-;7670:16;;;7684:1;7670:16;;;7601;7670;;;;;;7601;;7647:20;;7670:16;;;;;;;;;;;;-1:-1:-1;7670:16:53;7647:39;;7696:10;7709:33;7721:10;7733:8;7709:11;:33::i;:::-;7696:46;;7761:2;7752:3;7756:1;7752:6;;;;;;;;;;;;;:11;;;;;-1:-1:-1;;;7782:2:53;:24;7773:3;7777:1;7773:6;;;;;;;;;;;;;;;;;:33;7843:16;;;7857:1;7843:16;;;;;;;;;7817:23;;7843:16;;;;;;;;;;;;-1:-1:-1;7843:16:53;7817:42;;7889:12;:6;:10;:12::i;:::-;7869:6;7876:1;7869:9;;;;;;;;;;;;;:33;;;;;7932:12;:6;:10;:12::i;:::-;7912:6;7919:1;7912:9;;;;;;;;;;;;;;;;;:33;7964:3;;;;-1:-1:-1;7493:490:53;;-1:-1:-1;;;;;7493:490:53:o;17538:1107:75:-;17640:23;847:1;17737:6;:30;;;;17729:39;;;;;;17779:90;17872:37;:35;:37::i;:::-;-1:-1:-1;;;;;17986:14:75;;17919:64;17986:14;;;;;;;;;;17779:130;;-1:-1:-1;18043:28:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;18010:61;;18087:9;18082:533;18106:6;18102:10;;:1;:10;18082:533;;;18133:42;18178:12;18191:1;18178:15;;;;;;;;18133:60;;18207:27;18237:6;18244:1;18237:9;;;;;;;;;;;;;;;;;;;18385:23;;;;;18366:42;;18439:21;;;;;18422:14;;;:38;;;;18492:22;-1:-1:-1;;;18492:22:75;;;18474:15;;;:40;-1:-1:-1;;;18545:21:75;;;;;;;18528:38;;:14;;;:38;18580:17;;:24;;;;-1:-1:-1;18385:23:75;18114:3;18082:533;;16696:836;16835:13;;16786:20;;16835:13;16864:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16864:21:75;;16858:27;;16900:9;16895:236;16915:6;16911:1;:10;16895:236;;;16942:27;16972:6;16979:1;16972:9;;;;;;;;;;;;;;16942:39;;17062:58;17070:5;:16;;;17088:5;:14;;;17104:5;:15;;;17062:7;:58::i;:::-;17053:3;17057:1;17053:6;;;;;;;;;;;;;;;;;:67;-1:-1:-1;16923:3:75;;16895:236;;;-1:-1:-1;17185:1:75;17196:330;17207:6;17203:1;:10;17196:330;;;17241:1;17256:243;17267:1;17263;:5;:28;;;;;17285:3;17289:1;17285:6;;;;;;;;;;;;;;17272:3;17280:1;17276;:5;17272:10;;;;;;;;;;;;;;:19;17263:28;17256:243;;;17371:3;17375:1;17371:6;;;;;;;;;;;;;;17379:3;17387:1;17383;:5;17379:10;;;;;;;;;;;;;;17348:3;17356:1;17352;:5;17348:10;;;;;;;;;;;;;17360:3;17364:1;17360:6;;;;;;;;;;;;;17347:43;;;;;;;;;;17438:6;17445:1;17438:9;;;;;;;;;;;;;;17449:6;17460:1;17456;:5;17449:13;;;;;;;;;;;;;;17409:6;17420:1;17416;:5;17409:13;;;;;;;;;;;;;17424:6;17431:1;17424:9;;;;;;;;;;;;;;;;;17408:55;;;;;-1:-1:-1;;17481:3:75;17256:243;;;-1:-1:-1;17512:3:75;;17196:330;;;16696:836;;;;;:::o;3556:233:71:-;3634:24;3670:33;3706:39;:37;:39::i;:::-;:51;;;;;;;;;;;;;;-1:-1:-1;;3706:51:71;;;3774:8;-1:-1:-1;;;;;3774:8:71;;3556:233::o;21727:2630::-;21885:25;21920:23;21953:28;21991:24;22032:28;22070:29;22175:40;22197:10;22209:5;22175:21;:40::i;:::-;22544:20;;22109:106;;-1:-1:-1;22109:106:71;;-1:-1:-1;22109:106:71;-1:-1:-1;22443:33:71;;22479:87;;22530:35;;:9;;:13;:35::i;:::-;4071:3:46;;22479:50:71;:87::i;:::-;22443:123;-1:-1:-1;22597:233:71;22648:172;3248:11:46;22737:52:71;:21;22443:123;22737:25;:52::i;:::-;:69;;;;;4160:4:46;;22737:69:71;;22648:30;:172::i;:::-;22597:16;;;;;:37;:233::i;:::-;22577:253;-1:-1:-1;22859:230:71;22912:167;3248:11:46;23001:47:71;:16;23022:25;23001:20;:47::i;22912:167::-;22859:18;;;;;:39;:230::i;:::-;22841:248;;23238:21;23214:20;:45;23210:140;;;-1:-1:-1;23319:1:71;;-1:-1:-1;23275:64:71;;-1:-1:-1;;23275:64:71;23210:140;23487:23;23513:232;23564:171;3248:11:46;23653:51:71;:20;23678:25;23653:24;:51::i;23564:171::-;23513:16;;;;;:37;:232::i;:::-;23487:258;-1:-1:-1;23755:26:71;23784:38;:17;23487:258;23784:21;:38::i;:::-;23755:67;;24285:65;24334:15;24285:44;24310:18;24285:5;:20;;;:24;;:44;;;;:::i;:65::-;24262:88;;21727:2630;;;;;;;;;;;;;:::o;3035:150:91:-;3110:7;3136:42;3140:34;3144:1;4160:4:46;3140:3:91;:34::i;3191:150::-;3266:7;3292:42;3296:9;3300:1;3303;3296:3;:9::i;:::-;4160:4:46;3292:3:91;:42::i;3482:133::-;3534:6;3565:16;3560:21;;;3552:30;;;;;15273:369:54;15369:1;15362:3;:8;;15354:17;;;;;;15428:19;15450:57;1172:42:46;15496:10:54;15450:22;:57::i;:::-;15428:79;-1:-1:-1;15532:21:54;15428:79;15549:3;15532:16;:21::i;:::-;15517:36;;15563:72;1172:42:46;15610:10:54;15622:12;15563:23;:72::i;13560:281:53:-;13683:26;13729:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;;;13787;;-1:-1:-1;;;13787:47:53;;-1:-1:-1;;;;;13729:47:53;;;;-1:-1:-1;13729:47:53;;13787:24;;:47;;13812:7;;13821:12;;13787:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6846:257:67;7010:18;;7047:50::o;17773:784:72:-;17887:19;;:::i;:::-;17908:10;17930:92;18025:36;:34;:36::i;:::-;18120:17;;;18071:46;18120:17;;;;;;;;;;;:27;;;;;;;;18165:17;;-1:-1:-1;;;18165:17:72;;;;;-1:-1:-1;18120:17:72;;-1:-1:-1;18274:277:72;;;;18326:28;;-1:-1:-1;;;;;;;;18326:28:72;;;;;18393:55;;18401:24;18326:28;18393:37;:55::i;:::-;18368:81;;18494:22;;18486:53;;-1:-1:-1;;;18494:22:72;;-1:-1:-1;;;;;18494:22:72;18522:16;18486:35;:53::i;:::-;18463:13;;;:77;-1:-1:-1;18274:277:72;17773:784;;;;;;;:::o;18563:1565::-;18699:19;;:::i;:::-;18799:69;18846:10;18858:9;18799:46;:69::i;:::-;18794:74;;18919:31;18953:53;18995:10;18953:41;:53::i;:::-;18919:87;;19017:92;19112:36;:34;:36::i;:::-;19207:17;;;19158:46;19207:17;;;;;;;;;;;:27;;;;;;;;19017:131;;-1:-1:-1;19253:51:72;19245:60;;;;;;19348:22;;:35;;19340:44;;;;;;19429:9;19425:1;:13;19417:22;;;;;;19493:9;19481:8;:21;;19473:30;;;;;;19559:15;;;19555:19;19547:28;;;;;;19626:2;:13;;;19622:1;:17;19614:26;;;;;;19711:35;:7;:24;;;:33;:35::i;:::-;19680:66;;-1:-1:-1;;;;;19680:66:72;;;;-1:-1:-1;;;19680:66:72;-1:-1:-1;;;;19680:66:72;;;;;;19783:20;;;;:31;;:29;:31::i;:::-;19756:58;;-1:-1:-1;;;;;;19756:58:72;-1:-1:-1;;;;;19756:58:72;;;;;;;19849:18;;;;:29;;:27;:29::i;:::-;19824:54;;-1:-1:-1;;;;;;;;;19824:54:72;;;;-1:-1:-1;;;19824:54:72;-1:-1:-1;;;;19824:54:72;;;;19888:24;-1:-1:-1;;;19888:24:72;;;19923:48;19946:10;19958:8;19968:2;19923:22;:48::i;:::-;20047:8;20023:10;19987:134;;;20069:2;:15;;;20098:2;:13;;;19987:134;;;;;;;:::i;:::-;;;;;;;;18563:1565;;;;;;;;:::o;6339:322:53:-;6471:47;2786:2;6471:47;;;;2729:1;6535:36;;;6470:102;5494:1:46;6470:174:53;6339:322;;;;:::o;1662:118:90:-;1708:6;1734:1;1730;:5;1726:47;;;1744:6;1748:1;1744:3;:6::i;:::-;1737:13;;;;1726:47;-1:-1:-1;1772:1:90;1765:8;;7200:287:53;7278:16;7313:6;:167;;7432:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7432:47:53;7313:167;;;7352:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7352:47:53;7306:174;;7200:287;;;;:::o;13955:225:48:-;14021:41;14079:12;14094:39;14110:22;14094:15;:39::i;14186:225::-;14252:41;14310:12;14325:39;14341:22;14325:15;:39::i;14615:6524:87:-;14664:6;-1:-1:-1;;;14687:1:87;:24;;;14678:34;;;;;;-1:-1:-1;;14735:1:87;:25;;;14731:39;;;-1:-1:-1;14769:1:87;14762:8;;14731:39;-1:-1:-1;;;14790:14:87;14856:18;14852:22;;:26;;;14848:98;;;14904:35;14895:44;14943:3;14895:51;14848:98;14981:1;14956;14960:18;14956:22;:26;;;14952:98;;;15008:35;14999:44;15047:3;14999:51;14952:98;15085:1;15060;15064:18;15060:22;:26;;;15056:98;;;15112:35;15103:44;15151:3;15103:51;15056:98;15189:1;15164;15168:18;15164:22;:26;;;15160:98;;;15216:35;15207:44;15255:3;15207:51;15160:98;15292:1;15268;15272:17;15268:21;:25;;;15264:97;;;15319:35;15310:44;15358:3;15310:51;15264:97;15395:1;15371;15375:17;15371:21;:25;;;15367:97;;;15422:35;15413:44;15461:3;15413:51;15367:97;15498:1;15474;15478:17;15474:21;:25;;;15470:97;;;15525:35;15516:44;15564:3;15516:51;15470:97;15601:1;15577;-1:-1:-1;;;15577:21:87;:25;;;15573:97;;;15628:35;15619:44;15667:3;15619:51;15573:97;15703:1;15680;15684:16;15680:20;:24;;;15676:96;;;15730:35;15721:44;15769:3;15721:51;15676:96;15805:1;15782;15786:16;15782:20;:24;;;15778:96;;;15832:35;15823:44;15871:3;15823:51;15778:96;15907:1;15884;15888:16;15884:20;:24;;;15880:96;;;15934:35;15925:44;15973:3;15925:51;15880:96;16009:1;15986;15990:16;15986:20;:24;;;15982:96;;;16036:35;16027:44;16075:3;16027:51;15982:96;16110:1;16088;16092:15;16088:19;:23;;;16084:95;;;16137:35;16128:44;16176:3;16128:51;16084:95;16211:1;16189;16193:15;16189:19;:23;;;16185:95;;;16238:35;16229:44;16277:3;16229:51;16185:95;16312:1;16290;16294:15;16290:19;:23;;;16286:95;;;16339:35;16330:44;16378:3;16330:51;16286:95;16413:1;16391;-1:-1:-1;;;16391:19:87;:23;;;16387:95;;;16440:35;16431:44;16479:3;16431:51;16387:95;16513:1;16492;16496:14;16492:18;:22;;;16488:94;;;16540:35;16531:44;16579:3;16531:51;16488:94;16613:1;16592;16596:14;16592:18;:22;;;16588:94;;;16640:35;16631:44;16679:3;16631:51;16588:94;16713:1;16692;16696:14;16692:18;:22;;;16688:94;;;16740:35;16731:44;16779:3;16731:51;16688:94;16813:1;16792;16796:14;16792:18;:22;;;16788:94;;;16840:35;16831:44;16879:3;16831:51;16788:94;16912:1;16892;16896:13;16892:17;:21;;;16888:93;;;16939:35;16930:44;16978:3;16930:51;16888:93;17011:1;16991;16995:13;16991:17;:21;;;16987:93;;;17038:35;17029:44;17077:3;17029:51;16987:93;17110:1;17090;17094:13;17090:17;:21;;;17086:93;;;17137:35;17128:44;17176:3;17128:51;17086:93;17209:1;17189;-1:-1:-1;;;17189:17:87;:21;;;17185:93;;;17236:35;17227:44;17275:3;17227:51;17185:93;17307:1;17288;17292:12;17288:16;:20;;;17284:92;;;17334:35;17325:44;17373:3;17325:51;17284:92;17405:1;17386;17390:12;17386:16;:20;;;17382:92;;;17432:35;17423:44;17471:3;17423:51;17382:92;17503:1;17484;17488:12;17484:16;:20;;;17480:92;;;17530:35;17521:44;17569:3;17521:51;17480:92;17601:1;17582;17586:12;17582:16;:20;;;17578:92;;;17628:35;17619:44;17667:3;17619:51;17578:92;17698:1;17680;17684:11;17680:15;:19;;;17676:91;;;17725:35;17716:44;17764:3;17716:51;17676:91;17795:1;17777;17781:11;17777:15;:19;;;17773:91;;;17822:35;17813:44;17861:3;17813:51;17773:91;17892:1;17874;17878:11;17874:15;:19;;;17870:91;;;17919:35;17910:44;17958:3;17910:51;17870:91;17989:1;17971;17975:11;17971:15;:19;;;17967:91;;;18016:35;18007:44;18055:3;18007:51;17967:91;18085:1;18068;18072:10;18068:14;:18;;;18064:90;;;18112:35;18103:44;18151:3;18103:51;18064:90;18181:1;18164;18168:10;18164:14;:18;;;18160:90;;;18208:35;18199:44;18247:3;18199:51;18160:90;18277:1;18260;18264:10;18260:14;:18;;;18256:90;;;18304:35;18295:44;18343:3;18295:51;18256:90;18373:1;18356;18360:10;18356:14;:18;;;18352:90;;;18400:35;18391:44;18439:3;18391:51;18352:90;18468:1;18452;18456:9;18452:13;:17;;;18448:89;;;18495:35;18486:44;18534:3;18486:51;18448:89;18563:1;18547;18551:9;18547:13;:17;;;18543:89;;;18590:35;18581:44;18629:3;18581:51;18543:89;18658:1;18642;18646:9;18642:13;:17;;;18638:89;;;18685:35;18676:44;18724:3;18676:51;18638:89;18753:1;18737;18741:9;18737:13;:17;;;18733:89;;;18780:35;18771:44;18819:3;18771:51;18733:89;18847:1;18832;18836:8;18832:12;:16;;;18828:88;;;18874:35;18865:44;18913:3;18865:51;18828:88;18941:1;18926;18930:8;18926:12;:16;;;18922:88;;;18968:35;18959:44;19007:3;18959:51;18922:88;19035:1;19020;19024:8;19020:12;:16;;;19016:88;;;19062:35;19053:44;19101:3;19053:51;19016:88;19129:1;19114;19118:8;19114:12;:16;;;19110:88;;;19156:35;19147:44;19195:3;19147:51;19110:88;19222:1;19208;19212:7;19208:11;:15;;;19204:87;;;19249:35;19240:44;19288:3;19240:51;19204:87;19315:1;19301;19305:7;19301:11;:15;;;19297:87;;;19342:35;19333:44;19381:3;19333:51;19297:87;19408:1;19394;19398:7;19394:11;:15;;;19390:87;;;19435:35;19426:44;19474:3;19426:51;19390:87;19501:1;19487;19491:7;19487:11;:15;;;19483:87;;;19528:35;19519:44;19567:3;19519:51;19483:87;19593:1;19580;19584:6;19580:10;:14;;;19576:86;;;19620:35;19611:44;19659:3;19611:51;19576:86;19685:1;19672;19676:6;19672:10;:14;;;19668:86;;;19712:35;19703:44;19751:3;19703:51;19668:86;19777:1;19764;19768:6;19764:10;:14;;;19760:86;;;19804:35;19795:44;19843:3;19795:51;19760:86;19869:1;19856;19860:6;19856:10;:14;;;19852:86;;;19896:35;19887:44;19935:3;19887:51;19852:86;19960:1;19948;19952:5;19948:9;:13;;;19944:85;;;19987:35;19978:44;20026:3;19978:51;19944:85;20051:1;20039;20043:5;20039:9;:13;;;20035:85;;;20078:35;20069:44;20117:3;20069:51;20035:85;20142:1;20130;20134:5;20130:9;:13;;;20126:85;;;20169:35;20160:44;20208:3;20160:51;20126:85;20233:1;20221;20225:5;20221:9;:13;;;20217:85;;;20260:35;20251:44;20299:3;20251:51;20217:85;20323:1;20312;20316:4;20312:8;:12;;;20308:84;;;20350:35;20341:44;20389:3;20341:51;20308:84;20413:1;20402;20406:4;20402:8;:12;;;20398:84;;;20440:35;20431:44;20479:3;20431:51;20398:84;20503:1;20492;20496:4;20492:8;:12;;;20488:84;;;20530:35;20521:44;20569:3;20521:51;20488:84;20593:1;20582;20586:4;20582:8;:12;;;20578:84;;;20620:35;20611:44;20659:3;20611:51;20578:84;20682:1;20672;20676:3;20672:7;:11;;;20668:83;;;20709:35;20700:44;20748:3;20700:51;20668:83;20771:1;20761;20765:3;20761:7;:11;;;20757:83;;;20798:35;20789:44;20837:3;20789:51;20757:83;20860:1;20850;20854:3;20850:7;:11;;;20846:83;;;20887:35;20878:44;20926:3;20878:51;20846:83;20949:1;20939;20943:3;20939:7;:11;;;20935:83;;;20976:35;20967:44;21015:3;20967:51;20935:83;21051:7;;;;21056:2;21051:7;21045:2;:14;21036:24;;21025:35;-1:-1:-1;;;;;21075:29:87;;;21066:39;;;;;16382:308:75;16525:34;16557:2;16525:34;;;;16580:39;16618:1;16580:39;;;;16524:96;16647:25;;;16524:149;16382:308;;;;;:::o;13247:257:48:-;13317:57;13391:12;13406:51;13422:34;13406:15;:51::i;19401:1969:71:-;19538:28;19576:29;19615:24;20002:19;20062:1;20035:7;:24;;;:28;20031:297;;;20183:134;20266:50;20295:7;:20;;;20266:7;:24;;;:28;;:50;;;;:::i;:::-;20210:18;;;;20183:22;;;;:46;;:26;:46::i;:::-;:82;;:134::i;:::-;20169:148;;20031:297;20337:31;20371:64;20424:10;20371:52;:64::i;:::-;20337:98;-1:-1:-1;20477:30:71;20337:98;20495:11;20477:17;:30::i;:::-;20454:53;-1:-1:-1;20785:15:71;;20781:209;;20927:52;:1;20952:20;20974:4;20927:24;:52::i;:::-;20903:76;;20781:209;21238:24;;;;:28;21234:130;;21301:52;:20;21341:11;21301:39;:52::i;:::-;21282:71;;21234:130;19401:1969;;;;;;;:::o;12840:273:48:-;12907:80;13004:12;13019:47;13035:30;13019:15;:47::i;20134:2731:72:-;20284:75;20362:41;:39;:41::i;:::-;20447:17;;;20413:31;20447:17;;;;;;;;;;;:27;;;;;;;;20511:16;;20284:119;;-1:-1:-1;20447:27:72;-1:-1:-1;;;;;20511:16:72;20503:25;;20690:30;;:::i;:::-;20730:59;:6;:59;;;20770:8;;20730:27;:59::i;:::-;20807:21;;;;:26;20799:56;;;;-1:-1:-1;;;20799:56:72;;;;;;;:::i;:::-;21026:27;21056:54;21078:14;21094:15;:9;:13;:15::i;:::-;21056:21;:54::i;:::-;21026:84;;21120:25;21148:63;:57;21179:14;21195:9;21148:30;:57::i;:::-;:61;:63::i;:::-;21120:91;;21396:148;1390:42:46;21482:10:72;21494:18;21514:20;21396:42;:148::i;:::-;22032:34;;-1:-1:-1;;;;;;;;22032:34:72;;;;21996:25;22024:43;;;;-1:-1:-1;;;22112:34:72;;;;;;22161:22;;;:48;;;22191:18;22187:1;:22;22161:48;22157:605;;;22225:29;22257:57;22279:14;22295:18;22257:21;:57::i;:::-;22225:89;-1:-1:-1;22399:17:72;22419:46;:18;22225:89;22419:22;:46::i;:::-;22399:66;;22487:10;22483:1;:14;22479:113;;;22517:60;22554:10;22566;22517:36;:60::i;:::-;22607:144;22661:10;22673:8;22683:18;22703:22;22727:10;22607:36;:144::i;:::-;22157:605;;;-1:-1:-1;;;22831:17:72;;;;;;;;;;;;;;;;:27;;;;;;;-1:-1:-1;;;22831:27:72;;;;22824:34;;-1:-1:-1;;;;;;22824:34:72;;;-1:-1:-1;;20134:2731:72:o;8019:290:66:-;8119:31;;:::i;:::-;8162:12;8177:44;:42;:44::i;:::-;:56;;;;;;;;;;;;;;;:59;;-1:-1:-1;8253:49:66;;8177:59;8253:24;:49::i;17338:897::-;17506:27;17545:15;17563:91;2186:3:46;17563:47:66;17586:8;:23;;;17563:18;:22;;:47;;;;:::i;:91::-;17545:109;;17678:8;:19;;;17668:7;:29;17664:64;;;-1:-1:-1;17709:19:66;;;;17664:64;17752:8;:19;;;17742:7;:29;17738:64;;;-1:-1:-1;17783:19:66;;;;17738:64;17817:8;17813:416;;;17967:31;:18;17990:7;17967:22;:31::i;:::-;17945:53;;17813:416;;;18163:18;18153:7;:28;:65;;18210:7;18189:18;:28;18153:65;;;-1:-1:-1;18184:1:66;;17338:897;-1:-1:-1;;;;17338:897:66:o;2874:155:91:-;2947:7;2973:49;2977:9;2981:1;2984;2977:3;:9::i;:::-;4071:3:46;2973::91;:49::i;15658:563:72:-;15783:6;15903:10;15898:1;:15;;:34;;;;;15930:2;15917:10;:15;15898:34;15894:48;;;-1:-1:-1;15941:1:72;15934:8;;15894:48;15973:1;15960:10;:14;15952:23;;;;;;16139:75;16212:1;16139:68;16193:2;:13;;;16139:49;4251:4:46;16139:10:72;:14;;:49;;;;:::i;10670:947:53:-;10881:10;-1:-1:-1;;;10894:33:53;10906:10;10918:8;10894:11;:33::i;:::-;:55;;-1:-1:-1;11029:1:53;1390:42:46;10979:10:53;10964:107;10894:55;11045:24;:18;:22;:24::i;:::-;10964:107;;;;;;;:::i;:::-;;;;;;;;11291:83;1390:42:46;11345:10:53;11357:16;11291:23;:83::i;:::-;11401:1;11388:10;:14;11384:227;;;11502:98;1390:42:46;1172;11577:10:53;11589;11502:21;:98::i;:::-;10670:947;;;;;;:::o;13847:478::-;13982:26;14028:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14028:47:53;;-1:-1:-1;14196:21:53;;14192:50;;;14239:2;;14233:4;14192:50;14252:9;-1:-1:-1;;;;;14252:22:53;;14275:4;14281:2;14293:23;:17;:21;:23::i;:::-;14252:66;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:161:149:-;83:20;;143:6;132:18;;122:29;;112:2;;165:1;162;155:12;180:196;;291:2;279:9;270:7;266:23;262:32;259:2;;;312:6;304;297:22;259:2;340:30;360:9;340:30;:::i;381:367::-;;;506:2;494:9;485:7;481:23;477:32;474:2;;;527:6;519;512:22;474:2;555:30;575:9;555:30;:::i;:::-;545:40;;635:2;624:9;620:18;607:32;682:5;675:13;668:21;661:5;658:32;648:2;;709:6;701;694:22;648:2;737:5;727:15;;;464:284;;;;;:::o;753:255::-;;;893:2;881:9;872:7;868:23;864:32;861:2;;;914:6;906;899:22;861:2;-1:-1:-1;;942:16:149;;998:2;983:18;;;977:25;942:16;;977:25;;-1:-1:-1;851:157:149:o;1013:443::-;;1110:5;1104:12;1137:6;1132:3;1125:19;1163:4;1192:2;1187:3;1183:12;1176:19;;1229:2;1222:5;1218:14;1250:3;1262:169;1276:6;1273:1;1270:13;1262:169;;;1337:13;;1325:26;;1371:12;;;;1406:15;;;;1298:1;1291:9;1262:169;;;-1:-1:-1;1447:3:149;;1080:376;-1:-1:-1;;;;;1080:376:149:o;1461:211::-;-1:-1:-1;;;;;1633:32:149;;;;1615:51;;1603:2;1588:18;;1570:102::o;1677:375::-;-1:-1:-1;;;;;1935:15:149;;;1917:34;;1987:15;;;;1982:2;1967:18;;1960:43;2034:2;2019:18;;2012:34;;;;1867:2;1852:18;;1834:218::o;2057:272::-;-1:-1:-1;;;;;2247:32:149;;;;2229:51;;2311:2;2296:18;;2289:34;2217:2;2202:18;;2184:145::o;2334:477::-;;2591:2;2580:9;2573:21;2617:62;2675:2;2664:9;2660:18;2652:6;2617:62;:::i;:::-;2727:9;2719:6;2715:22;2710:2;2699:9;2695:18;2688:50;2755;2798:6;2790;2755:50;:::i;2816:244::-;2986:25;;;3042:2;3027:18;;3020:34;2974:2;2959:18;;2941:119::o;3065:346::-;3267:2;3249:21;;;3306:2;3286:18;;;3279:30;-1:-1:-1;;;3340:2:149;3325:18;;3318:52;3402:2;3387:18;;3239:172::o;3416:344::-;3618:2;3600:21;;;3657:2;3637:18;;;3630:30;-1:-1:-1;;;3691:2:149;3676:18;;3669:50;3751:2;3736:18;;3590:170::o;3765:345::-;3967:2;3949:21;;;4006:2;3986:18;;;3979:30;-1:-1:-1;;;4040:2:149;4025:18;;4018:51;4101:2;4086:18;;3939:171::o;4115:337::-;4317:2;4299:21;;;4356:2;4336:18;;;4329:30;-1:-1:-1;;;4390:2:149;4375:18;;4368:43;4443:2;4428:18;;4289:163::o;4457:339::-;4659:2;4641:21;;;4698:2;4678:18;;;4671:30;-1:-1:-1;;;4732:2:149;4717:18;;4710:45;4787:2;4772:18;;4631:165::o;4801:346::-;5003:2;4985:21;;;5042:2;5022:18;;;5015:30;-1:-1:-1;;;5076:2:149;5061:18;;5054:52;5138:2;5123:18;;4975:172::o;5152:341::-;5354:2;5336:21;;;5393:2;5373:18;;;5366:30;-1:-1:-1;;;5427:2:149;5412:18;;5405:47;5484:2;5469:18;;5326:167::o;5498:347::-;5700:2;5682:21;;;5739:2;5719:18;;;5712:30;5778:25;5773:2;5758:18;;5751:53;5836:2;5821:18;;5672:173::o;5850:196::-;6032:6;6020:19;;;;6002:38;;5990:2;5975:18;;5957:89::o;6497:319::-;6699:25;;;6755:2;6740:18;;6733:34;;;;6798:2;6783:18;;6776:34;6687:2;6672:18;;6654:162::o", "language": "Solidity", "natspec": {"kind": "dev", "methods": {"getLibInfo()": {"notice": "Get a list of deployed library addresses (sorted by library name)"}, "initializeMarkets(uint16,bool)": {"details": "emit:MarketsInitializedauth:none", "notice": "Initialize the market for a given currency id, done once a quarter", "params": {"currencyId": "currency of markets to initialize", "isFirstInit": "true if this is the first time the markets have been initialized"}}, "sweepCashIntoMarkets(uint16)": {"details": "emit:CashSweepIntoMarketsauth:none", "notice": "Sweeps nToken cash balance into markets after accounting for cash withholding. Can be done after fCash residuals are purchased to ensure that markets have maximum liquidity.", "params": {"currencyId": "currency of markets to initialize"}}}, "notice": "Initialize markets is called once every quarter to setup the new markets. Only the nToken account can initialize markets, and this method will be called on behalf of that account. In this action the following will occur:  - nToken Liquidity Tokens will be settled  - Any ifCash assets will be settled  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV    to purchase offsetting positions  - fCash positions are written to storage  - For each market, calculate the proportion of fCash to cash given:     - previous oracle rates     - rate anchor set by governance     - percent of cash to deposit into the market set by governance  - Set new markets and add liquidity tokens to portfolio", "version": 1}, "offset": [2166, 28257], "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB6DD58E EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xC4C96DAE EQ PUSH2 0x72 JUMPI DUP1 PUSH4 0xD0E064C0 EQ PUSH2 0x90 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x6B CALLDATASIZE PUSH1 0x4 PUSH2 0x5C27 JUMP JUMPDEST PUSH2 0xB0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7A PUSH2 0x11A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x5CD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x5C41 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5DB6EAC7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xBB6DD58E SWAP1 PUSH2 0xE7 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x5ECB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x113 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH20 0x0 SWAP1 JUMP JUMPDEST TIMESTAMP PUSH2 0x13B PUSH2 0x5A12 JUMP JUMPDEST PUSH2 0x145 DUP2 DUP6 PUSH2 0x5D7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x18B PUSH2 0x5A5B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x183 JUMPI SWAP1 POP JUMPDEST POP DUP3 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x20 DUP3 ADD MLOAD MLOAD MLOAD ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D7 DUP4 DUP4 DUP7 DUP10 DUP10 PUSH2 0x5F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1ED DUP8 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x66C JUMP JUMPDEST SWAP1 POP PUSH2 0x1F7 PUSH2 0x5A5B JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD PUSH1 0x20 ADD MLOAD DUP2 LT ISZERO PUSH2 0x54B JUMPI PUSH2 0x226 PUSH2 0x217 DUP3 PUSH1 0x1 ADD PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x220 DUP11 PUSH2 0x879 JUMP JUMPDEST SWAP1 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x259 SWAP2 DUP9 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x243 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x2 PUSH1 0xFF AND ADD DUP8 DUP13 PUSH2 0x8B3 JUMP JUMPDEST SWAP1 POP DUP10 DUP1 PUSH2 0x273 JUMPI POP DUP2 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x273 JUMPI POP DUP7 MLOAD PUSH1 0x2 EQ JUMPDEST DUP1 PUSH2 0x284 JUMPI POP PUSH1 0x20 DUP9 ADD MLOAD MLOAD MLOAD DUP3 LT ISZERO JUMPDEST DUP1 PUSH2 0x2B2 JUMPI POP DUP2 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x2B2 JUMPI POP DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x2A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 PUSH2 0x2DA DUP3 DUP8 PUSH1 0x40 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x914 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x327 DUP7 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x311 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x949 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5E94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x52D JUMP JUMPDEST DUP2 PUSH2 0x37E JUMPI DUP7 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x36B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD SWAP3 POP PUSH2 0x45F JUMP JUMPDEST DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x399 DUP8 PUSH2 0x394 DUP12 PUSH2 0x879 JUMP JUMPDEST PUSH2 0xA09 JUMP JUMPDEST SWAP3 POP DUP5 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP4 LT ISZERO PUSH2 0x3DD JUMPI DUP5 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD SWAP3 POP JUMPDEST PUSH2 0x45F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F9 PUSH2 0x3F0 DUP5 PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x220 DUP13 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH2 0x419 DUP2 DUP6 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x40C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA8F JUMP JUMPDEST SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x42B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 LT ISZERO PUSH2 0x45D JUMPI DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x44E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x48B DUP5 DUP8 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x475 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4AD DUP7 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBB2 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x4FC JUMPI PUSH2 0x4C7 DUP7 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4A0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x4DD DUP2 DUP8 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x311 JUMPI INVALID JUMPDEST SWAP4 POP DUP4 PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5D8C JUMP JUMPDEST PUSH2 0x506 DUP3 DUP3 PUSH2 0x914 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 SGT ISZERO PUSH2 0x51D JUMPI PUSH1 0x1 PUSH1 0x40 DUP7 ADD MSTORE JUMPDEST POP PUSH1 0xC0 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP5 ADD DUP10 SWAP1 MSTORE JUMPDEST PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x542 DUP5 DUP13 DUP11 PUSH2 0xBC5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x569 DUP8 PUSH1 0xC0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xC0B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP SWAP3 POP POP POP PUSH2 0x581 DUP8 PUSH1 0xC0 ADD MLOAD DUP12 DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x594 DUP8 PUSH1 0xC0 ADD MLOAD DUP3 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0xE5B JUMP JUMPDEST PUSH32 0xCFFEFF9ACCC9171F01FEC36E09A1A06F0160CE50A8C4C0A2ADFF9CEC562ADF08 DUP11 PUSH1 0x40 MLOAD PUSH2 0x5C3 SWAP2 SWAP1 PUSH2 0x5ECB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5E1 DUP3 DUP3 PUSH2 0xECE JUMP JUMPDEST PUSH2 0x5EA DUP2 PUSH2 0xF6A JUMP JUMPDEST SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO PUSH2 0x613 JUMPI PUSH2 0x602 DUP6 PUSH2 0xF89 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 DUP9 ADD MSTORE PUSH2 0x63B JUMP JUMPDEST PUSH2 0x61D DUP8 DUP7 PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x62D DUP5 PUSH2 0xFFFF AND DUP7 DUP10 DUP10 PUSH2 0x107A JUMP JUMPDEST PUSH2 0x638 DUP8 DUP8 DUP8 PUSH2 0x110A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x64A SWAP1 DUP3 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD DUP3 SWAP1 MSTORE SWAP2 POP PUSH2 0x3E8 DUP3 SGT PUSH2 0x661 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x674 PUSH2 0x5AA3 JUMP JUMPDEST PUSH2 0x67C PUSH2 0x5AA3 JUMP JUMPDEST PUSH2 0x68A DUP5 PUSH2 0xFFFF AND DUP5 PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x0 PUSH2 0x6A1 PUSH2 0xFFFF DUP7 AND DUP6 PUSH2 0x1296 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x6BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6E5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x729 JUMPI PUSH2 0x706 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A0 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x716 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x733 DUP6 PUSH2 0x12C7 JUMP JUMPDEST DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x784 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x771 PUSH2 0x5ACB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x769 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0x7C4 JUMPI PUSH2 0x79E DUP7 DUP3 PUSH2 0x1316 JUMP JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7B1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x78D JUMP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x7E5 JUMPI POP PUSH3 0x76A700 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x7F8 JUMPI POP PUSH3 0xED4E00 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x80C JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x820 JUMPI POP PUSH4 0x3B53800 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0x834 JUMPI POP PUSH4 0x9450C00 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0x848 JUMPI POP PUSH4 0x128A1800 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0x85C JUMPI POP PUSH4 0x25143000 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5DE9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x88B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD SWAP1 SWAP2 SUB SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8CE PUSH4 0x5F5E100 PUSH2 0x8C8 DUP10 DUP10 PUSH2 0x1330 JUMP JUMPDEST SWAP1 PUSH2 0x137E JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP6 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP1 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0x8F9 SWAP3 SWAP2 SWAP1 DUP9 DUP6 PUSH2 0x13AF JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x909 SWAP1 DUP3 PUSH2 0x14B2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x3B9ACA00 DUP3 LT PUSH2 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH4 0x3B9ACA00 DUP2 SWAP1 SUB PUSH2 0x939 DUP6 DUP4 PUSH2 0x1330 JUMP JUMPDEST DUP2 PUSH2 0x940 JUMPI INVALID JUMPDEST SDIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x80 ADD MLOAD GT PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x3B9ACA00 DUP3 GT ISZERO PUSH2 0x96C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP3 GT PUSH2 0x998 JUMPI DUP3 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x991 SWAP2 SWAP1 PUSH2 0x98B SWAP1 DUP6 SWAP1 PUSH2 0x1503 JUMP JUMPDEST SWAP1 PUSH2 0x152A JUMP JUMPDEST SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD DUP3 GT PUSH2 0x9D0 JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x991 SWAP4 SWAP3 PUSH2 0x220 SWAP3 DUP2 SWAP1 SUB SWAP2 PUSH2 0x98B SWAP2 DUP9 SUB SWAP1 DUP6 SWAP1 SUB PUSH2 0x1503 JUMP JUMPDEST PUSH2 0x8AC DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x220 DUP6 PUSH1 0x20 ADD MLOAD PUSH4 0x3B9ACA00 SUB PUSH2 0x98B DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD SUB DUP9 PUSH1 0x20 ADD MLOAD DUP9 SUB PUSH2 0x1503 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 MLOAD LT ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AC DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xA43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xA75 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH3 0xED4E00 DUP8 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x76A700 DUP3 ADD DUP3 DUP8 LT PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP3 LT PUSH2 0xAD8 JUMPI PUSH2 0xACE DUP7 PUSH2 0x220 DUP10 DUP7 SUB PUSH2 0x98B DUP4 DUP8 SUB DUP13 DUP8 SUB PUSH2 0x1503 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEE DUP9 DUP6 SUB PUSH2 0x98B DUP6 DUP11 SUB DUP12 DUP7 SUB PUSH2 0x1503 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT PUSH2 0xAFE JUMPI PUSH1 0x1 PUSH2 0xB02 JUMP JUMPDEST DUP1 DUP8 SUB JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x8AC JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x80 ADD MLOAD GT PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD DUP3 GT PUSH2 0xB4B JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH2 0x991 SWAP2 SWAP1 PUSH2 0x98B SWAP1 DUP6 SWAP1 PUSH2 0x1503 JUMP JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD DUP3 GT PUSH2 0xB83 JUMPI DUP3 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x991 SWAP4 SWAP3 PUSH2 0x220 SWAP3 DUP2 SWAP1 SUB SWAP2 PUSH2 0x98B SWAP2 DUP9 SUB SWAP1 DUP6 SWAP1 SUB PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x8AC SWAP3 SWAP2 PUSH2 0x220 SWAP2 DUP2 SWAP1 SUB SWAP1 PUSH2 0x98B SWAP1 DUP8 SUB PUSH4 0x3B9ACA00 DUP6 SWAP1 SUB PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0xBD4 TIMESTAMP PUSH2 0x879 JUMP JUMPDEST ADD SWAP1 POP PUSH2 0xBE6 DUP5 PUSH2 0xFFFF DUP6 AND DUP4 PUSH2 0x15A7 JUMP JUMPDEST PUSH2 0x113 DUP3 PUSH1 0xC0 ADD MLOAD DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0xC06 DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x160E JUMP JUMPDEST PUSH2 0x161C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xC9C JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0xC47 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC57 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC74 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xC84 JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xC93 JUMPI PUSH2 0xC93 DUP12 DUP4 PUSH2 0x1778 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC15 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xD3F JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCD3 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCE3 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xCF7 JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD09 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xD22 JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0xD1F DUP4 DUP3 PUSH2 0x18C8 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xD2E DUP2 DUP7 DUP7 DUP7 PUSH2 0x19F7 JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xCA0 JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0xD4F PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xE19 JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDA7 JUMPI POP PUSH2 0xE11 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDB9 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xDD7 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDD4 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0xDE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDEC DUP2 DUP10 DUP10 DUP10 PUSH2 0x19F7 JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0xE09 DUP2 DUP5 DUP8 PUSH1 0x8 DUP2 LT PUSH2 0xE03 JUMPI INVALID JUMPDEST ADD PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xD6B JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xE56 DUP4 DUP4 DUP4 PUSH2 0x1A72 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 LT PUSH2 0xE6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE75 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH1 0xFF PUSH1 0x50 SHL NOT PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH10 0xFFFFFFFF000000000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xEDB DUP2 PUSH2 0xFFFF AND PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0xEFB SWAP1 PUSH2 0x1B19 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x0 PUSH2 0xF12 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x1B82 JUMP JUMPDEST POP POP PUSH1 0x80 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT DUP4 AND PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xF46 SWAP1 DUP5 PUSH1 0x0 PUSH2 0x1BE3 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0xF5A SWAP1 DUP7 PUSH2 0x1C76 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP7 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF72 PUSH2 0x5B10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7D DUP4 PUSH2 0x1CCF JUMP JUMPDEST SWAP1 POP PUSH2 0x8AC DUP4 DUP3 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0xF9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x891 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB0 DUP3 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x80 ADD MLOAD LT PUSH2 0xFC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFCF DUP6 DUP6 PUSH2 0x1D24 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFFD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP11 DUP13 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x1E53 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x100E DUP4 DUP6 PUSH2 0x1FAB JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x1020 SWAP1 DUP7 PUSH2 0x1FAB JUMP JUMPDEST PUSH1 0x60 DUP10 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP10 ADD MLOAD DUP10 MLOAD DUP1 MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD PUSH2 0x1045 SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP8 DUP8 PUSH2 0x1FC1 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SLT PUSH2 0x1058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1061 DUP2 PUSH2 0x208C JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 SWAP1 SWAP9 ADD SWAP8 SWAP1 SWAP8 MSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1089 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x20A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1096 DUP6 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1101 JUMPI PUSH2 0x10F9 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x10C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x0 DUP8 DUP8 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x10DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x20B4 SWAP1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x109B JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1127 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x20EB JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 BYTE PUSH3 0xF4240 MUL SWAP1 PUSH1 0x0 SWAP1 ISZERO PUSH2 0x1154 JUMPI PUSH2 0x114F DUP6 PUSH3 0x76A700 PUSH2 0x2120 JUMP JUMPDEST PUSH2 0x1156 JUMP JUMPDEST DUP5 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1163 DUP5 PUSH2 0x2135 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x1229 JUMPI PUSH1 0x0 PUSH2 0x117C DUP10 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x215A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1193 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP11 PUSH2 0x220D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1209 JUMPI PUSH1 0xC0 DUP11 ADD MLOAD DUP11 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x11B3 SWAP2 PUSH2 0xFFFF AND DUP6 PUSH2 0x22B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1207 JUMPI DUP11 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x11CE SWAP1 DUP6 DUP9 PUSH2 0x22F7 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT ISZERO PUSH2 0x11E0 JUMPI POP PUSH1 0x0 PUSH2 0x11ED JUMP JUMPDEST PUSH2 0x11EA DUP2 DUP9 PUSH2 0x2120 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1203 PUSH2 0x11FC DUP4 DUP7 DUP14 DUP6 PUSH2 0x23D7 JUMP JUMPDEST DUP11 SWAP1 PUSH2 0x243B JUMP JUMPDEST SWAP9 POP POP JUMPDEST POP JUMPDEST PUSH2 0x1215 DUP7 DUP5 PUSH1 0x0 PUSH2 0x2451 JUMP JUMPDEST SWAP6 POP PUSH2 0x1220 DUP7 PUSH2 0x2135 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1166 JUMP JUMPDEST DUP8 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x1239 SWAP1 DUP7 PUSH2 0x249C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1251 DUP4 DUP4 PUSH2 0x243B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x126E PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1289 DUP2 DUP7 PUSH2 0x24CD JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x12A2 PUSH2 0x2613 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x12BD DUP2 DUP6 PUSH2 0x24CD JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12D1 PUSH2 0x2620 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 POP PUSH2 0x12EF PUSH2 0x262D JUMP JUMPDEST PUSH2 0xFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP2 SLOAD DUP2 SSTORE PUSH1 0x1 SWAP2 DUP3 ADD SLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH2 0x131E PUSH2 0x5ACB JUMP JUMPDEST PUSH2 0x8AC DUP4 DUP4 PUSH2 0x132B PUSH2 0x262D JUMP JUMPDEST PUSH2 0x263A JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1360 JUMPI DUP2 ISZERO DUP1 PUSH2 0x1352 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x134F JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x135B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7CA JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x1375 JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x1372 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x1394 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x13A7 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH2 0x13BE SWAP1 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2691 JUMP JUMPDEST ISZERO PUSH2 0x13C8 JUMPI PUSH2 0x113 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO PUSH2 0x13F5 JUMPI PUSH1 0x0 PUSH2 0x13E5 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 DUP7 DUP7 PUSH2 0x2691 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x13F3 JUMPI POP PUSH2 0x113 JUMP JUMPDEST POP JUMPDEST PUSH2 0x13FE DUP3 PUSH2 0x27AD JUMP JUMPDEST ISZERO PUSH2 0x1411 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1430 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x1439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP6 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x145D JUMPI PUSH2 0x1457 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x27C3 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x1473 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14DF PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x8C8 DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 SLT PUSH2 0x14EF JUMPI DUP1 PUSH2 0x14FB JUMP JUMPDEST PUSH2 0x14FB DUP2 PUSH1 0x0 NOT PUSH2 0x287C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1512 JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x151F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1541 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x1557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x1563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x1589 JUMPI PUSH2 0x1582 DUP5 PUSH2 0x220 DUP9 DUP9 SUB PUSH2 0x98B DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x1503 JUMP JUMPDEST SWAP1 POP PUSH2 0x663 JUMP JUMPDEST PUSH2 0x1582 PUSH2 0x15A0 DUP8 DUP8 SUB PUSH2 0x98B DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x1503 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x2120 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B1 PUSH2 0x2892 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP4 ADD MLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0xE0 DUP11 ADD MLOAD SWAP6 SWAP7 POP SWAP4 SWAP5 PUSH2 0x1600 SWAP5 DUP7 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x289F JUMP JUMPDEST PUSH2 0x113 DUP2 DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CA PUSH1 0x0 NOT DUP4 PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x162D DUP8 DUP8 PUSH2 0xFFFF AND PUSH2 0x20EB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1639 PUSH2 0x29F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x1674 DUP9 DUP11 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x168C DUP6 DUP4 PUSH2 0x2B0B JUMP JUMPDEST ISZERO PUSH2 0x170F JUMPI DUP3 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x0 PUSH2 0x16A6 DUP10 DUP4 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 POP PUSH2 0x16B1 DUP2 PUSH2 0x2B3B JUMP JUMPDEST DUP6 SLOAD PUSH1 0xF SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP2 AND OR DUP6 SSTORE PUSH2 0x16DE DUP14 DUP14 DUP14 DUP6 DUP6 PUSH2 0x2B65 JUMP JUMPDEST DUP1 PUSH2 0x16F2 JUMPI PUSH2 0x16EF DUP8 DUP6 PUSH1 0x0 PUSH2 0x2451 JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH2 0x1701 DUP14 DUP14 PUSH2 0xFFFF AND DUP10 PUSH2 0x2C3A JUMP JUMPDEST SWAP7 POP PUSH2 0x663 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x1769 JUMPI PUSH2 0x171E DUP8 PUSH2 0x2B3B JUMP JUMPDEST DUP4 SLOAD PUSH1 0xF SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP2 AND OR DUP4 SSTORE PUSH2 0x174C DUP12 DUP12 DUP12 PUSH1 0x0 DUP12 PUSH2 0x2B65 JUMP JUMPDEST PUSH2 0x1758 DUP6 DUP4 PUSH1 0x1 PUSH2 0x2451 JUMP JUMPDEST SWAP5 POP PUSH2 0x1769 DUP12 DUP12 PUSH2 0xFFFF AND DUP8 PUSH2 0x2C3A JUMP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x1786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x1797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17C0 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17D0 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x17EE JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17EB JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x17F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x186A JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1824 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x1851 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x184E JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x1861 JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1808 JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x1883 JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1895 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0xFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x18E5 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF PUSH2 0xFFFF SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0x18EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x190B JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x1914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x192D JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x1936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x195D JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB SLT ISZERO JUMPDEST PUSH2 0x1966 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1A06 DUP9 PUSH2 0x2C94 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x1A14 JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x1A1D JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x1A2D JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x1A3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR SWAP3 SWAP1 SWAP3 OR SWAP4 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xD PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH2 0x2D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1ABB DUP4 PUSH2 0x2D21 JUMP JUMPDEST DUP2 SLOAD PUSH1 0xA SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x2 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AFE PUSH2 0x2D4A JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1B2A PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x30 SHL DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD0 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1B90 PUSH2 0x2D57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 POP JUMP JUMPDEST PUSH2 0x1BEB PUSH2 0x5B3C JUMP JUMPDEST PUSH2 0x1BF3 PUSH2 0x5B3C JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0x1C02 JUMPI SWAP1 POP PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x1C0C DUP6 DUP6 PUSH2 0x2D64 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1C2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C68 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1C55 PUSH2 0x5B64 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1C4D JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C81 PUSH2 0x2D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP5 POP SWAP2 SWAP3 POP DUP4 SLT ISZERO PUSH2 0x1CC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CD7 PUSH2 0x5BA8 JUMP JUMPDEST PUSH2 0x7CA DUP3 TIMESTAMP PUSH2 0x2D70 JUMP JUMPDEST PUSH2 0x1CE9 PUSH2 0x5B10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF8 DUP5 PUSH2 0xFFFF AND PUSH2 0x2E36 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1D2F PUSH2 0x5A5B JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1E49 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x1D66 DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x1D6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D7A DUP3 PUSH2 0x2C94 JUMP JUMPDEST SWAP1 POP DUP8 DUP2 GT ISZERO PUSH2 0x1D89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DA1 DUP6 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP5 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x2E53 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x1DBC DUP4 PUSH1 0x60 ADD MLOAD DUP8 PUSH2 0x2E67 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH2 0x1DCA DUP9 DUP3 PUSH2 0x1FAB JUMP JUMPDEST SWAP8 POP POP DUP8 DUP3 PUSH1 0x20 ADD MLOAD GT PUSH2 0x1E11 JUMPI PUSH1 0xC0 DUP10 ADD MLOAD DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD DUP12 MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x0 SWAP4 PUSH2 0x1DFD SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 DUP15 PUSH2 0x2F0F JUMP JUMPDEST SWAP1 POP PUSH2 0x1E09 DUP8 DUP3 PUSH2 0x1FAB JUMP JUMPDEST SWAP7 POP POP PUSH2 0x1E30 JUMP JUMPDEST PUSH2 0x1E2E DUP10 PUSH1 0xC0 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP13 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x161C JUMP JUMPDEST POP JUMPDEST PUSH1 0x20 DUP10 ADD MLOAD PUSH2 0x1E3F SWAP1 DUP5 PUSH2 0x1778 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1D38 JUMP JUMPDEST POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1E67 DUP10 DUP10 PUSH2 0xFFFF AND PUSH2 0x20EB JUMP JUMPDEST SWAP1 POP PUSH2 0x1E72 DUP7 PUSH2 0xF89 JUMP JUMPDEST SWAP2 POP DUP7 DUP3 LT ISZERO PUSH2 0x1E81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E8D DUP9 DUP5 PUSH2 0x2A03 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x1EA3 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP PUSH2 0x1FA0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EAE DUP4 PUSH2 0x2135 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1EC0 JUMPI POP DUP2 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1F2B JUMPI PUSH1 0x0 PUSH2 0x1ED1 DUP11 DUP4 PUSH2 0x215A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EE2 DUP14 DUP14 DUP5 DUP14 DUP14 PUSH2 0x2F4D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x1EFE JUMPI PUSH2 0x1EF7 DUP9 DUP3 PUSH2 0x1FAB JUMP JUMPDEST SWAP8 POP PUSH2 0x1F0B JUMP JUMPDEST PUSH2 0x1F08 DUP8 DUP3 PUSH2 0x1FAB JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH2 0x1F17 DUP6 DUP5 PUSH1 0x0 PUSH2 0x2451 JUMP JUMPDEST SWAP5 POP PUSH2 0x1F22 DUP6 PUSH2 0x2135 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1EB1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1F8C JUMPI PUSH1 0x0 PUSH2 0x1F40 DUP12 DUP5 PUSH2 0x215A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1F4F DUP9 DUP5 PUSH2 0x2A03 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F69 DUP5 DUP4 PUSH1 0x1 PUSH2 0x2451 JUMP JUMPDEST SWAP4 POP PUSH2 0x1F77 DUP8 DUP7 PUSH1 0x0 PUSH2 0x2451 JUMP JUMPDEST SWAP7 POP PUSH2 0x1F82 DUP8 PUSH2 0x2135 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH2 0x1F2E JUMP JUMPDEST PUSH2 0x1F9B DUP13 DUP13 PUSH2 0xFFFF AND DUP4 PUSH2 0x2C3A JUMP JUMPDEST POP POP POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FD8 DUP4 PUSH2 0x1FD2 DUP8 DUP8 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 POP PUSH2 0x1FE4 DUP9 DUP3 PUSH2 0x2FE5 JUMP JUMPDEST SWAP2 POP DUP4 PUSH1 0x0 SGT ISZERO PUSH2 0x1FF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0x2002 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x0 SLT ISZERO PUSH2 0x201C JUMPI PUSH2 0x2015 DUP6 DUP6 PUSH2 0x1FAB JUMP JUMPDEST SWAP4 POP PUSH2 0x2029 JUMP JUMPDEST PUSH2 0x2026 DUP6 DUP5 PUSH2 0x1FAB JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x2035 DUP6 PUSH2 0x160E JUMP JUMPDEST SLT ISZERO PUSH2 0x2042 JUMPI POP DUP3 PUSH2 0x204E JUMP JUMPDEST PUSH2 0x204B DUP6 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x2080 JUMPI PUSH1 0x20 DUP10 ADD MLOAD DUP10 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x2070 SWAP2 PUSH2 0x8C8 SWAP1 DUP6 SWAP1 PUSH2 0x1330 JUMP JUMPDEST SWAP1 POP PUSH2 0x207E DUP10 DUP10 DUP4 DUP6 PUSH2 0x3024 JUMP JUMPDEST POP JUMPDEST POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH2 0x20C1 DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x3166 JUMP JUMPDEST PUSH2 0x20DA DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x3221 JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20F6 PUSH2 0x32A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x212F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2144 JUMPI POP PUSH1 0x0 PUSH2 0x874 JUMP JUMPDEST PUSH2 0x214D DUP3 PUSH2 0x32B6 JUMP JUMPDEST PUSH1 0xFF SUB PUSH1 0x1 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP3 GT ISZERO PUSH2 0x2175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2180 DUP5 PUSH2 0xF89 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x5A DUP5 GT PUSH2 0x219B JUMPI POP PUSH3 0x15180 DUP4 MUL ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x87 DUP5 GT PUSH2 0x21C3 JUMPI POP PUSH1 0x59 NOT DUP4 ADD PUSH3 0x7E900 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH3 0x76A700 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0xC3 DUP5 GT PUSH2 0x21EC JUMPI POP PUSH1 0x86 NOT DUP4 ADD PUSH3 0x278D00 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0x1DA9C00 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST POP PUSH1 0xC2 NOT DUP4 ADD PUSH3 0x76A700 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0xB1FA800 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x222E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5DBA JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x224F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5E39 JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x2262 JUMPI POP PUSH1 0x0 PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x226D DUP4 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x22A6 JUMPI PUSH2 0x228C PUSH2 0x2285 DUP3 PUSH2 0x7D0 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x89A JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x229E JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2272 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22BD PUSH2 0x29F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x230B DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x334F JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x231A DUP8 PUSH2 0x20A0 JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x233A JUMPI DUP7 MLOAD PUSH2 0x2333 SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x33DE JUMP JUMPDEST SWAP4 POP PUSH2 0xB0D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2345 DUP7 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2355 PUSH2 0x2285 DUP7 PUSH2 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x236D DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x33DE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x238B JUMPI POP POP PUSH1 0x40 DUP1 DUP12 ADD MLOAD ADD MLOAD DUP9 PUSH2 0x23BA JUMP JUMPDEST PUSH2 0x23A1 PUSH2 0x239A PUSH1 0x1 DUP11 SUB PUSH2 0x7D0 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x89A JUMP JUMPDEST SWAP1 POP PUSH2 0x23B7 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP3 DUP9 DUP14 PUSH2 0x33DE JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x23C7 DUP2 DUP6 DUP5 DUP7 DUP16 PUSH2 0x1549 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x23E6 JUMPI POP PUSH1 0x0 PUSH2 0x14FB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23F2 DUP6 DUP6 PUSH2 0x2120 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2400 DUP3 DUP6 PUSH2 0x347D JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SGT ISZERO PUSH2 0x2413 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x241F DUP9 DUP4 PUSH2 0x34EA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 SLT PUSH2 0x242F JUMPI DUP1 PUSH2 0x1239 JUMP JUMPDEST PUSH2 0x1239 DUP2 PUSH1 0x0 NOT PUSH2 0x287C JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0x2466 JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0x246F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x2488 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0x8AC JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND PUSH2 0x8AC JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x14DF SWAP1 PUSH2 0x8C8 DUP6 PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x4 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x24EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2514 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x255A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2604 JUMPI DUP8 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x2574 JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25A2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP8 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x25BF JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25ED JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x2560 JUMP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x5 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1C PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1B PUSH2 0x2CFB JUMP JUMPDEST PUSH2 0x2642 PUSH2 0x5ACB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264D DUP5 PUSH2 0x3503 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP SWAP1 PUSH1 0x4 DUP7 LT PUSH2 0x2673 JUMPI PUSH1 0x1 PUSH2 0x2676 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x2 DUP2 LT PUSH2 0x2683 JUMPI INVALID JUMPDEST ADD SLOAD SWAP1 POP PUSH2 0x12BD DUP3 DUP3 PUSH2 0x353C JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x27A0 JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x26AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP2 PUSH1 0x40 ADD MLOAD EQ ISZERO DUP1 PUSH2 0x26D5 JUMPI POP DUP7 PUSH2 0xFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND EQ ISZERO JUMPDEST DUP1 PUSH2 0x26E4 JUMPI POP DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x26EF JUMPI POP PUSH2 0x2798 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2701 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x271F JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x271C JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x2728 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x273A SWAP1 DUP7 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 POP PUSH2 0x2745 DUP7 PUSH2 0x27AD JUMP JUMPDEST ISZERO PUSH2 0x2758 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x2758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2777 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x2780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x663 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2695 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x7CA JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ PUSH2 0x27DA JUMPI DUP3 MLOAD PUSH1 0x2 MUL PUSH2 0x27DD JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x27F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2832 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x281F PUSH2 0x5B64 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2817 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2874 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x284D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2861 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2838 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLT PUSH2 0x288B JUMPI DUP2 PUSH2 0x8AC JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xA PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x28B7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x28C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x28D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x28E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x28F5 JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x28FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x2912 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x291B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x292C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO DUP1 ISZERO PUSH2 0x29C8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x29D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xC PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2A11 DUP6 PUSH2 0xF89 JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0x2A2B JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x260C JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x2A3F JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x260C JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0x2A5C JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x260C SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0x2A9B JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0x2A8B JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x260C JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0x2ACB JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0x2A8B JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0x2AFB JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0x2A8B JUMPI INVALID JUMPDEST POP PUSH2 0x100 SWAP6 PUSH1 0x0 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x2B20 JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0x2B29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP3 SLT DUP1 ISZERO SWAP1 PUSH2 0x2B5C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP3 SGT ISZERO JUMPDEST PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2B71 DUP4 DUP4 PUSH2 0x365B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2B7E JUMPI POP PUSH2 0x113 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B88 PUSH2 0x36E2 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP2 AND DUP2 SUB SWAP1 PUSH2 0x2BC0 DUP3 DUP6 PUSH2 0x243B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x2BD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BE9 PUSH2 0x2BE4 PUSH2 0x2BDF DUP4 PUSH2 0x160E JUMP JUMPDEST PUSH2 0xBB2 JUMP JUMPDEST PUSH2 0x36EF JUMP JUMPDEST PUSH2 0xFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2C2F DUP10 DUP10 DUP10 DUP8 PUSH2 0x3705 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x14 PUSH2 0x2C45 DUP3 PUSH2 0x378F JUMP JUMPDEST GT ISZERO PUSH2 0x2C63 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5E10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C6D PUSH2 0x32A9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x2CAE JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x2CB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x2CCE JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x874 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE0 PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x7D0 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x8AC SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x220 SWAP1 DUP5 PUSH2 0x2120 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x26 DUP2 GT ISZERO PUSH2 0x2D0D JUMPI INVALID JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x6 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP3 SLT DUP1 ISZERO SWAP1 PUSH2 0x2B5C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP3 SGT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x3 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x11 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2874 DUP4 DUP4 PUSH2 0x385F JUMP JUMPDEST PUSH2 0x2D78 PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D83 DUP5 PUSH2 0x3880 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD MLOAD LT ISZERO PUSH2 0x2DC2 JUMPI PUSH1 0x0 DUP1 PUSH2 0x2D9D DUP7 PUSH2 0x3948 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DAB DUP7 DUP5 DUP4 DUP9 PUSH2 0x39C5 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH2 0x2DBB DUP7 DUP4 DUP6 PUSH2 0x3A69 JUMP JUMPDEST POP POP PUSH2 0x2DCF JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x2DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x2DFD PUSH2 0x2DF8 DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD PUSH2 0x1503 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3C9A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E20 PUSH2 0x2DF8 DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x1503 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x60 ADD MLOAD DUP2 MSTORE POP SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E41 PUSH2 0x3CB0 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2E61 DUP5 DUP5 DUP5 PUSH1 0x1 DUP6 PUSH2 0x3166 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x2E7A JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x0 DUP4 SGT PUSH2 0x2E87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EA6 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x8C8 DUP6 DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x2EC7 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x8C8 DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x2ED9 SWAP1 DUP5 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x2EED SWAP1 DUP3 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2F01 SWAP1 DUP4 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x260C DUP5 PUSH2 0x3CBD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F1D DUP7 DUP7 DUP6 PUSH2 0x3D15 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F2C DUP10 DUP4 DUP8 PUSH2 0x3D3E JUMP JUMPDEST SWAP1 SWAP4 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x2080 JUMPI PUSH2 0x2080 DUP9 DUP9 DUP9 DUP9 DUP6 PUSH2 0x3DA6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F58 PUSH2 0x29F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP12 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH2 0x2F9E DUP5 DUP10 DUP10 DUP10 DUP6 DUP11 PUSH2 0x2F0F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH2 0xFFFF SWAP1 SWAP10 AND DUP3 MSTORE SWAP8 DUP4 MSTORE DUP8 DUP2 KECCAK256 SWAP7 DUP2 MSTORE SWAP6 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x301E JUMPI PUSH2 0x3019 PUSH1 0x1 PUSH2 0x3013 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x8C8 DUP8 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x243B JUMP JUMPDEST PUSH2 0x8AC JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x302E PUSH2 0x3E98 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 POP PUSH5 0xFFFFFFFFFF AND TIMESTAMP EQ PUSH2 0x3059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0xF8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x306E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x3089 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND DUP6 PUSH2 0x1FAB JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x30AB SWAP1 PUSH1 0x1 PUSH1 0x28 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND DUP6 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x9 NOT SLT DUP1 ISZERO PUSH2 0x30BE JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST ISZERO PUSH2 0x30C8 JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 PUSH1 0x9 NOT SLT DUP1 ISZERO PUSH2 0x30D9 JUMPI POP PUSH1 0x0 DUP2 SLT JUMPDEST ISZERO PUSH2 0x30E2 JUMPI POP PUSH1 0x0 JUMPDEST PUSH2 0x30F3 PUSH2 0x30EE DUP4 PUSH2 0xBB2 JUMP JUMPDEST PUSH2 0x3EA5 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x3125 PUSH2 0x30EE DUP3 PUSH2 0xBB2 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x28 SHL MUL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT SWAP1 SWAP2 AND OR DUP4 SSTORE PUSH2 0x315D DUP8 DUP8 DUP7 DUP9 PUSH2 0x3EBB JUMP JUMPDEST PUSH2 0x1101 DUP4 PUSH2 0x3FCF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3170 PUSH2 0x2892 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x320F JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x3217 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x322F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x323E JUMPI POP DUP4 PUSH2 0x663 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x324A DUP4 DUP9 PUSH2 0x2120 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x325D JUMPI DUP6 SWAP2 POP POP PUSH2 0x663 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3269 DUP3 DUP7 PUSH2 0x4094 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x327B PUSH4 0x3B9ACA00 DUP4 PUSH2 0x2120 JUMP JUMPDEST SWAP1 POP PUSH2 0x329C PUSH4 0x3B9ACA00 PUSH2 0x98B PUSH2 0x3292 DUP11 DUP6 PUSH2 0x1503 JUMP JUMPDEST PUSH2 0x220 DUP13 DUP8 PUSH2 0x1503 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xB PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x32C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x32D5 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0x32E8 JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x32FC JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x330E JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x331F JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x332F JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x333F JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x874 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x335F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x336D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3378 DUP5 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x33D0 JUMPI PUSH1 0x0 PUSH2 0x3399 PUSH2 0x3392 DUP4 PUSH2 0x7D0 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x89A JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x33B1 JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x33D6 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x33C7 JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x33D6 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x337D JUMP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x33E9 PUSH2 0x2892 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x33FA DUP6 PUSH2 0x879 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x3461 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5D5C JUMP JUMPDEST PUSH2 0x346E DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x3221 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x349A PUSH2 0x3495 PUSH4 0x1DA9C00 PUSH2 0x98B DUP7 DUP9 PUSH2 0x1503 JUMP JUMPDEST PUSH2 0x40AD JUMP JUMPDEST SWAP1 POP PUSH2 0x34AC DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x40CB JUMP JUMPDEST SWAP1 POP PUSH2 0x34BF PUSH2 0x34BA DUP3 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x4140 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D1 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x4195 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x34DE DUP3 PUSH2 0x41CB JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x34F9 DUP5 DUP5 PUSH2 0x1330 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x137E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 LT PUSH2 0x3512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP3 GT ISZERO PUSH2 0x3520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x3531 JUMPI PUSH1 0x4 DUP3 SUB PUSH2 0x3533 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 MUL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3544 PUSH2 0x5ACB JUMP JUMPDEST PUSH1 0x64 PUSH4 0x3B9ACA00 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x20 DUP2 LT PUSH2 0x355A JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x3563 JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x64 PUSH4 0x3B9ACA00 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x1 ADD PUSH1 0x20 DUP2 LT PUSH2 0x357F JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x3588 JUMPI INVALID JUMPDEST DIV DUP2 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x35AD DUP3 PUSH1 0x2 DUP6 PUSH1 0xFF AND ADD PUSH1 0x20 DUP2 LT PUSH2 0x35A7 JUMPI INVALID JUMPDEST BYTE PUSH2 0x41D4 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 SWAP1 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x3 ADD PUSH1 0x20 DUP2 LT PUSH2 0x35CA JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x35D3 JUMPI INVALID JUMPDEST DIV PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x100 SWAP1 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x4 ADD PUSH1 0x20 DUP2 LT PUSH2 0x35F4 JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x35FD JUMPI INVALID JUMPDEST DIV PUSH1 0x60 DUP3 ADD MSTORE PUSH3 0x7A120 DUP3 PUSH1 0xFF DUP6 AND PUSH1 0x5 ADD PUSH1 0x20 DUP2 LT PUSH2 0x3619 JUMPI INVALID JUMPDEST BYTE MUL PUSH1 0xA0 DUP3 ADD MSTORE PUSH3 0x2625A0 DUP3 PUSH1 0xFF DUP6 AND PUSH1 0x6 ADD PUSH1 0x20 DUP2 LT PUSH2 0x3636 JUMPI INVALID JUMPDEST BYTE MUL PUSH1 0xC0 DUP3 ADD MSTORE DUP2 PUSH1 0xFF DUP5 AND PUSH1 0x7 ADD PUSH1 0x20 DUP2 LT PUSH2 0x364F JUMPI INVALID JUMPDEST BYTE PUSH1 0xE0 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 EQ DUP1 PUSH2 0x3678 JUMPI POP PUSH1 0x0 DUP4 SLT ISZERO DUP1 ISZERO PUSH2 0x3678 JUMPI POP PUSH1 0x0 DUP3 SLT ISZERO JUMPDEST ISZERO PUSH2 0x3685 JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO DUP1 ISZERO PUSH2 0x3696 JUMPI POP DUP2 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x36A2 JUMPI POP DUP2 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO DUP1 ISZERO PUSH2 0x36B3 JUMPI POP DUP3 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x36C1 JUMPI PUSH2 0x991 DUP3 PUSH2 0x160E JUMP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO DUP1 ISZERO PUSH2 0x36D3 JUMPI POP PUSH1 0x0 DUP3 SGT ISZERO JUMPDEST ISZERO PUSH2 0x4B JUMPI PUSH2 0x991 DUP4 DUP4 PUSH2 0x243B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x20 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3713 DUP6 DUP6 DUP6 PUSH2 0x4208 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SLT ISZERO PUSH2 0x372B JUMPI DUP8 SWAP2 POP PUSH2 0x372E JUMP JUMPDEST POP DUP7 JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x377D SWAP3 SWAP2 SWAP1 PUSH2 0x5D29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x386C DUP5 DUP5 PUSH2 0x42ED JUMP JUMPDEST SWAP2 POP PUSH2 0x3877 DUP3 PUSH2 0x4405 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3888 PUSH2 0x5BC9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3892 PUSH2 0x3E98 JUMP JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP7 MSTORE PUSH1 0x1 PUSH1 0x28 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP1 DUP2 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP5 AND SWAP3 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL DUP3 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP2 DIV SWAP1 SWAP2 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xF0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x12C MUL SWAP1 SWAP3 AND PUSH2 0x100 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3954 DUP4 PUSH2 0x45C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xEF81F216 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x398D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14FB SWAP2 SWAP1 PUSH2 0x5C7B JUMP JUMPDEST PUSH2 0x39CD PUSH2 0x5BC9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x39DD DUP9 DUP7 DUP10 PUSH2 0x45F6 JUMP JUMPDEST PUSH1 0xC0 DUP12 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 DUP11 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP10 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x3A01 SWAP1 DUP4 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x3A2F JUMPI PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x3A2C SWAP1 PUSH2 0x3A26 DUP10 DUP3 PUSH2 0x2120 JUMP JUMPDEST SWAP1 PUSH2 0x4701 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x3A4F PUSH2 0x3A44 PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x89A JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD SWAP1 PUSH2 0x4718 JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MSTORE POP POP PUSH1 0x80 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP POP DUP3 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A73 PUSH2 0x3E98 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x3A97 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x208C JUMP JUMPDEST DUP2 SLOAD PUSH5 0xFFFFFFFFFF NOT AND PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x3ABC SWAP1 PUSH2 0x36EF JUMP JUMPDEST PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x3AEC SWAP1 PUSH2 0x36EF JUMP JUMPDEST DUP2 PUSH1 0x2 ADD PUSH1 0xA PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x3B21 DUP3 PUSH1 0xE0 ADD MLOAD PUSH2 0x36EF JUMP JUMPDEST DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x3B56 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3EA5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x28 SHL MUL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x3B90 SWAP1 PUSH2 0x3EA5 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x3BC4 SWAP1 PUSH2 0x3EA5 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x80 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x3BFC SWAP1 PUSH2 0x4735 JUMP JUMPDEST DUP2 SLOAD PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xD8 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xD8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE DUP3 ISZERO PUSH2 0x3C48 JUMPI PUSH1 0x0 PUSH2 0x3C2D DUP5 PUSH2 0x3C9A JUMP JUMPDEST SWAP1 POP PUSH2 0x3C39 DUP6 DUP3 PUSH2 0x4748 JUMP JUMPDEST PUSH2 0x3C46 PUSH2 0xFEE DUP7 DUP4 PUSH2 0x477F JUMP JUMPDEST POP JUMPDEST DUP4 PUSH2 0xFFFF AND PUSH32 0xEF25641E225E493886510CA1AD6584FA7B442B9FEA820A29D1DE3CE27D270FD2 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0xC0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C8C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5EDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x9 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC8 DUP3 PUSH2 0x47FF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3D07 DUP3 DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH4 0xFFFFFFFF AND DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x289F JUMP JUMPDEST PUSH2 0xE56 DUP3 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x29B0 JUMP JUMPDEST PUSH2 0x3D1D PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D29 DUP6 DUP6 PUSH2 0x4803 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 PUSH2 0x2874 JUMPI PUSH2 0x663 DUP6 DUP6 DUP6 PUSH2 0x4896 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D4B DUP5 DUP5 PUSH2 0x249C JUMP JUMPDEST SWAP2 POP PUSH2 0x3D57 DUP5 DUP4 PUSH2 0x2FE5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x33D6 JUMPI PUSH2 0x3D9C PUSH1 0x1 PUSH2 0x3013 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x8C8 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x3D96 DUP11 PUSH1 0x20 ADD MLOAD PUSH2 0x8C8 DUP13 PUSH1 0x0 ADD MLOAD DUP12 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1330 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB2 DUP6 DUP6 PUSH2 0x4A2F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 SLT ISZERO PUSH2 0x3DC4 JUMPI PUSH1 0x1 PUSH1 0x40 SHL OR JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP5 PUSH2 0x3DFC DUP9 PUSH2 0x4A4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E0A SWAP3 SWAP2 SWAP1 PUSH2 0x5D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 PUSH2 0x3E21 PUSH1 0x0 DUP5 SLT DUP8 PUSH2 0x4A6E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23DE6651 PUSH2 0x5E7 DUP10 PUSH2 0x3E3F DUP8 PUSH2 0x4A4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E5D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1D PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3EC5 PUSH2 0x4ACE JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x3EED PUSH2 0x4ADB JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP DUP2 SWAP1 PUSH4 0xAD1C095D SWAP1 PUSH2 0x3F35 SWAP1 DUP10 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5D10 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F63 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 POP PUSH4 0xAD1C095D SWAP2 POP PUSH2 0x3F95 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x5D10 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3FC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH2 0x400B SWAP2 PUSH1 0x1 PUSH1 0x28 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND SWAP1 PUSH2 0x3D96 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x2 DUP5 ADD SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x4045 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND SWAP1 PUSH2 0x3D96 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH2 0x1330 JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x407C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV DUP3 AND ADD AND PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x1330 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4089 DUP5 DUP5 PUSH2 0x243B JUMP JUMPDEST SGT ISZERO PUSH2 0x2E61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x40A7 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1503 JUMP JUMPDEST DUP4 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x40C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x40DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x40F3 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x4115 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT EQ ISZERO PUSH2 0x4139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x4155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x4172 JUMPI POP PUSH1 0x0 PUSH2 0x874 JUMP JUMPDEST PUSH2 0x7CA PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x4AE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x4115 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH1 0x96 LT PUSH2 0x41EF JUMPI PUSH1 0xFF DUP3 AND PUSH3 0x2625A0 MUL PUSH2 0x7CA JUMP JUMPDEST POP PUSH1 0x95 NOT PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND ADD PUSH3 0xE4E1C0 MUL PUSH4 0x165A0BC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP3 SWAP2 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x423C DUP8 DUP8 PUSH2 0x4A2F JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x424C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x40 SHL DUP2 OR DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x426C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH2 0x42A5 DUP7 PUSH2 0x4A4D JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x42B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x42C7 DUP7 PUSH2 0x4A4D JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x42D4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP2 SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x4300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x430A PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x433F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4379 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4366 PUSH2 0x5B64 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x435E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x661 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x8 DUP2 LT PUSH2 0x4398 JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43A9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x437F JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x444B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x44A8 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x4488 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x5598 JUMP JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4494 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4451 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x45BF JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x44EE JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x44CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x44E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x45B6 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x44FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4516 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x452D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4540 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x455D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4574 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x458B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x459E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x44B6 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x44AC JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x45D1 PUSH2 0x55C1 JUMP JUMPDEST PUSH2 0xFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x4609 DUP10 DUP9 PUSH2 0x55CE JUMP JUMPDEST DUP10 MLOAD SWAP1 SWAP6 POP SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x4630 SWAP1 PUSH2 0x4625 SWAP1 DUP12 SWAP1 PUSH2 0x2120 JUMP JUMPDEST PUSH4 0x3B9ACA00 SWAP1 PUSH2 0x1503 JUMP JUMPDEST SWAP1 POP PUSH2 0x466A PUSH2 0x465F PUSH4 0x1DA9C00 PUSH2 0x4647 DUP6 DUP6 PUSH2 0x1503 JUMP JUMPDEST DUP2 PUSH2 0x464E JUMPI INVALID JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP2 SWAP1 DIV PUSH2 0x89A JUMP JUMPDEST PUSH1 0xE0 DUP11 ADD MLOAD SWAP1 PUSH2 0x4718 JUMP JUMPDEST SWAP7 POP PUSH2 0x468C PUSH2 0x4681 PUSH4 0x1DA9C00 PUSH2 0x4647 DUP8 DUP6 PUSH2 0x1503 JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MLOAD SWAP1 PUSH2 0x4718 JUMP JUMPDEST SWAP6 POP DUP2 DUP4 EQ ISZERO PUSH2 0x46A3 JUMPI POP PUSH1 0x0 SWAP4 POP PUSH2 0x46F8 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46C5 PUSH2 0x46BA PUSH4 0x1DA9C00 PUSH2 0x4647 DUP8 DUP7 PUSH2 0x1503 JUMP JUMPDEST PUSH1 0xE0 DUP12 ADD MLOAD SWAP1 PUSH2 0x4718 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x46D3 DUP10 DUP4 PUSH2 0x2120 JUMP JUMPDEST SWAP1 POP PUSH2 0x46F0 DUP9 PUSH2 0x98B DUP4 DUP14 PUSH1 0x40 ADD MLOAD PUSH2 0x1503 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x40A7 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x4727 DUP5 DUP5 PUSH2 0x1503 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x4756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4764 PUSH2 0xFEE DUP5 PUSH2 0x1C76 JUMP JUMPDEST SWAP1 POP PUSH2 0x4770 DUP2 DUP4 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 POP PUSH2 0xE56 PUSH2 0xFEE DUP5 DUP4 PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4789 PUSH2 0x4ACE JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP DUP2 SWAP1 PUSH4 0xAD1C095D SWAP1 PUSH2 0x47D1 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5D10 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3217 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x480B PUSH2 0x5BA8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4816 PUSH2 0x5669 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xF0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP4 POP SWAP1 SWAP2 POP DUP3 ISZERO PUSH2 0x488D JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH2 0x4868 SWAP2 AND DUP3 PUSH2 0x1503 JUMP JUMPDEST DUP6 MSTORE DUP2 SLOAD PUSH2 0x4886 SWAP1 PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND DUP3 PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE POP JUMPDEST POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x489E PUSH2 0x5BA8 JUMP JUMPDEST PUSH2 0x48A8 DUP5 DUP4 PUSH2 0x2D70 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x48B5 DUP6 PUSH2 0x3880 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x48C1 PUSH2 0x5669 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP6 PUSH2 0x48EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP6 EQ PUSH2 0x48F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x0 LT PUSH2 0x4904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP7 GT ISZERO PUSH2 0x4911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x0 SLT PUSH2 0x491F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x0 SLT PUSH2 0x4930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x493D DUP4 PUSH1 0xA0 ADD MLOAD PUSH2 0x36EF JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x4974 SWAP1 PUSH2 0x36EF JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x499D SWAP1 PUSH2 0x36EF JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF PUSH1 0xF0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT SWAP1 SWAP2 AND OR AND PUSH1 0x1 PUSH1 0xF0 SHL OR DUP2 SSTORE PUSH2 0x49DE DUP8 DUP8 DUP7 PUSH2 0x5676 JUMP JUMPDEST DUP6 DUP8 PUSH2 0xFFFF AND PUSH32 0x29FD83C1093C9721D6046038C76B6BDDF0DC0C5DAC3ECBFA23F8EB994EC61613 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x4A1D SWAP3 SWAP2 SWAP1 PUSH2 0x5D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP4 SWAP1 SHL AND PUSH1 0x8 DUP3 SWAP1 SHL OR PUSH1 0x1 OR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x4A67 JUMPI PUSH2 0x4A60 DUP3 PUSH2 0x160E JUMP JUMPDEST SWAP1 POP PUSH2 0x874 JUMP JUMPDEST POP DUP1 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4AA0 JUMPI PUSH2 0x4A7D PUSH2 0x4ACE JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x4AA8 PUSH2 0x4ADB JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x21 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x22 PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x4AFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x4B1A JUMPI POP PUSH1 0x0 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH8 0x8000000000000000 DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4B4C JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4B79 JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4BA6 JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4BD3 JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C00 JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C2D JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C5A JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C83 JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4CAF JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4CDB JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D07 JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D33 JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D5F JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D8B JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4DB7 JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x30 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4DE0 JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E0B JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E36 JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E61 JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E8C JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4EB7 JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4EE2 JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F0D JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x28 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F36 JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F60 JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F8A JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4FB4 JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4FDE JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5008 JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5032 JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x505C JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5086 JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x50AF JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x50D8 JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5101 JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x512A JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5153 JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x517C JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x51A5 JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x51CE JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x51F6 JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x521E JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5246 JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x526E JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5296 JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x52BE JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x52E6 JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x530E JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5335 JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x535C JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5383 JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x53AA JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x53D1 JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x53F8 JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x541F JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5446 JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x546C JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5492 JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x54B8 JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x54DE JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5504 JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x552A JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5550 JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5576 JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1F PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x561B JUMPI PUSH2 0x5618 PUSH2 0x55FF DUP7 PUSH1 0xC0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x1503 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH2 0x5612 SWAP2 PUSH2 0x1503 JUMP JUMPDEST SWAP1 PUSH2 0x4094 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x5626 DUP8 PUSH2 0x57CE JUMP JUMPDEST SWAP1 POP PUSH2 0x5632 DUP2 DUP4 PUSH2 0x949 JUMP JUMPDEST SWAP5 POP DUP2 ISZERO PUSH2 0x5649 JUMPI PUSH2 0x5646 DUP2 DUP7 PUSH1 0x1 PUSH2 0x5801 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD ISZERO PUSH2 0x5660 JUMPI PUSH2 0x565D DUP6 DUP4 PUSH2 0x5879 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1E PUSH2 0x2CFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5680 PUSH2 0x36E2 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND SWAP1 SUB PUSH2 0x56B5 PUSH2 0x5A5B JUMP JUMPDEST PUSH2 0x56C5 DUP2 PUSH2 0xFFFF DUP10 AND DUP9 DUP1 PUSH2 0x2E53 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD ISZERO PUSH2 0x56E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5E69 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56FB DUP7 PUSH2 0x56F6 DUP6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x249C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5711 PUSH2 0x570C DUP9 DUP7 PUSH2 0x5892 JUMP JUMPDEST PUSH2 0x160E JUMP JUMPDEST SWAP1 POP PUSH2 0x5721 PUSH2 0x5E7 DUP11 DUP4 DUP6 PUSH2 0x3024 JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND PUSH1 0x0 SWAP1 DUP2 SUB SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV SWAP1 SWAP2 AND SWAP1 DUP3 SLT DUP1 PUSH2 0x5752 JUMPI POP DUP1 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x5796 JUMPI PUSH1 0x0 PUSH2 0x5763 DUP11 DUP5 PUSH2 0x249C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5771 DUP4 DUP4 PUSH2 0x1FAB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SLT ISZERO PUSH2 0x5786 JUMPI PUSH2 0x5786 DUP14 DUP3 PUSH2 0x4748 JUMP JUMPDEST PUSH2 0x5793 DUP14 DUP14 DUP7 DUP6 DUP6 PUSH2 0x58EE JUMP JUMPDEST POP POP JUMPDEST POP POP POP PUSH2 0xFFFF SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP8 DUP3 MSTORE SWAP7 SWAP1 SWAP5 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x57D6 PUSH2 0x5ACB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E0 PUSH2 0x262D JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 POP PUSH2 0x8AC SWAP1 DUP3 PUSH2 0x353C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5820 PUSH1 0x64 PUSH2 0x98B DUP8 PUSH1 0xE0 ADD MLOAD DUP8 PUSH2 0x1503 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0xA0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x5835 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD DUP2 GT ISZERO PUSH2 0x5848 JUMPI POP PUSH1 0xC0 DUP5 ADD MLOAD JUMPDEST DUP3 ISZERO PUSH2 0x585F JUMPI PUSH2 0x5858 DUP5 DUP3 PUSH2 0x89A JUMP JUMPDEST SWAP2 POP PUSH2 0x2874 JUMP JUMPDEST DUP4 DUP2 GT PUSH2 0x586E JUMPI DUP1 DUP5 SUB PUSH2 0x663 JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x5888 DUP5 DUP5 PUSH2 0x1503 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SGT ISZERO DUP1 ISZERO PUSH2 0x58A5 JUMPI POP PUSH1 0xA DUP3 SLT JUMPDEST ISZERO PUSH2 0x58B2 JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP3 SLT PUSH2 0x58BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AC PUSH1 0x1 PUSH2 0x3013 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x8C8 PUSH15 0xC097CE7BC90715B34B9F1000000000 DUP8 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0x58FF DUP8 DUP8 PUSH2 0x4A2F JUMP JUMPDEST OR SWAP1 POP PUSH1 0x0 PUSH2 0x5E7 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP5 PUSH2 0x5933 DUP10 PUSH2 0x4A4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5941 SWAP3 SWAP2 SWAP1 PUSH2 0x5D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x5956 PUSH2 0x5E7 DUP8 DUP6 PUSH2 0x477F JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x596F JUMPI PUSH2 0x596F PUSH2 0x5E7 PUSH2 0xFEE DUP9 DUP6 PUSH2 0x5977 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5981 PUSH2 0x4ACE JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SLT ISZERO PUSH2 0x59AC JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23DE6651 DUP7 DUP7 PUSH2 0x59C6 DUP7 PUSH2 0x4A4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x5A25 PUSH2 0x5B10 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5A32 PUSH2 0x5B3C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x5B2F PUSH2 0x5BA8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5BA3 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5C38 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8AC DUP3 PUSH2 0x5C15 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5C53 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5C5C DUP4 PUSH2 0x5C15 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5C70 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5C8D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5CCD JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5CB1 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x5D3C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x5C9E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x663 DUP2 DUP6 PUSH2 0x5C9E JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x4F7261636C652072617465206F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x4D75737420696E6974206D61726B657473 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494D3A20696D706C6965642072617465206661696C6564000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 ADDMOD 0x25 0xD0 0xE 0xD4 0x27 0xDF ADDMOD 0xE7 0xA7 0x49 0xEE 0xB8 0xFC MUL DUP3 PUSH27 0x73BC697F53C8A8FE79B736EF289B64736F6C634300070600330000 ", "sha1": "630028d0dfef3054b5a4f1324e97351fd11561ff", "source": "// SPDX-License-Identifier: BSUL-1.1\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {\n    PrimeRate,\n    PortfolioState,\n    MarketParameters,\n    BalanceState,\n    CashGroupParameters,\n    nTokenPortfolio,\n    InterestRateParameters,\n    PortfolioAsset\n} from \"../../global/Types.sol\";\nimport {Constants} from \"../../global/Constants.sol\";\nimport {SafeInt256} from \"../../math/SafeInt256.sol\";\nimport {SafeUint256} from \"../../math/SafeUint256.sol\";\nimport {Bitmap} from \"../../math/Bitmap.sol\";\n\nimport {Market} from \"../../internal/markets/Market.sol\";\nimport {DateTime} from \"../../internal/markets/DateTime.sol\";\nimport {CashGroup} from \"../../internal/markets/CashGroup.sol\";\nimport {InterestRateCurve} from \"../../internal/markets/InterestRateCurve.sol\";\nimport {PrimeRateLib} from \"../../internal/pCash/PrimeRateLib.sol\";\nimport {BalanceHandler} from \"../../internal/balances/BalanceHandler.sol\";\nimport {PortfolioHandler} from \"../../internal/portfolio/PortfolioHandler.sol\";\nimport {BitmapAssetsHandler} from \"../../internal/portfolio/BitmapAssetsHandler.sol\";\nimport {SettleBitmapAssets} from \"../../internal/settlement/SettleBitmapAssets.sol\";\nimport {nTokenHandler} from \"../../internal/nToken/nTokenHandler.sol\";\nimport {AssetHandler} from \"../../internal/valuation/AssetHandler.sol\";\n\nimport {nTokenMintAction} from \"./nTokenMintAction.sol\";\n\n/// @notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n/// can initialize markets, and this method will be called on behalf of that account. In this action\n/// the following will occur:\n///  - nToken Liquidity Tokens will be settled\n///  - Any ifCash assets will be settled\n///  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n///    to purchase offsetting positions\n///  - fCash positions are written to storage\n///  - For each market, calculate the proportion of fCash to cash given:\n///     - previous oracle rates\n///     - rate anchor set by governance\n///     - percent of cash to deposit into the market set by governance\n///  - Set new markets and add liquidity tokens to portfolio\nlibrary InitializeMarketsAction {\n    using Bitmap for bytes32;\n    using SafeUint256 for uint256;\n    using SafeInt256 for int256;\n    using PortfolioHandler for PortfolioState;\n    using Market for MarketParameters;\n    using BalanceHandler for BalanceState;\n    using CashGroup for CashGroupParameters;\n    using PrimeRateLib for PrimeRate;\n    using nTokenHandler for nTokenPortfolio;\n    using InterestRateCurve for InterestRateParameters;\n\n    // Cash balances are always in 8 decimal precision so some minimum amount\n    // of cash is required before we can initialize markets.\n    int256 private constant MIN_CASH_REQUIRED = 1_000;\n\n    event MarketsInitialized(uint16 currencyId);\n\n    struct GovernanceParameters {\n        int256[] depositShares;\n        int256[] leverageThresholds;\n        uint256[] proportions;\n        InterestRateParameters[] interestRateParams;\n    }\n\n    function _getGovernanceParameters(uint16 currencyId, uint256 maxMarketIndex)\n        private\n        returns (GovernanceParameters memory)\n    {\n        GovernanceParameters memory params;\n        (params.depositShares, params.leverageThresholds) = nTokenHandler.getDepositParameters(\n            currencyId,\n            maxMarketIndex\n        );\n\n        int256[] memory _proportions = nTokenHandler.getInitializationParameters(currencyId, maxMarketIndex);\n        // NOTE: this conversion from int256 => uint256 is done for legacy reasons\n        params.proportions = new uint256[](_proportions.length);\n        for (uint256 i = 0; i < _proportions.length; i++) {\n            params.proportions[i] = _proportions[i].toUint();\n        }\n\n        // Copies the next interest rate parameters set by governance into the\n        // \"active\" interest rate parameters for the current quarter.\n        InterestRateCurve.setActiveInterestRateParameters(currencyId);\n        params.interestRateParams = new InterestRateParameters[](maxMarketIndex);\n        // maxMarketIndex is 1-indexed\n        for (uint256 i = 1; i <= maxMarketIndex; i++) {\n            params.interestRateParams[i - 1] = InterestRateCurve.getActiveInterestRateParameters(\n                currencyId,\n                i\n            );\n        }\n\n        return params;\n    }\n\n    function _settleNTokenLiquidityTokens(\n        nTokenPortfolio memory nToken,\n        uint256 blockTime\n    ) internal returns (int256 withdrawnCash, int256 settledCashFromfCash) {\n        MarketParameters memory market;\n        PortfolioAsset[] memory storedAssets = nToken.portfolioState.storedAssets;\n\n        // The nToken portfolio only ever has liquidity tokens sorted in ascending order\n        for (uint256 i; i < storedAssets.length; i++) {\n            PortfolioAsset memory asset = storedAssets[i];\n            // Must be liquidity token type\n            require(AssetHandler.isLiquidityToken(asset.assetType));\n            {\n                uint256 settleDate = AssetHandler.getSettlementDate(asset);\n                // Settlement date is on block time exactly\n                require(settleDate <= blockTime);\n                Market.loadSettlementMarket(market, asset.currencyId, asset.maturity, settleDate);\n            }\n\n            int256 fCash;\n            {\n                int256 primeCash;\n                (primeCash, fCash) = market.removeLiquidity(asset.notional);\n                withdrawnCash = withdrawnCash.add(primeCash);\n            }\n\n            // If the fCash has matured (as it will for the 3 month market), then convert it\n            // to a settled prime cash (positive) balance and return it. We do not net it off\n            // against the portfolio because that would cause an improper totalDebtSupply update\n            if (asset.maturity <= blockTime) {\n                // NOTE: convertSettledfCash will set the prime settlement rate\n                int256 settledPrimeCash = nToken.cashGroup.primeRate.convertSettledfCash(\n                    nToken.tokenAddress, asset.currencyId, asset.maturity, fCash, blockTime\n                );\n                settledCashFromfCash = settledCashFromfCash.add(settledPrimeCash);\n            } else {\n                BitmapAssetsHandler.addifCashAsset(\n                    nToken.tokenAddress,\n                    asset.currencyId,\n                    asset.maturity,\n                    nToken.lastInitializedTime,\n                    fCash\n                );\n            }\n\n            nToken.portfolioState.deleteAsset(i);\n        }\n    }\n\n    function _settleNTokenPortfolio(nTokenPortfolio memory nToken, uint256 blockTime) private {\n        // nToken never has idiosyncratic cash between 90 day intervals but since it also has a\n        // bitmap fCash assets. We don't set the pointer to the settlement date of the liquidity\n        // tokens (1 quarter away), instead we set it to the current block time. This is a bit\n        // esoteric but will ensure that ifCash is never improperly settled.\n\n        // If lastInitializedTime == reference time then this will fail, that is the correct\n        // behavior since initialization begins at lastInitializedTime. That means that markets\n        // cannot be re-initialized during a single block (this is the correct behavior). If\n        // lastInitializedTime >= reference time then the markets have already been initialized\n        // for the quarter.\n        uint256 referenceTime = DateTime.getReferenceTime(blockTime);\n        require(nToken.lastInitializedTime < referenceTime);\n\n        // All liquidity tokens are removed during initialize markets, the nToken will receive\n        // cash and fCash positions as a result. The three month fCash position will settle and\n        // the value from that will be in settledCashFromfCash.\n        (int256 withdrawnCash, int256 settledCashFromfCash) = _settleNTokenLiquidityTokens(nToken, blockTime);\n\n        // Settles any fCash positions in the nToken. Generally speaking, this will result in the\n        // nToken's negative 3 month fCash position being settled.\n        (int256 settledPositiveCash, int256 settledNegativeCash, uint256 blockTimeUTC0) =\n            SettleBitmapAssets.settleBitmappedCashGroup(\n                nToken.tokenAddress,\n                nToken.cashGroup.currencyId,\n                nToken.lastInitializedTime,\n                blockTime,\n                nToken.cashGroup.primeRate\n            );\n\n        // Both of these will be greater than or equal to zero\n        settledPositiveCash = settledPositiveCash.add(settledCashFromfCash);\n\n        // Add all the cash withdrawn from the market first\n        nToken.cashBalance = nToken.cashBalance.add(withdrawnCash);\n\n        // convertToStorageInSettlement will return the final stored balance after all the\n        // settled balances are applied.\n        nToken.cashBalance = nToken.cashGroup.primeRate.convertToStorageInSettlement(\n            nToken.tokenAddress,\n            nToken.cashGroup.currencyId,\n            nToken.cashBalance, // previous cash balance\n            settledPositiveCash,\n            settledNegativeCash\n        );\n\n        // The nToken must always have a strictly positive cash balance\n        require(nToken.cashBalance > 0);\n\n        // The ifCashBitmap has been updated to reference this new settlement time\n        nToken.lastInitializedTime = blockTimeUTC0.toUint40();\n    }\n\n    /// @notice Special method to get previous markets, normal usage would not reference previous markets\n    /// in this way\n    function _getPreviousMarkets(\n        uint256 currencyId,\n        uint256 blockTime,\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets\n    ) private view {\n        uint256 rateOracleTimeWindow = nToken.cashGroup.getRateOracleTimeWindow();\n        // This will reference the previous settlement date to get the previous markets\n        uint256 settlementDate = DateTime.getReferenceTime(blockTime);\n\n        // Assume that assets are stored in order and include all assets of the previous market\n        // set. This will account for the potential that markets.length is greater than the previous\n        // markets when the maxMarketIndex is increased (increasing the overall number of markets).\n        // We don't fetch the 3 month market (i = 0) because it has settled and will not be used for\n        // the subsequent calculations. Since nTokens never allow liquidity to go to zero then we know\n        // there is always a matching token for each market.\n        for (uint256 i = 1; i < nToken.portfolioState.storedAssets.length; i++) {\n            previousMarkets[i].loadMarketWithSettlementDate(\n                currencyId,\n                // These assets will reference the previous liquidity tokens\n                nToken.portfolioState.storedAssets[i].maturity,\n                blockTime,\n                // No liquidity tokens required for this process\n                false,\n                rateOracleTimeWindow,\n                settlementDate\n            );\n        }\n    }\n\n    function _calculateNetPrimeCashAvailable(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime,\n        uint16 currencyId,\n        bool isFirstInit\n    ) private returns (int256 netPrimeCashAvailable) {\n        int256 primeCashWithholding;\n\n        if (isFirstInit) {\n            nToken.lastInitializedTime = uint40(DateTime.getTimeUTC0(blockTime));\n        } else {\n            _settleNTokenPortfolio(nToken, blockTime);\n            _getPreviousMarkets(currencyId, blockTime, nToken, previousMarkets);\n            // NOTE: getNTokenNegativefCashWithholding is compiled as an internal method\n            primeCashWithholding = nTokenMintAction.getNTokenNegativefCashWithholding(nToken, previousMarkets, blockTime);\n        }\n\n        // Deduct the amount of withholding required from the cash balance (at this point includes all settled cash)\n        netPrimeCashAvailable = nToken.cashBalance.subNoNeg(primeCashWithholding);\n\n        // This is the new balance to store\n        nToken.cashBalance = primeCashWithholding;\n\n        // We can't have less net asset cash than our percent basis or some markets will end up not\n        // initialized\n        require(netPrimeCashAvailable > MIN_CASH_REQUIRED); // dev: insufficient cash\n\n        return netPrimeCashAvailable;\n    }\n\n    /// @notice The six month implied rate is zero if there have never been any markets initialized\n    /// otherwise the market will be the interpolation between the old 6 month and 1 year markets\n    /// which are now sitting at 3 month and 9 month time to maturity\n    function _getSixMonthImpliedRate(\n        MarketParameters[] memory previousMarkets,\n        uint256 referenceTime\n    ) private pure returns (uint256) {\n        // Cannot interpolate six month rate without a 1 year market\n        require(previousMarkets.length >= 3);\n\n        return\n            CashGroup.interpolateOracleRate(\n                previousMarkets[1].maturity,\n                previousMarkets[2].maturity,\n                previousMarkets[1].oracleRate,\n                previousMarkets[2].oracleRate,\n                // Maturity date == 6 months from reference time\n                referenceTime + 2 * Constants.QUARTER\n            );\n    }\n\n    /// @notice Returns the linear interpolation between two market rates. The formula is\n    /// slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n    /// interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate\n    function _interpolateFutureRate(\n        uint256 shortMaturity,\n        uint256 shortRate,\n        MarketParameters memory longMarket\n    ) private pure returns (uint256) {\n        uint256 longMaturity = longMarket.maturity;\n        uint256 longRate = longMarket.oracleRate;\n        // the next market maturity is always a quarter away\n        uint256 newMaturity = longMarket.maturity + Constants.QUARTER;\n        require(shortMaturity < longMaturity);\n\n        // It's possible that the rates are inverted where the short market rate > long market rate and\n        // we will get an underflow here so we check for that\n        if (longRate >= shortRate) {\n            return\n                (longRate - shortRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity)\n                    .add(shortRate);\n        } else {\n            // In this case the slope is negative so:\n            // interpolatedRate = shortMarket.oracleRate - slope * (assetMaturity - shortMarket.maturity)\n            uint256 diff =\n                (shortRate - longRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity);\n\n            // This interpolation may go below zero so we bottom out interpolated rates at (practically)\n            // zero. Storing a zero for oracleRates means that the markets are not initialized so using\n            // a minimum value here to handle that case\n            return shortRate > diff ? shortRate - diff : 1;\n        }\n    }\n\n    /// @dev This is here to clear the stack\n    function _setLiquidityAmount(\n        int256 netPrimeCashAvailable,\n        int256 depositShare,\n        uint256 assetType,\n        MarketParameters memory newMarket,\n        nTokenPortfolio memory nToken\n    ) private pure returns (int256) {\n        // The portion of the cash available that will be deposited into the market\n        int256 primeCashToMarket =\n            netPrimeCashAvailable.mul(depositShare).div(Constants.DEPOSIT_PERCENT_BASIS);\n        newMarket.totalPrimeCash = primeCashToMarket;\n        newMarket.totalLiquidity = primeCashToMarket;\n\n        // Add a new liquidity token, this will end up in the new asset array\n        nToken.portfolioState.addAsset(\n            nToken.cashGroup.currencyId,\n            newMarket.maturity,\n            assetType, // This is liquidity token asset type\n            primeCashToMarket\n        );\n\n        // fCashAmount is calculated using the underlying amount\n        return nToken.cashGroup.primeRate.convertToUnderlying(primeCashToMarket);\n    }\n\n    /// @notice Calculates the fCash amount given the cash and utilization:\n    // utilization = totalfCash / (totalfCash + totalCashUnderlying)\n    // utilization * (totalfCash + totalCashUnderlying) = totalfCash\n    // utilization * totalCashUnderlying + utilization * totalfCash = totalfCash\n    // utilization * totalCashUnderlying = totalfCash * (1 - utilization)\n    // totalfCash = utilization * totalCashUnderlying / (1 - utilization)\n    function _calculatefCashAmountFromUtilization(\n        int256 underlyingCashToMarket,\n        uint256 utilization \n    ) private pure returns (int256) {\n        require(utilization < uint256(Constants.RATE_PRECISION));\n        int256 _utilization = int256(utilization);\n        // NOTE: sub underflow checked above, no div by zero possible\n        return (underlyingCashToMarket.mul(_utilization) / (Constants.RATE_PRECISION - _utilization));\n    }\n\n    /// @notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n    /// done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n    /// @param currencyId currency of markets to initialize\n    /// @dev emit:CashSweepIntoMarkets\n    /// @dev auth:none\n    function sweepCashIntoMarkets(uint16 currencyId) external {\n        nTokenMintAction.sweepCashIntoMarkets(currencyId);\n    }\n\n    /// @notice Initialize the market for a given currency id, done once a quarter\n    /// @param currencyId currency of markets to initialize\n    /// @param isFirstInit true if this is the first time the markets have been initialized\n    /// @dev emit:MarketsInitialized\n    /// @dev auth:none\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        MarketParameters[] memory previousMarkets =\n            new MarketParameters[](nToken.cashGroup.maxMarketIndex);\n\n        // This should be sufficient to validate that the currency id is valid\n        require(nToken.cashGroup.maxMarketIndex != 0);\n        // If the nToken has any assets then this is not the first initialization\n        if (isFirstInit) {\n            require(nToken.portfolioState.storedAssets.length == 0);\n        }\n\n        int256 netPrimeCashAvailable = _calculateNetPrimeCashAvailable(\n            nToken,\n            previousMarkets,\n            blockTime,\n            currencyId,\n            isFirstInit\n        );\n\n        GovernanceParameters memory parameters =\n            _getGovernanceParameters(currencyId, nToken.cashGroup.maxMarketIndex);\n\n        MarketParameters memory newMarket;\n        // Oracle rate is carried over between loops\n        uint256 oracleRate;\n        for (uint256 i = 0; i < nToken.cashGroup.maxMarketIndex; i++) {\n            // Traded markets are 1-indexed\n            newMarket.maturity = DateTime.getReferenceTime(blockTime).add(\n                DateTime.getTradedMarket(i + 1)\n            );\n\n            int256 underlyingCashToMarket =\n                _setLiquidityAmount(\n                    netPrimeCashAvailable,\n                    parameters.depositShares[i],\n                    Constants.MIN_LIQUIDITY_TOKEN_INDEX + i, // liquidity token asset type\n                    newMarket,\n                    nToken\n                );\n\n            // Governance will prevent previousMarkets.length from being equal to 1, meaning that we will\n            // either have 0 markets (on first init), exactly 2 markets, or 2+ markets. In the case that there\n            // are exactly two markets then the 6 month market must be initialized via this method (there is no\n            // 9 month market to interpolate a rate against). In the case of 2+ markets then we will only enter this\n            // first branch when the number of markets is increased\n            if (\n                isFirstInit ||\n                // This is the six month market when there are only 3 and 6 month markets\n                (i == 1 && previousMarkets.length == 2) ||\n                // At this point, these are new markets and they must be initialized\n                (i >= nToken.portfolioState.storedAssets.length) ||\n                // When extending from the 6 month to 1 year market we must initialize both 6 and 1 year as new\n                (i == 1 && previousMarkets[2].oracleRate == 0)\n            ) {\n                // Any newly added markets cannot have their implied rates interpolated via the previous\n                // markets. In this case we initialize the markets using the rate anchor and proportion.\n                int256 fCashAmount = _calculatefCashAmountFromUtilization(underlyingCashToMarket, parameters.proportions[i]);\n\n                newMarket.totalfCash = fCashAmount;\n                newMarket.oracleRate = parameters.interestRateParams[i].getInterestRate(parameters.proportions[i]);\n\n                // If this fails it is because the rate anchor and proportion are not set properly by\n                // governance.\n                require(newMarket.oracleRate > 0, \"IM: implied rate failed\");\n            } else {\n                // Two special cases for the 3 month and 6 month market when interpolating implied rates. The 3 month market\n                // inherits the implied rate from the previous 6 month market (they are now at the same maturity).\n                if (i == 0) {\n                    // We should never get an array out of bounds error here because of the inequality check in the first branch\n                    // of the outer if statement.\n                    oracleRate = previousMarkets[1].oracleRate;\n                } else if (i == 1) {\n                    // The six month market is the interpolation between the 3 month and the 1 year market (now at 9 months). This\n                    // interpolation is different since the rate is between 3 and 9 months, for all the other interpolations we interpolate\n                    // forward in time (i.e. use a 3 and 6 month rate to interpolate a 1 year rate). The first branch of this if statement\n                    // will capture the case when the 1 year rate has not been set.\n                    oracleRate = _getSixMonthImpliedRate(\n                        previousMarkets,\n                        DateTime.getReferenceTime(blockTime)\n                    );\n\n                    // Floor an interpolated interest rate at kink rate 1\n                    if (oracleRate < parameters.interestRateParams[i].kinkRate1) {\n                        oracleRate = parameters.interestRateParams[i].kinkRate1;\n                    }\n                } else {\n                    // Any other market has the interpolation between the new implied rate from the newly initialized market previous\n                    // to this market interpolated with the previous version of this market. For example, the newly initialized 1 year\n                    // market will have its implied rate set to the interpolation between the newly initialized 6 month market (done in\n                    // previous iteration of this loop) and the previous 1 year market (which has now rolled down to 9 months). Similarly,\n                    // a 2 year market will be interpolated from the newly initialized 1 year and the previous 2 year market.\n\n                    // This is the previous market maturity, traded markets are 1-indexed\n                    uint256 shortMarketMaturity =\n                        DateTime.getReferenceTime(blockTime).add(DateTime.getTradedMarket(i));\n                    oracleRate = _interpolateFutureRate(\n                        shortMarketMaturity,\n                        // This is the oracle rate from the previous iteration in the loop,\n                        // refers to the new oracle rate set on the newly initialized market\n                        // that is adjacent to the market currently being initialized.\n                        oracleRate,\n                        // This is the previous version of the current market\n                        previousMarkets[i]\n                    );\n\n                    // Floor an interpolated interest rate at kink rate 1\n                    if (oracleRate < parameters.interestRateParams[i].kinkRate1) {\n                        oracleRate = parameters.interestRateParams[i].kinkRate1;\n                    }\n                }\n\n                // When initializing new markets we need to ensure that the new implied oracle rates align\n                // with the current yield curve or valuations for ifCash will spike. This should reference the\n                // previously calculated implied rate and the current market.\n                uint256 utilization = parameters.interestRateParams[i].getUtilizationFromInterestRate(oracleRate);\n\n                // If the calculated utilization is greater than the leverage threshold then we cannot\n                // provide liquidity without risk of liquidation. In this case, set the leverage threshold\n                // as the new utilization and calculate the oracle rate from it. This will result in fCash valuations\n                // changing on chain, however, adding liquidity via nTokens would also end up with this\n                // result as well.\n                if (utilization > parameters.leverageThresholds[i].toUint()) {\n                    utilization = parameters.leverageThresholds[i].toUint();\n                    oracleRate = parameters.interestRateParams[i].getInterestRate(utilization);\n                    require(oracleRate != 0, \"Oracle rate overflow\");\n                }\n\n                newMarket.totalfCash = _calculatefCashAmountFromUtilization(underlyingCashToMarket, utilization);\n\n                // It's possible that totalfCash is zero from rounding errors above, we want to set this to a minimum value\n                // so that we don't have divide by zero errors.\n                if (newMarket.totalfCash < 1) newMarket.totalfCash = 1;\n\n                newMarket.oracleRate = oracleRate;\n                // The oracle rate has been changed so we set the previous trade time to current\n                newMarket.previousTradeTime = blockTime;\n            }\n\n            // Implied rate will always be set to oracle rate\n            newMarket.lastImpliedRate = newMarket.oracleRate;\n            finalizeMarket(newMarket, currencyId, nToken);\n        }\n\n        // prettier-ignore\n        (\n            /* hasDebt */,\n            /* activeCurrencies */,\n            uint8 assetArrayLength,\n            /* nextSettleTime */\n        ) = nToken.portfolioState.storeAssets(nToken.tokenAddress);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            currencyId,\n            nToken.cashBalance\n        );\n        nTokenHandler.setArrayLengthAndInitializedTime(\n            nToken.tokenAddress,\n            assetArrayLength,\n            nToken.lastInitializedTime\n        );\n\n        emit MarketsInitialized(uint16(currencyId));\n    }\n\n    function finalizeMarket(\n        MarketParameters memory market,\n        uint16 currencyId,\n        nTokenPortfolio memory nToken\n    ) internal {\n        // Always reference the current settlement date\n        uint256 settlementDate = DateTime.getReferenceTime(block.timestamp) + Constants.QUARTER;\n        market.setMarketStorageForInitialize(currencyId, settlementDate);\n\n        BitmapAssetsHandler.addifCashAsset(\n            nToken.tokenAddress,\n            currencyId,\n            market.maturity,\n            nToken.lastInitializedTime,\n            market.totalfCash.neg()\n        );\n    }\n\n    /// @notice Get a list of deployed library addresses (sorted by library name)\n    function getLibInfo() external pure returns (address) {\n        return address(nTokenMintAction);\n    }\n}\n", "sourceMap": "2166:26091:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/InitializeMarketsAction.sol", "type": "library", "deployment": {"address": "0xF35431Fa697bDd436D8c4e8490E71BdCb52F6A09", "chainid": "1", "blockHeight": 19302082}}