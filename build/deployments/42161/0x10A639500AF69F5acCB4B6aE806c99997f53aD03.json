{"abi": [{"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "int256", "name": "cashIntoMarkets", "type": "int256"}], "name": "SweepCashIntoMarkets", "type": "event"}], "allSourcePaths": {"124": "contracts/proxy/beacon/IBeacon.sol", "130": "interfaces/IEIP20NonStandard.sol", "132": "interfaces/IERC20.sol", "135": "interfaces/WETH9.sol", "138": "interfaces/aave/ILendingPool.sol", "140": "interfaces/chainlink/AggregatorInterface.sol", "141": "interfaces/chainlink/AggregatorV2V3Interface.sol", "142": "interfaces/chainlink/AggregatorV3Interface.sol", "143": "interfaces/compound/CErc20Interface.sol", "145": "interfaces/compound/CTokenInterface.sol", "147": "interfaces/notional/IPrimeCashHoldingsOracle.sol", "148": "interfaces/notional/IRewarder.sol", "34": "contracts/external/actions/nTokenMintAction.sol", "50": "contracts/external/proxies/BaseERC4626Proxy.sol", "54": "contracts/global/Constants.sol", "55": "contracts/global/Deployments.sol", "56": "contracts/global/LibStorage.sol", "59": "contracts/global/Types.sol", "60": "contracts/internal/AccountContextHandler.sol", "61": "contracts/internal/Emitter.sol", "62": "contracts/internal/balances/BalanceHandler.sol", "63": "contracts/internal/balances/ExternalLending.sol", "64": "contracts/internal/balances/Incentives.sol", "65": "contracts/internal/balances/TokenHandler.sol", "66": "contracts/internal/balances/protocols/CompoundHandler.sol", "67": "contracts/internal/balances/protocols/GenericToken.sol", "71": "contracts/internal/markets/CashGroup.sol", "72": "contracts/internal/markets/DateTime.sol", "74": "contracts/internal/markets/InterestRateCurve.sol", "75": "contracts/internal/markets/Market.sol", "76": "contracts/internal/nToken/nTokenCalculations.sol", "77": "contracts/internal/nToken/nTokenHandler.sol", "78": "contracts/internal/nToken/nTokenSupply.sol", "79": "contracts/internal/pCash/PrimeCashExchangeRate.sol", "80": "contracts/internal/pCash/PrimeRateLib.sol", "81": "contracts/internal/pCash/PrimeSupplyCap.sol", "82": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "83": "contracts/internal/portfolio/PortfolioHandler.sol", "87": "contracts/internal/valuation/AssetHandler.sol", "95": "contracts/math/ABDKMath64x64.sol", "96": "contracts/math/Bitmap.sol", "97": "contracts/math/FloatingPoint.sol", "98": "contracts/math/SafeInt256.sol", "99": "contracts/math/SafeUint256.sol"}, "ast": {"absolutePath": "contracts/external/actions/nTokenMintAction.sol", "exportedSymbols": {"AssetHandler": [51157], "AssetStorageState": [69600], "BalanceHandler": [34310], "BalanceState": [69738], "Bitmap": [76512], "BitmapAssetsHandler": [48575], "CashGroup": [39804], "CashGroupParameters": [69754], "Constants": [69514], "DateTime": [70859], "Emitter": [32896], "InterestRateCurve": [41849], "InterestRateParameters": [69908], "Market": [42693], "MarketParameters": [69784], "PortfolioAsset": [69767], "PortfolioHandler": [49945], "PortfolioState": [69706], "PrimeRate": [70190], "PrimeRateLib": [47707], "SafeInt256": [71353], "SafeUint256": [71874], "nTokenCalculations": [43488], "nTokenHandler": [44539], "nTokenMintAction": [20478], "nTokenPortfolio": [69672]}, "id": 20479, "license": "BSUL-1.1", "nodeType": "SourceUnit", "nodes": [{"id": 19481, "literals": ["solidity", "=", "0.7", ".6"], "nodeType": "PragmaDirective", "src": "37:23:34"}, {"id": 19482, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "61:19:34"}, {"absolutePath": "contracts/global/Types.sol", "file": "../../global/Types.sol", "id": 19492, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 70222, "src": "82:232:34", "symbolAliases": [{"foreign": {"id": 19483, "name": "PrimeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "95:9:34", "typeDescriptions": {}}}, {"foreign": {"id": 19484, "name": "BalanceState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "110:12:34", "typeDescriptions": {}}}, {"foreign": {"id": 19485, "name": "CashGroupParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "128:19:34", "typeDescriptions": {}}}, {"foreign": {"id": 19486, "name": "MarketParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "153:16:34", "typeDescriptions": {}}}, {"foreign": {"id": 19487, "name": "nTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "175:15:34", "typeDescriptions": {}}}, {"foreign": {"id": 19488, "name": "PortfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "196:14:34", "typeDescriptions": {}}}, {"foreign": {"id": 19489, "name": "PortfolioAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "216:14:34", "typeDescriptions": {}}}, {"foreign": {"id": 19490, "name": "AssetStorageState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "236:17:34", "typeDescriptions": {}}}, {"foreign": {"id": 19491, "name": "InterestRateParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "259:22:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/global/Constants.sol", "file": "../../global/Constants.sol", "id": 19494, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 69515, "src": "315:53:34", "symbolAliases": [{"foreign": {"id": 19493, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "323:9:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 19496, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 71354, "src": "369:53:34", "symbolAliases": [{"foreign": {"id": 19495, "name": "SafeInt256", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "377:10:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeUint256.sol", "file": "../../math/SafeUint256.sol", "id": 19498, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 71875, "src": "423:55:34", "symbolAliases": [{"foreign": {"id": 19497, "name": "SafeUint256", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "431:11:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/Bitmap.sol", "file": "../../math/Bitmap.sol", "id": 19500, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 76513, "src": "479:45:34", "symbolAliases": [{"foreign": {"id": 19499, "name": "Bitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "487:6:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/Emitter.sol", "file": "../../internal/Emitter.sol", "id": 19502, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 32897, "src": "526:51:34", "symbolAliases": [{"foreign": {"id": 19501, "name": "Emitter", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "534:7:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/DateTime.sol", "file": "../../internal/markets/DateTime.sol", "id": 19504, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 70860, "src": "578:61:34", "symbolAliases": [{"foreign": {"id": 19503, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "586:8:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/nToken/nTokenHandler.sol", "file": "../../internal/nToken/nTokenHandler.sol", "id": 19506, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 44540, "src": "640:70:34", "symbolAliases": [{"foreign": {"id": 19505, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "648:13:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/nToken/nTokenCalculations.sol", "file": "../../internal/nToken/nTokenCalculations.sol", "id": 19508, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 43489, "src": "711:80:34", "symbolAliases": [{"foreign": {"id": 19507, "name": "nTokenCalculations", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "719:18:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/InterestRateCurve.sol", "file": "../../internal/markets/InterestRateCurve.sol", "id": 19510, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 41850, "src": "792:79:34", "symbolAliases": [{"foreign": {"id": 19509, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "800:17:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 19512, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 42694, "src": "872:57:34", "symbolAliases": [{"foreign": {"id": 19511, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "880:6:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 19514, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 39805, "src": "930:63:34", "symbolAliases": [{"foreign": {"id": 19513, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "938:9:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/pCash/PrimeRateLib.sol", "file": "../../internal/pCash/PrimeRateLib.sol", "id": 19516, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 47708, "src": "994:67:34", "symbolAliases": [{"foreign": {"id": 19515, "name": "PrimeRateLib", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1002:12:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 19518, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 34311, "src": "1062:74:34", "symbolAliases": [{"foreign": {"id": 19517, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1070:14:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 19520, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 49946, "src": "1137:79:34", "symbolAliases": [{"foreign": {"id": 19519, "name": "PortfolioHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1145:16:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "file": "../../internal/portfolio/BitmapAssetsHandler.sol", "id": 19522, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 48576, "src": "1217:85:34", "symbolAliases": [{"foreign": {"id": 19521, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1225:19:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/valuation/AssetHandler.sol", "file": "../../internal/valuation/AssetHandler.sol", "id": 19524, "nodeType": "ImportDirective", "scope": 20479, "sourceUnit": 51158, "src": "1303:71:34", "symbolAliases": [{"foreign": {"id": 19523, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1311:12:34", "typeDescriptions": {}}}], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "fullyImplemented": true, "id": 20478, "linearizedBaseContracts": [20478], "name": "nTokenMintAction", "nodeType": "ContractDefinition", "nodes": [{"id": 19527, "libraryName": {"id": 19525, "name": "Bitmap", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 76512, "src": "1413:6:34", "typeDescriptions": {"typeIdentifier": "t_contract$_Bitmap_$76512", "typeString": "library Bitmap"}}, "nodeType": "UsingForDirective", "src": "1407:25:34", "typeName": {"id": 19526, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1424:7:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"id": 19530, "libraryName": {"id": 19528, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 71353, "src": "1443:10:34", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$71353", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "1437:28:34", "typeName": {"id": 19529, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1458:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 19533, "libraryName": {"id": 19531, "name": "SafeUint256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 71874, "src": "1476:11:34", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeUint256_$71874", "typeString": "library SafeUint256"}}, "nodeType": "UsingForDirective", "src": "1470:30:34", "typeName": {"id": 19532, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1492:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"id": 19536, "libraryName": {"id": 19534, "name": "BalanceHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 34310, "src": "1511:14:34", "typeDescriptions": {"typeIdentifier": "t_contract$_BalanceHandler_$34310", "typeString": "library BalanceHandler"}}, "nodeType": "UsingForDirective", "src": "1505:38:34", "typeName": {"id": 19535, "name": "BalanceState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69738, "src": "1530:12:34", "typeDescriptions": {"typeIdentifier": "t_struct$_BalanceState_$69738_storage_ptr", "typeString": "struct BalanceState"}}}, {"id": 19539, "libraryName": {"id": 19537, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 39804, "src": "1554:9:34", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$39804", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "1548:40:34", "typeName": {"id": 19538, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69754, "src": "1568:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 19542, "libraryName": {"id": 19540, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 42693, "src": "1599:6:34", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$42693", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "1593:34:34", "typeName": {"id": 19541, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "1610:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 19545, "libraryName": {"id": 19543, "name": "nTokenHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 44539, "src": "1638:13:34", "typeDescriptions": {"typeIdentifier": "t_contract$_nTokenHandler_$44539", "typeString": "library nTokenHandler"}}, "nodeType": "UsingForDirective", "src": "1632:40:34", "typeName": {"id": 19544, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "1656:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}}, {"id": 19548, "libraryName": {"id": 19546, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 49945, "src": "1683:16:34", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$49945", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "1677:42:34", "typeName": {"id": 19547, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69706, "src": "1704:14:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$69706_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 19551, "libraryName": {"id": 19549, "name": "PrimeRateLib", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 47707, "src": "1730:12:34", "typeDescriptions": {"typeIdentifier": "t_contract$_PrimeRateLib_$47707", "typeString": "library PrimeRateLib"}}, "nodeType": "UsingForDirective", "src": "1724:33:34", "typeName": {"id": 19550, "name": "PrimeRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 70190, "src": "1747:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$70190_storage_ptr", "typeString": "struct PrimeRate"}}}, {"anonymous": false, "id": 19557, "name": "SweepCashIntoMarkets", "nodeType": "EventDefinition", "parameters": {"id": 19556, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19553, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 19557, "src": "1790:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 19552, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1790:6:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 19555, "indexed": false, "mutability": "mutable", "name": "cashIntoMarkets", "nodeType": "VariableDeclaration", "scope": 19557, "src": "1809:22:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19554, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1809:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1789:43:34"}, "src": "1763:70:34"}, {"body": {"id": 19575, "nodeType": "Block", "src": "2243:76:34", "statements": [{"expression": {"arguments": [{"id": 19570, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19560, "src": "2272:7:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 19571, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19562, "src": "2281:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 19572, "name": "primeCashToDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19564, "src": "2293:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 19569, "name": "_nTokenMint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19782, "src": "2260:11:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,int256) returns (int256)"}}, "id": 19573, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2260:52:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 19568, "id": 19574, "nodeType": "Return", "src": "2253:59:34"}]}, "documentation": {"id": 19558, "nodeType": "StructuredDocumentation", "src": "1839:290:34", "text": "@notice Converts the given amount of cash to nTokens in the same currency.\n @param currencyId the currency associated the nToken\n @param primeCashToDeposit the amount of asset tokens to deposit denominated in internal decimals\n @return nTokens minted by this action"}, "functionSelector": "d3158dfa", "id": 19576, "implemented": true, "kind": "function", "modifiers": [], "name": "nTokenMint", "nodeType": "FunctionDefinition", "parameters": {"id": 19565, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19560, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 19576, "src": "2154:15:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 19559, "name": "address", "nodeType": "ElementaryTypeName", "src": "2154:7:34", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 19562, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 19576, "src": "2171:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 19561, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2171:6:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 19564, "mutability": "mutable", "name": "primeCashToDeposit", "nodeType": "VariableDeclaration", "scope": 19576, "src": "2190:25:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19563, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2190:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "2153:63:34"}, "returnParameters": {"id": 19568, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19567, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 19576, "src": "2235:6:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19566, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2235:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "2234:8:34"}, "scope": 20478, "src": "2134:185:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 19685, "nodeType": "Block", "src": "2383:1417:34", "statements": [{"assignments": [19582], "declarations": [{"constant": false, "id": 19582, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 19685, "src": "2393:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 19581, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "2393:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 19583, "nodeType": "VariableDeclarationStatement", "src": "2393:29:34"}, {"expression": {"arguments": [{"id": 19587, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19578, "src": "2467:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 19584, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "2432:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19586, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 44490, "src": "2432:34:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 19588, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2432:46:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19589, "nodeType": "ExpressionStatement", "src": "2432:46:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19596, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 19591, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "2496:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19592, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 69661, "src": "2496:21:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$69706_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 19593, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 69698, "src": "2496:34:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$69767_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 19594, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "2496:41:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 19595, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2540:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "2496:45:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 19590, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "2488:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 19597, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2488:54:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19598, "nodeType": "ExpressionStatement", "src": "2488:54:34"}, {"assignments": [19600], "declarations": [{"constant": false, "id": 19600, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 19685, "src": "2620:21:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19599, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2620:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 19606, "initialValue": {"arguments": [{"expression": {"id": 19603, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "2670:5:34", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 19604, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "2670:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 19601, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 70859, "src": "2644:8:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$70859_$", "typeString": "type(library DateTime)"}}, "id": 19602, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 70255, "src": "2644:25:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 19605, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2644:42:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "2620:66:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19611, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 19608, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "2704:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19609, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 69667, "src": "2704:26:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 19610, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19600, "src": "2734:13:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "2704:43:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 19607, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "2696:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 19612, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2696:52:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19613, "nodeType": "ExpressionStatement", "src": "2696:52:34"}, {"assignments": [19615], "declarations": [{"constant": false, "id": 19615, "mutability": "mutable", "name": "minSweepCashTime", "nodeType": "VariableDeclaration", "scope": 19685, "src": "2834:24:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19614, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2834:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 19633, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19631, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"expression": {"id": 19623, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "2935:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19624, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "parameters", "nodeType": "MemberAccess", "referencedDeclaration": 69669, "src": "2935:17:34", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 19627, "indexExpression": {"expression": {"id": 19625, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "2953:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 19626, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_TIME_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 69470, "src": "2953:39:34", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2935:58:34", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 19622, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2929:5:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 19621, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "2929:5:34", "typeDescriptions": {}}}, "id": 19628, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2929:65:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 19620, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2921:7:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 19619, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2921:7:34", "typeDescriptions": {}}}, "id": 19629, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2921:74:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "31", "id": 19630, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2998:7:34", "subdenomination": "hours", "typeDescriptions": {"typeIdentifier": "t_rational_3600_by_1", "typeString": "int_const 3600"}, "value": "1"}, "src": "2921:84:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 19616, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "2873:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19617, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 69667, "src": "2873:26:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 19618, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 71382, "src": "2873:30:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 19632, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2873:146:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "2834:185:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19638, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 19635, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "3037:5:34", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 19636, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "3037:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 19637, "name": "minSweepCashTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19615, "src": "3055:16:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3037:34:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 19634, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3029:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 19639, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3029:43:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19640, "nodeType": "ExpressionStatement", "src": "3029:43:34"}, {"assignments": [19642], "declarations": [{"constant": false, "id": 19642, "mutability": "mutable", "name": "primeCashWithholding", "nodeType": "VariableDeclaration", "scope": 19685, "src": "3083:27:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19641, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3083:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 19653, "initialValue": {"arguments": [{"id": 19644, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "3160:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"arguments": [{"hexValue": "30", "id": 19648, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3203:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 19647, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "3180:22:34", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$69784_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 19645, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "3184:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 19646, "nodeType": "ArrayTypeName", "src": "3184:18:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$69784_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 19649, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3180:25:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$69784_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"expression": {"id": 19650, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "3275:5:34", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 19651, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "3275:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$69784_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 19643, "name": "getNTokenNegativefCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20477, "src": "3113:33:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_array$_t_struct$_MarketParameters_$69784_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 19652, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3113:187:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "3083:217:34"}, {"assignments": [19655], "declarations": [{"constant": false, "id": 19655, "mutability": "mutable", "name": "cashIntoMarkets", "nodeType": "VariableDeclaration", "scope": 19685, "src": "3311:22:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19654, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3311:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 19661, "initialValue": {"arguments": [{"id": 19659, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19642, "src": "3364:20:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 19656, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "3336:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19657, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 69665, "src": "3336:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19658, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 71055, "src": "3336:27:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 19660, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3336:49:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "3311:74:34"}, {"expression": {"arguments": [{"expression": {"id": 19665, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "3450:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19666, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "3450:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 19667, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "3483:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19668, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "3483:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19669, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "3483:27:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 19670, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19642, "src": "3524:20:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19662, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34310, "src": "3395:14:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$34310_$", "typeString": "type(library BalanceHandler)"}}, "id": 19664, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 33667, "src": "3395:41:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (address,uint16,int256)"}}, "id": 19671, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3395:159:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19672, "nodeType": "ExpressionStatement", "src": "3395:159:34"}, {"expression": {"arguments": [{"expression": {"id": 19674, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19582, "src": "3680:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19675, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "3680:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 19676, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19578, "src": "3701:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 19677, "name": "cashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19655, "src": "3713:15:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 19673, "name": "_nTokenMint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19782, "src": "3668:11:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,int256) returns (int256)"}}, "id": 19678, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3668:61:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19679, "nodeType": "ExpressionStatement", "src": "3668:61:34"}, {"eventCall": {"arguments": [{"id": 19681, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19578, "src": "3765:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 19682, "name": "cashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19655, "src": "3777:15:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 19680, "name": "SweepCashIntoMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19557, "src": "3744:20:34", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (uint16,int256)"}}, "id": 19683, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3744:49:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19684, "nodeType": "EmitStatement", "src": "3739:54:34"}]}, "functionSelector": "bb6dd58e", "id": 19686, "implemented": true, "kind": "function", "modifiers": [], "name": "sweepCashIntoMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 19579, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19578, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 19686, "src": "2355:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 19577, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2355:6:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "2354:19:34"}, "returnParameters": {"id": 19580, "nodeType": "ParameterList", "parameters": [], "src": "2383:0:34"}, "scope": 20478, "src": "2325:1475:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 19781, "nodeType": "Block", "src": "3916:1329:34", "statements": [{"assignments": [19698], "declarations": [{"constant": false, "id": 19698, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 19781, "src": "3926:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19697, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3926:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 19701, "initialValue": {"expression": {"id": 19699, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "3946:5:34", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 19700, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "3946:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3926:35:34"}, {"assignments": [19703], "declarations": [{"constant": false, "id": 19703, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 19781, "src": "3971:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 19702, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "3971:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 19704, "nodeType": "VariableDeclarationStatement", "src": "3971:29:34"}, {"expression": {"arguments": [{"id": 19708, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19690, "src": "4045:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 19705, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4010:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19707, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 44490, "src": "4010:34:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 19709, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4010:46:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19710, "nodeType": "ExpressionStatement", "src": "4010:46:34"}, {"assignments": [19712], "declarations": [{"constant": false, "id": 19712, "mutability": "mutable", "name": "tokensToMint", "nodeType": "VariableDeclaration", "scope": 19781, "src": "4067:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19711, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4067:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 19719, "initialValue": {"arguments": [{"id": 19715, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4130:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 19716, "name": "primeCashToDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19692, "src": "4138:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19717, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19698, "src": "4158:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 19713, "name": "nTokenCalculations", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43488, "src": "4089:18:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenCalculations_$43488_$", "typeString": "type(library nTokenCalculations)"}}, "id": 19714, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "calculateTokensToMint", "nodeType": "MemberAccess", "referencedDeclaration": 42864, "src": "4089:40:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,int256,uint256) view returns (int256)"}}, "id": 19718, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4089:79:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "4067:101:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 19723, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19721, "name": "tokensToMint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19712, "src": "4186:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "30", "id": 19722, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4202:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "4186:17:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c696420746f6b656e20616d6f756e74", "id": 19724, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "4205:22:34", "typeDescriptions": {"typeIdentifier": "t_stringliteral_51e395ccdea9060dec5fa8fca2f2563cffa61f9f6f61f3f9c9b3895fa879ed58", "typeString": "literal_string \"Invalid token amount\""}, "value": "Invalid token amount"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_51e395ccdea9060dec5fa8fca2f2563cffa61f9f6f61f3f9c9b3895fa879ed58", "typeString": "literal_string \"Invalid token amount\""}], "id": 19720, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "4178:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 19725, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4178:50:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19726, "nodeType": "ExpressionStatement", "src": "4178:50:34"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19732, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 19727, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4243:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19728, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 69661, "src": "4243:21:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$69706_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 19729, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 69698, "src": "4243:34:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$69767_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 19730, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "4243:41:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 19731, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4288:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "4243:46:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 19760, "nodeType": "Block", "src": "4653:85:34", "statements": [{"expression": {"arguments": [{"id": 19755, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4689:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 19756, "name": "primeCashToDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19692, "src": "4697:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19757, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19698, "src": "4717:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 19754, "name": "_depositIntoPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19936, "src": "4667:21:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_int256_$_t_uint256_$returns$__$", "typeString": "function (struct nTokenPortfolio memory,int256,uint256)"}}, "id": 19758, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4667:60:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19759, "nodeType": "ExpressionStatement", "src": "4667:60:34"}]}, "id": 19761, "nodeType": "IfStatement", "src": "4239:499:34", "trueBody": {"id": 19753, "nodeType": "Block", "src": "4291:356:34", "statements": [{"expression": {"id": 19741, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 19733, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4403:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19735, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 69665, "src": "4403:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 19739, "name": "primeCashToDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19692, "src": "4447:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 19736, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4424:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19737, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 69665, "src": "4424:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19738, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 70998, "src": "4424:22:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 19740, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4424:42:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4403:63:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19742, "nodeType": "ExpressionStatement", "src": "4403:63:34"}, {"expression": {"arguments": [{"expression": {"id": 19746, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4539:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19747, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "4539:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 19748, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19690, "src": "4576:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 19749, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4604:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19750, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 69665, "src": "4604:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19743, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34310, "src": "4480:14:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$34310_$", "typeString": "type(library BalanceHandler)"}}, "id": 19745, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 33667, "src": "4480:41:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (address,uint16,int256)"}}, "id": 19751, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4480:156:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19752, "nodeType": "ExpressionStatement", "src": "4480:156:34"}]}}, {"condition": {"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 19765, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19762, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19688, "src": "4752:7:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"expression": {"id": 19763, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4763:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19764, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "4763:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "4752:30:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19778, "nodeType": "IfStatement", "src": "4748:317:34", "trueBody": {"id": 19777, "nodeType": "Block", "src": "4784:281:34", "statements": [{"expression": {"arguments": [{"id": 19769, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19688, "src": "4979:7:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 19770, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19703, "src": "4988:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19771, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "4988:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 19772, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19690, "src": "5009:10:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 19773, "name": "primeCashToDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19692, "src": "5021:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19774, "name": "tokensToMint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19712, "src": "5041:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19766, "name": "Emitter", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 32896, "src": "4956:7:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Emitter_$32896_$", "typeString": "type(library Emitter)"}}, "id": 19768, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "emitNTokenMint", "nodeType": "MemberAccess", "referencedDeclaration": 32042, "src": "4956:22:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint16_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,address,uint16,int256,int256)"}}, "id": 19775, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4956:98:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19776, "nodeType": "ExpressionStatement", "src": "4956:98:34"}]}}, {"expression": {"id": 19779, "name": "tokensToMint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19712, "src": "5226:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 19696, "id": 19780, "nodeType": "Return", "src": "5219:19:34"}]}, "id": 19782, "implemented": true, "kind": "function", "modifiers": [], "name": "_nTokenMint", "nodeType": "FunctionDefinition", "parameters": {"id": 19693, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19688, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 19782, "src": "3827:15:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 19687, "name": "address", "nodeType": "ElementaryTypeName", "src": "3827:7:34", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 19690, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 19782, "src": "3844:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 19689, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3844:6:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 19692, "mutability": "mutable", "name": "primeCashToDeposit", "nodeType": "VariableDeclaration", "scope": 19782, "src": "3863:25:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19691, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3863:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "3826:63:34"}, "returnParameters": {"id": 19696, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19695, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 19782, "src": "3908:6:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19694, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3908:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "3907:8:34"}, "scope": 20478, "src": "3806:1439:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 19935, "nodeType": "Block", "src": "5636:3169:34", "statements": [{"assignments": [19796, 19799], "declarations": [{"constant": false, "id": 19796, "mutability": "mutable", "name": "depositShares", "nodeType": "VariableDeclaration", "scope": 19935, "src": "5647:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 19794, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5647:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19795, "nodeType": "ArrayTypeName", "src": "5647:8:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 19799, "mutability": "mutable", "name": "leverageThresholds", "nodeType": "VariableDeclaration", "scope": 19935, "src": "5678:34:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 19797, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5678:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19798, "nodeType": "ArrayTypeName", "src": "5678:8:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "id": 19809, "initialValue": {"arguments": [{"expression": {"expression": {"id": 19802, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "5780:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19803, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "5780:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19804, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "5780:27:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"expression": {"id": 19805, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "5825:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19806, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "5825:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19807, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 69749, "src": "5825:31:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 19800, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 44539, "src": "5728:13:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$44539_$", "typeString": "type(library nTokenHandler)"}}, "id": 19801, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getDepositParameters", "nodeType": "MemberAccess", "referencedDeclaration": 44016, "src": "5728:34:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 19808, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5728:142:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "VariableDeclarationStatement", "src": "5646:224:34"}, {"assignments": [19811], "declarations": [{"constant": false, "id": 19811, "mutability": "mutable", "name": "residualCash", "nodeType": "VariableDeclaration", "scope": 19935, "src": "6464:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19810, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6464:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 19812, "nodeType": "VariableDeclarationStatement", "src": "6464:19:34"}, {"assignments": [19814], "declarations": [{"constant": false, "id": 19814, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 19935, "src": "6493:30:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 19813, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "6493:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 19815, "nodeType": "VariableDeclarationStatement", "src": "6493:30:34"}, {"body": {"id": 19903, "nodeType": "Block", "src": "6625:1390:34", "statements": [{"assignments": [19829], "declarations": [{"constant": false, "id": 19829, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 19903, "src": "6639:18:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19828, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6639:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 19830, "nodeType": "VariableDeclarationStatement", "src": "6639:18:34"}, {"expression": {"arguments": [{"id": 19836, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19814, "src": "6772:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 19837, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19817, "src": "6796:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "74727565", "id": 19838, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "6825:4:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, {"id": 19839, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19789, "src": "6874:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 19831, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "6727:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19834, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "6727:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19835, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarket", "nodeType": "MemberAccess", "referencedDeclaration": 39100, "src": "6727:27:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$bound_to$_t_struct$_CashGroupParameters_$69754_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,uint256,bool,uint256) view"}}, "id": 19840, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6727:170:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19841, "nodeType": "ExpressionStatement", "src": "6727:170:34"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 19845, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 19842, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19814, "src": "7065:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 19843, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 69777, "src": "7065:21:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 19844, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7090:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "7065:26:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19847, "nodeType": "IfStatement", "src": "7061:40:34", "trueBody": {"id": 19846, "nodeType": "Continue", "src": "7093:8:34"}}, {"assignments": [19849], "declarations": [{"constant": false, "id": 19849, "mutability": "mutable", "name": "perMarketDeposit", "nodeType": "VariableDeclaration", "scope": 19903, "src": "7194:23:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19848, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7194:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 19865, "initialValue": {"arguments": [{"id": 19863, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19811, "src": "7393:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"expression": {"id": 19859, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "7335:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 19860, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 69461, "src": "7335:31:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"baseExpression": {"id": 19852, "name": "depositShares", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19796, "src": "7278:13:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 19856, "indexExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19855, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19853, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19817, "src": "7292:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"hexValue": "31", "id": 19854, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7306:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "7292:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7278:30:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19850, "name": "primeCashDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19787, "src": "7236:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19851, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 70916, "src": "7236:41:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 19857, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7236:73:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19858, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 70946, "src": "7236:98:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 19861, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7236:131:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19862, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 70998, "src": "7236:156:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 19864, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7236:170:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "7194:212:34"}, {"expression": {"id": 19881, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 19866, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19829, "src": "7422:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19867, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19811, "src": "7435:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 19868, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "7421:27:34", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 19870, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "7488:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 19871, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19814, "src": "7512:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 19872, "name": "perMarketDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19849, "src": "7536:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"id": 19873, "name": "leverageThresholds", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19799, "src": "7570:18:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 19877, "indexExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19876, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19874, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19817, "src": "7589:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"hexValue": "31", "id": 19875, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7603:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "7589:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7570:35:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19878, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19817, "src": "7623:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 19879, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19789, "src": "7652:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 19869, "name": "_lendOrAddLiquidity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20014, "src": "7451:19:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory,int256,int256,uint256,uint256) returns (int256,int256)"}}, "id": 19880, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7451:224:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "7421:254:34", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19882, "nodeType": "ExpressionStatement", "src": "7421:254:34"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 19885, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19883, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19829, "src": "7694:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 19884, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7709:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "7694:16:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19902, "nodeType": "IfStatement", "src": "7690:315:34", "trueBody": {"id": 19901, "nodeType": "Block", "src": "7712:293:34", "statements": [{"expression": {"arguments": [{"expression": {"id": 19889, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "7786:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19890, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "7786:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 19891, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "7827:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19892, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "7827:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19893, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "7827:27:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 19894, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19814, "src": "7876:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 19895, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 69771, "src": "7876:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 19896, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "7913:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19897, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 69667, "src": "7913:26:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 19898, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19829, "src": "7961:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19886, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48575, "src": "7730:19:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$48575_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 19888, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 48273, "src": "7730:34:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,uint256,uint256,int256) returns (int256)"}}, "id": 19899, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7730:260:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19900, "nodeType": "ExpressionStatement", "src": "7730:260:34"}]}}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 19824, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19822, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19817, "src": "6593:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 19823, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6607:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "6593:15:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19904, "initializationExpression": {"assignments": [19817], "declarations": [{"constant": false, "id": 19817, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 19904, "src": "6538:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19816, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6538:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 19821, "initialValue": {"expression": {"expression": {"id": 19818, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "6560:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19819, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "6560:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19820, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 69749, "src": "6560:31:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "6538:53:34"}, "loopExpression": {"expression": {"id": 19826, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "--", "prefix": false, "src": "6610:13:34", "subExpression": {"id": 19825, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19817, "src": "6610:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 19827, "nodeType": "ExpressionStatement", "src": "6610:13:34"}, "nodeType": "ForStatement", "src": "6533:1482:34"}, {"expression": {"arguments": [{"expression": {"id": 19910, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "8147:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19911, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "8147:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"expression": {"id": 19905, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "8113:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19908, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 69661, "src": "8113:21:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$69706_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 19909, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storeAssets", "nodeType": "MemberAccess", "referencedDeclaration": 49221, "src": "8113:33:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$69706_memory_ptr_$_t_address_$returns$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$bound_to$_t_struct$_PortfolioState_$69706_memory_ptr_$", "typeString": "function (struct PortfolioState memory,address) returns (bool,bytes32,uint8,uint40)"}}, "id": 19912, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8113:54:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$", "typeString": "tuple(bool,bytes32,uint8,uint40)"}}, "id": 19913, "nodeType": "ExpressionStatement", "src": "8113:54:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 19917, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19915, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19811, "src": "8277:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "30", "id": 19916, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8293:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8277:17:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6567617469766520726573696475616c2063617368", "id": 19918, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8296:24:34", "typeDescriptions": {"typeIdentifier": "t_stringliteral_5884bddeec4b22e486fe977553f9d735878f143ee0b8779f4c77a46c49db8ac3", "typeString": "literal_string \"Negative residual cash\""}, "value": "Negative residual cash"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_5884bddeec4b22e486fe977553f9d735878f143ee0b8779f4c77a46c49db8ac3", "typeString": "literal_string \"Negative residual cash\""}], "id": 19914, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "8269:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 19919, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8269:52:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19920, "nodeType": "ExpressionStatement", "src": "8269:52:34"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 19923, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 19921, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19811, "src": "8335:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 19922, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8350:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8335:16:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19934, "nodeType": "IfStatement", "src": "8331:468:34", "trueBody": {"id": 19933, "nodeType": "Block", "src": "8353:446:34", "statements": [{"expression": {"arguments": [{"expression": {"expression": {"id": 19927, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19785, "src": "8746:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19928, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "8746:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 19929, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "8746:27:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 19930, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19811, "src": "8775:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19924, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34310, "src": "8709:14:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$34310_$", "typeString": "type(library BalanceHandler)"}}, "id": 19926, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "incrementFeeToReserve", "nodeType": "MemberAccess", "referencedDeclaration": 33746, "src": "8709:36:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (uint16,int256)"}}, "id": 19931, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8709:79:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19932, "nodeType": "ExpressionStatement", "src": "8709:79:34"}]}}]}, "documentation": {"id": 19783, "nodeType": "StructuredDocumentation", "src": "5251:236:34", "text": "@notice Portions out primeCashDeposit into amounts to deposit into individual markets. When\n entering this method we know that primeCashDeposit is positive and the nToken has been\n initialized to have liquidity tokens."}, "id": 19936, "implemented": true, "kind": "function", "modifiers": [], "name": "_depositIntoPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 19790, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19785, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 19936, "src": "5532:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 19784, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "5532:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 19787, "mutability": "mutable", "name": "primeCashDeposit", "nodeType": "VariableDeclaration", "scope": 19936, "src": "5571:23:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19786, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5571:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 19789, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 19936, "src": "5604:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19788, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5604:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "5522:105:34"}, "returnParameters": {"id": 19791, "nodeType": "ParameterList", "parameters": [], "src": "5636:0:34"}, "scope": 20478, "src": "5492:3313:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 20013, "nodeType": "Block", "src": "9234:1451:34", "statements": [{"expression": {"id": 19958, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 19956, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19954, "src": "9316:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 19957, "name": "perMarketDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19943, "src": "9331:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "9316:31:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19959, "nodeType": "ExpressionStatement", "src": "9316:31:34"}, {"condition": {"arguments": [{"expression": {"id": 19961, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19939, "src": "9483:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19962, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "9483:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 19963, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19941, "src": "9501:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 19964, "name": "leverageThreshold", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19945, "src": "9509:17:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 19960, "name": "_isMarketOverLeveraged", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20053, "src": "9460:22:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_int256_$returns$_t_bool_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,int256) pure returns (bool)"}}, "id": 19965, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9460:67:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19994, "nodeType": "IfStatement", "src": "9456:704:34", "trueBody": {"id": 19993, "nodeType": "Block", "src": "9529:631:34", "statements": [{"expression": {"id": 19979, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 19966, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19954, "src": "9544:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19967, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19952, "src": "9558:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 19968, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "9543:27:34", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 19970, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19939, "src": "9608:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19971, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "9608:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 19972, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19941, "src": "9642:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 19973, "name": "perMarketDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19943, "src": "9666:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19974, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19949, "src": "9700:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 19975, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19947, "src": "9727:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 19976, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19939, "src": "9756:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19977, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "9756:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}], "id": 19969, "name": "_deleverageMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20266, "src": "9573:17:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_int256_$_t_uint256_$_t_uint256_$_t_address_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,int256,uint256,uint256,address) returns (int256,int256)"}}, "id": 19978, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9573:216:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "9543:246:34", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 19980, "nodeType": "ExpressionStatement", "src": "9543:246:34"}, {"condition": {"arguments": [{"expression": {"id": 19982, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19939, "src": "9985:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 19983, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "9985:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 19984, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19941, "src": "10003:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 19985, "name": "leverageThreshold", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19945, "src": "10011:17:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 19981, "name": "_isMarketOverLeveraged", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20053, "src": "9962:22:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_int256_$returns$_t_bool_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,int256) pure returns (bool)"}}, "id": 19986, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9962:67:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 19992, "nodeType": "IfStatement", "src": "9958:192:34", "trueBody": {"id": 19991, "nodeType": "Block", "src": "10031:119:34", "statements": [{"expression": {"components": [{"id": 19987, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19952, "src": "10109:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 19988, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19954, "src": "10122:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 19989, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10108:27:34", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "functionReturnParameters": 19955, "id": 19990, "nodeType": "Return", "src": "10101:34:34"}]}}]}}, {"expression": {"id": 20007, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 19995, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19952, "src": "10470:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 19999, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19939, "src": "10535:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 20000, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19941, "src": "10543:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20003, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20001, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19947, "src": "10551:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"hexValue": "31", "id": 20002, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10565:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "10551:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20004, "name": "residualCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19954, "src": "10568:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 19998, "name": "_addLiquidityToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20126, "src": "10513:21:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$69672_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory,uint256,int256) returns (int256)"}}, "id": 20005, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10513:68:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 19996, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19952, "src": "10484:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 19997, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 70998, "src": "10484:15:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20006, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10484:107:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10470:121:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20008, "nodeType": "ExpressionStatement", "src": "10470:121:34"}, {"expression": {"components": [{"id": 20009, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 19952, "src": "10663:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"hexValue": "30", "id": 20010, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10676:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 20011, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10662:16:34", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_rational_0_by_1_$", "typeString": "tuple(int256,int_const 0)"}}, "functionReturnParameters": 19955, "id": 20012, "nodeType": "Return", "src": "10655:23:34"}]}, "documentation": {"id": 19937, "nodeType": "StructuredDocumentation", "src": "8811:123:34", "text": "@notice For a given amount of cash to deposit, decides how much to lend or provide\n given the market conditions."}, "id": 20014, "implemented": true, "kind": "function", "modifiers": [], "name": "_lendOrAddLiquidity", "nodeType": "FunctionDefinition", "parameters": {"id": 19950, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19939, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 20014, "src": "8977:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 19938, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "8977:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 19941, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9016:30:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 19940, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "9016:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 19943, "mutability": "mutable", "name": "perMarketDeposit", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9056:23:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19942, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9056:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 19945, "mutability": "mutable", "name": "leverageThreshold", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9089:24:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19944, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9089:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 19947, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9123:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19946, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9123:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 19949, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9152:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 19948, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9152:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "8967:208:34"}, "returnParameters": {"id": 19955, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19952, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9193:18:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19951, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9193:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 19954, "mutability": "mutable", "name": "residualCash", "nodeType": "VariableDeclaration", "scope": 20014, "src": "9213:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 19953, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9213:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "9192:41:34"}, "scope": 20478, "src": "8939:1746:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 20052, "nodeType": "Block", "src": "11282:640:34", "statements": [{"assignments": [20027], "declarations": [{"constant": false, "id": 20027, "mutability": "mutable", "name": "totalCashUnderlying", "nodeType": "VariableDeclaration", "scope": 20052, "src": "11292:26:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20026, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11292:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20034, "initialValue": {"arguments": [{"expression": {"id": 20031, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20019, "src": "11361:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20032, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalPrimeCash", "nodeType": "MemberAccess", "referencedDeclaration": 69775, "src": "11361:21:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 20028, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20017, "src": "11321:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20029, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 69751, "src": "11321:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$70190_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 20030, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 47144, "src": "11321:39:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PrimeRate_$70190_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$70190_memory_ptr_$", "typeString": "function (struct PrimeRate memory,int256) pure returns (int256)"}}, "id": 20033, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11321:62:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "11292:91:34"}, {"expression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20049, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"expression": {"id": 20038, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "11800:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20039, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 69359, "src": "11800:24:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 20035, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20019, "src": "11778:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20036, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 69773, "src": "11778:17:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20037, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 70916, "src": "11778:21:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20040, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11778:47:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [{"arguments": [{"id": 20046, "name": "totalCashUnderlying", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20027, "src": "11884:19:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 20043, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20019, "src": "11862:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20044, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 69773, "src": "11862:17:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20045, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 70998, "src": "11862:21:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20047, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11862:42:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 20041, "name": "leverageThreshold", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20021, "src": "11840:17:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20042, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 70916, "src": "11840:21:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20048, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11840:65:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11778:127:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 20050, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "11764:151:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "functionReturnParameters": 20025, "id": 20051, "nodeType": "Return", "src": "11757:158:34"}]}, "documentation": {"id": 20015, "nodeType": "StructuredDocumentation", "src": "10691:400:34", "text": "@notice Markets are over levered when their proportion is greater than a governance set\n threshold. At this point, providing liquidity will incur too much negative fCash on the nToken\n account for the given amount of cash deposited, putting the nToken account at risk of liquidation.\n If the market is over leveraged, we call `deleverageMarket` to lend to the market instead."}, "id": 20053, "implemented": true, "kind": "function", "modifiers": [], "name": "_isMarketOverLeveraged", "nodeType": "FunctionDefinition", "parameters": {"id": 20022, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20017, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 20053, "src": "11137:36:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 20016, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69754, "src": "11137:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20019, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 20053, "src": "11183:30:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 20018, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "11183:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20021, "mutability": "mutable", "name": "leverageThreshold", "nodeType": "VariableDeclaration", "scope": 20053, "src": "11223:24:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20020, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11223:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "11127:126:34"}, "returnParameters": {"id": 20025, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20024, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 20053, "src": "11276:4:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 20023, "name": "bool", "nodeType": "ElementaryTypeName", "src": "11276:4:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "11275:6:34"}, "scope": 20478, "src": "11096:826:34", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 20125, "nodeType": "Block", "src": "12125:951:34", "statements": [{"assignments": [20067], "declarations": [{"constant": false, "id": 20067, "mutability": "mutable", "name": "asset", "nodeType": "VariableDeclaration", "scope": 20125, "src": "12174:27:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset"}, "typeName": {"id": 20066, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69767, "src": "12174:14:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_storage_ptr", "typeString": "struct PortfolioAsset"}}, "visibility": "internal"}], "id": 20073, "initialValue": {"baseExpression": {"expression": {"expression": {"id": 20068, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20055, "src": "12204:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20069, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 69661, "src": "12204:21:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$69706_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 20070, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 69698, "src": "12204:34:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$69767_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 20072, "indexExpression": {"id": 20071, "name": "index", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20059, "src": "12239:5:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "12204:41:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "nodeType": "VariableDeclarationStatement", "src": "12174:71:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 20093, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 20087, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20079, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 20075, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20067, "src": "12358:5:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 20076, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 69758, "src": "12358:14:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 20077, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20057, "src": "12376:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20078, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 69771, "src": "12376:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12358:33:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20086, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 20080, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20067, "src": "12488:5:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 20081, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 69760, "src": "12488:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20085, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20082, "name": "index", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20059, "src": "12507:5:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 20083, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "12515:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20084, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "MIN_LIQUIDITY_TOKEN_INDEX", "nodeType": "MemberAccess", "referencedDeclaration": 69422, "src": "12515:35:34", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "src": "12507:43:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12488:62:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "12358:192:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_enum$_AssetStorageState_$69600", "typeString": "enum AssetStorageState"}, "id": 20092, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 20088, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20067, "src": "12636:5:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 20089, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storageState", "nodeType": "MemberAccess", "referencedDeclaration": 69766, "src": "12636:18:34", "typeDescriptions": {"typeIdentifier": "t_enum$_AssetStorageState_$69600", "typeString": "enum AssetStorageState"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 20090, "name": "AssetStorageState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69600, "src": "12658:17:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_AssetStorageState_$69600_$", "typeString": "type(enum AssetStorageState)"}}, "id": 20091, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "NoChange", "nodeType": "MemberAccess", "src": "12658:26:34", "typeDescriptions": {"typeIdentifier": "t_enum$_AssetStorageState_$69600", "typeString": "enum AssetStorageState"}}, "src": "12636:48:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "12358:326:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "50543a20696e76616c6964206c697175696469747920746f6b656e", "id": 20094, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "12698:29:34", "typeDescriptions": {"typeIdentifier": "t_stringliteral_8ca4e1734519c1743217cec045bf3e7d7c78128f43e8dbbbee974093b725d092", "typeString": "literal_string \"PT: invalid liquidity token\""}, "value": "PT: invalid liquidity token"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_8ca4e1734519c1743217cec045bf3e7d7c78128f43e8dbbbee974093b725d092", "typeString": "literal_string \"PT: invalid liquidity token\""}], "id": 20074, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12337:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 20095, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12337:400:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 20096, "nodeType": "ExpressionStatement", "src": "12337:400:34"}, {"assignments": [20098, 20100], "declarations": [{"constant": false, "id": 20098, "mutability": "mutable", "name": "liquidityTokens", "nodeType": "VariableDeclaration", "scope": 20125, "src": "12841:22:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20097, "name": "int256", "nodeType": "ElementaryTypeName", "src": "12841:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 20100, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 20125, "src": "12865:18:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20099, "name": "int256", "nodeType": "ElementaryTypeName", "src": "12865:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20105, "initialValue": {"arguments": [{"id": 20103, "name": "perMarketDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20061, "src": "12907:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 20101, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20057, "src": "12887:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20102, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 41977, "src": "12887:19:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$69784_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 20104, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12887:37:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "VariableDeclarationStatement", "src": "12840:84:34"}, {"expression": {"id": 20114, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 20106, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20067, "src": "12934:5:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 20108, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 69762, "src": "12934:14:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 20112, "name": "liquidityTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20098, "src": "12970:15:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 20109, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20067, "src": "12951:5:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 20110, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 69762, "src": "12951:14:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20111, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 70998, "src": "12951:18:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20113, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12951:35:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12934:52:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20115, "nodeType": "ExpressionStatement", "src": "12934:52:34"}, {"expression": {"id": 20121, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 20116, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20067, "src": "12996:5:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$69767_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 20118, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "storageState", "nodeType": "MemberAccess", "referencedDeclaration": 69766, "src": "12996:18:34", "typeDescriptions": {"typeIdentifier": "t_enum$_AssetStorageState_$69600", "typeString": "enum AssetStorageState"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 20119, "name": "AssetStorageState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69600, "src": "13017:17:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_AssetStorageState_$69600_$", "typeString": "type(enum AssetStorageState)"}}, "id": 20120, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Update", "nodeType": "MemberAccess", "src": "13017:24:34", "typeDescriptions": {"typeIdentifier": "t_enum$_AssetStorageState_$69600", "typeString": "enum AssetStorageState"}}, "src": "12996:45:34", "typeDescriptions": {"typeIdentifier": "t_enum$_AssetStorageState_$69600", "typeString": "enum AssetStorageState"}}, "id": 20122, "nodeType": "ExpressionStatement", "src": "12996:45:34"}, {"expression": {"id": 20123, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20100, "src": "13058:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 20065, "id": 20124, "nodeType": "Return", "src": "13051:18:34"}]}, "id": 20126, "implemented": true, "kind": "function", "modifiers": [], "name": "_addLiquidityToMarket", "nodeType": "FunctionDefinition", "parameters": {"id": 20062, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20055, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 20126, "src": "11968:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 20054, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "11968:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 20057, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 20126, "src": "12007:30:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 20056, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "12007:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20059, "mutability": "mutable", "name": "index", "nodeType": "VariableDeclaration", "scope": 20126, "src": "12047:13:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20058, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12047:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 20061, "mutability": "mutable", "name": "perMarketDeposit", "nodeType": "VariableDeclaration", "scope": 20126, "src": "12070:23:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20060, "name": "int256", "nodeType": "ElementaryTypeName", "src": "12070:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "11958:141:34"}, "returnParameters": {"id": 20065, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20064, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 20126, "src": "12117:6:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20063, "name": "int256", "nodeType": "ElementaryTypeName", "src": "12117:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "12116:8:34"}, "scope": 20478, "src": "11928:1148:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 20265, "nodeType": "Block", "src": "13529:3022:34", "statements": [{"assignments": [20147], "declarations": [{"constant": false, "id": 20147, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 20265, "src": "13539:22:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20146, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13539:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 20153, "initialValue": {"arguments": [{"id": 20151, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20135, "src": "13584:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 20148, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20131, "src": "13564:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20149, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 69771, "src": "13564:15:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20150, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 71403, "src": "13564:19:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 20152, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13564:30:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13539:55:34"}, {"assignments": [20155], "declarations": [{"constant": false, "id": 20155, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 20265, "src": "13604:18:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20154, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13604:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20156, "nodeType": "VariableDeclarationStatement", "src": "13604:18:34"}, {"id": 20225, "nodeType": "Block", "src": "13632:2036:34", "statements": [{"assignments": [20158], "declarations": [{"constant": false, "id": 20158, "mutability": "mutable", "name": "assumedExchangeRate", "nodeType": "VariableDeclaration", "scope": 20225, "src": "13929:26:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20157, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13929:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20159, "nodeType": "VariableDeclarationStatement", "src": "13929:26:34"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20164, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 20160, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20131, "src": "13973:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20161, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 69779, "src": "13973:22:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 20162, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "13998:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20163, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DELEVERAGE_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 69378, "src": "13998:27:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13973:52:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 20184, "nodeType": "Block", "src": "14177:224:34", "statements": [{"expression": {"id": 20182, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20171, "name": "assumedExchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20158, "src": "14195:19:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"expression": {"id": 20177, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "14304:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20178, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DELEVERAGE_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 69378, "src": "14304:27:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 20174, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20131, "src": "14277:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20175, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 69779, "src": "14277:22:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20176, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 71403, "src": "14277:26:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 20179, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14277:55:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20180, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20147, "src": "14354:14:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20172, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 41849, "src": "14217:17:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$41849_$", "typeString": "type(library InterestRateCurve)"}}, "id": 20173, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getfCashExchangeRate", "nodeType": "MemberAccess", "referencedDeclaration": 41589, "src": "14217:38:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 20181, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14217:169:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "14195:191:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20183, "nodeType": "ExpressionStatement", "src": "14195:191:34"}]}, "id": 20185, "nodeType": "IfStatement", "src": "13969:432:34", "trueBody": {"id": 20170, "nodeType": "Block", "src": "14027:144:34", "statements": [{"expression": {"id": 20168, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20165, "name": "assumedExchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20158, "src": "14110:19:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 20166, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "14132:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20167, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 69359, "src": "14132:24:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "14110:46:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20169, "nodeType": "ExpressionStatement", "src": "14110:46:34"}]}}, {"assignments": [20187], "declarations": [{"constant": false, "id": 20187, "mutability": "mutable", "name": "perMarketDepositUnderlying", "nodeType": "VariableDeclaration", "scope": 20225, "src": "14415:33:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20186, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14415:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20193, "initialValue": {"arguments": [{"id": 20191, "name": "perMarketDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20133, "src": "14507:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 20188, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20129, "src": "14467:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20189, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 69751, "src": "14467:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$70190_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 20190, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 47144, "src": "14467:39:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PrimeRate_$70190_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$70190_memory_ptr_$", "typeString": "function (struct PrimeRate memory,int256) pure returns (int256)"}}, "id": 20192, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14467:57:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "14415:109:34"}, {"assignments": [20195], "declarations": [{"constant": false, "id": 20195, "mutability": "mutable", "name": "fCashAmountAssumed", "nodeType": "VariableDeclaration", "scope": 20225, "src": "14587:25:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20194, "name": "int256", "nodeType": "ElementaryTypeName", "src": "14587:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20200, "initialValue": {"arguments": [{"id": 20198, "name": "assumedExchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20158, "src": "14661:19:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 20196, "name": "perMarketDepositUnderlying", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20187, "src": "14615:26:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20197, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mulInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 71095, "src": "14615:45:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20199, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14615:66:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "14587:94:34"}, {"expression": {"id": 20209, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20201, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20155, "src": "14695:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 20203, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20129, "src": "14748:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 20204, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20131, "src": "14759:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 20205, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20137, "src": "14767:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20206, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20147, "src": "14780:14:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20207, "name": "perMarketDepositUnderlying", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20187, "src": "14796:26:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 20202, "name": "_getActualfCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20309, "src": "14709:21:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,uint256,uint256,int256) returns (int256)"}}, "id": 20208, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14709:127:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "14695:141:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20210, "nodeType": "ExpressionStatement", "src": "14695:141:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20214, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "30", "id": 20212, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15047:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 20213, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20155, "src": "15051:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "15047:15:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "44656c6576657261676520427566666572", "id": 20215, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "15064:19:34", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0c7e15f79a95dc588a6fbb65c9c5c501c62b1bc30947917d100b3068644aed2e", "typeString": "literal_string \"Deleverage Buffer\""}, "value": "Deleverage Buffer"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0c7e15f79a95dc588a6fbb65c9c5c501c62b1bc30947917d100b3068644aed2e", "typeString": "literal_string \"Deleverage Buffer\""}], "id": 20211, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "15039:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 20216, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15039:45:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 20217, "nodeType": "ExpressionStatement", "src": "15039:45:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20221, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20219, "name": "fCashAmountAssumed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20195, "src": "15602:18:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 20220, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20155, "src": "15624:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "15602:33:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "44656c6576657261676520427566666572", "id": 20222, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "15637:19:34", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0c7e15f79a95dc588a6fbb65c9c5c501c62b1bc30947917d100b3068644aed2e", "typeString": "literal_string \"Deleverage Buffer\""}, "value": "Deleverage Buffer"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0c7e15f79a95dc588a6fbb65c9c5c501c62b1bc30947917d100b3068644aed2e", "typeString": "literal_string \"Deleverage Buffer\""}], "id": 20218, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "15594:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 20223, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15594:63:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 20224, "nodeType": "ExpressionStatement", "src": "15594:63:34"}]}, {"assignments": [20227, null], "declarations": [{"constant": false, "id": 20227, "mutability": "mutable", "name": "netPrimeCash", "nodeType": "VariableDeclaration", "scope": 20265, "src": "15679:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20226, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15679:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, null], "id": 20236, "initialValue": {"arguments": [{"id": 20230, "name": "tokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20139, "src": "15742:12:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 20231, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20129, "src": "15756:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 20232, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20155, "src": "15767:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 20233, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20147, "src": "15780:14:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20234, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20137, "src": "15796:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20228, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20131, "src": "15709:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20229, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "executeTrade", "nodeType": "MemberAccess", "referencedDeclaration": 42145, "src": "15709:19:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$69784_memory_ptr_$_t_address_$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_int256_$_t_uint256_$bound_to$_t_struct$_MarketParameters_$69784_memory_ptr_$", "typeString": "function (struct MarketParameters memory,address,struct CashGroupParameters memory,int256,uint256,uint256) returns (int256,uint256)"}}, "id": 20235, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15709:108:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_uint256_$", "typeString": "tuple(int256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "15678:139:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20240, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20238, "name": "netPrimeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20227, "src": "16029:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 20239, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "16044:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "16029:16:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 20237, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "16021:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 20241, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16021:25:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 20242, "nodeType": "ExpressionStatement", "src": "16021:25:34"}, {"assignments": [20244], "declarations": [{"constant": false, "id": 20244, "mutability": "mutable", "name": "residual", "nodeType": "VariableDeclaration", "scope": 20265, "src": "16247:15:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20243, "name": "int256", "nodeType": "ElementaryTypeName", "src": "16247:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20249, "initialValue": {"arguments": [{"id": 20247, "name": "netPrimeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20227, "src": "16286:12:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 20245, "name": "perMarketDeposit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20133, "src": "16265:16:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20246, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 70998, "src": "16265:20:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20248, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16265:34:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "16247:52:34"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 20257, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20253, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "30", "id": 20251, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "16451:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 20252, "name": "residual", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20244, "src": "16456:8:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "16451:13:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20256, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20254, "name": "residual", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20244, "src": "16468:8:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "353030", "id": 20255, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "16479:3:34", "typeDescriptions": {"typeIdentifier": "t_rational_500_by_1", "typeString": "int_const 500"}, "value": "500"}, "src": "16468:14:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "16451:31:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "44656c6576657261676520427566666572", "id": 20258, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "16484:19:34", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0c7e15f79a95dc588a6fbb65c9c5c501c62b1bc30947917d100b3068644aed2e", "typeString": "literal_string \"Deleverage Buffer\""}, "value": "Deleverage Buffer"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0c7e15f79a95dc588a6fbb65c9c5c501c62b1bc30947917d100b3068644aed2e", "typeString": "literal_string \"Deleverage Buffer\""}], "id": 20250, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "16443:7:34", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 20259, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16443:61:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 20260, "nodeType": "ExpressionStatement", "src": "16443:61:34"}, {"expression": {"components": [{"id": 20261, "name": "residual", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20244, "src": "16522:8:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 20262, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20155, "src": "16532:11:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 20263, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "16521:23:34", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "functionReturnParameters": 20145, "id": 20264, "nodeType": "Return", "src": "16514:30:34"}]}, "documentation": {"id": 20127, "nodeType": "StructuredDocumentation", "src": "13082:171:34", "text": "@notice Lends into the market to reduce the leverage that the nToken will add liquidity at. May fail due\n to slippage or result in some amount of residual cash."}, "id": 20266, "implemented": true, "kind": "function", "modifiers": [], "name": "_deleverageMarket", "nodeType": "FunctionDefinition", "parameters": {"id": 20140, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20129, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13294:36:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 20128, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69754, "src": "13294:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20131, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13340:30:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 20130, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "13340:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20133, "mutability": "mutable", "name": "perMarketDeposit", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13380:23:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20132, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13380:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 20135, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13413:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20134, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13413:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 20137, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13440:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20136, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13440:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 20139, "mutability": "mutable", "name": "tokenAddress", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13469:20:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 20138, "name": "address", "nodeType": "ElementaryTypeName", "src": "13469:7:34", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "13284:211:34"}, "returnParameters": {"id": 20145, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20142, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13513:6:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20141, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13513:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 20144, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 20266, "src": "13521:6:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20143, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13521:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "13512:16:34"}, "scope": 20478, "src": "13258:3293:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 20308, "nodeType": "Block", "src": "17009:517:34", "statements": [{"assignments": [20283], "declarations": [{"constant": false, "id": 20283, "mutability": "mutable", "name": "irParams", "nodeType": "VariableDeclaration", "scope": 20308, "src": "17019:38:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$69908_memory_ptr", "typeString": "struct InterestRateParameters"}, "typeName": {"id": 20282, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69908, "src": "17019:22:34", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$69908_storage_ptr", "typeString": "struct InterestRateParameters"}}, "visibility": "internal"}], "id": 20290, "initialValue": {"arguments": [{"expression": {"id": 20286, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20269, "src": "17123:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20287, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "17123:20:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 20288, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20273, "src": "17145:11:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20284, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 41849, "src": "17060:17:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$41849_$", "typeString": "type(library InterestRateCurve)"}}, "id": 20285, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getActiveInterestRateParameters", "nodeType": "MemberAccess", "referencedDeclaration": 40642, "src": "17060:49:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint16_$_t_uint256_$returns$_t_struct$_InterestRateParameters_$69908_memory_ptr_$", "typeString": "function (uint16,uint256) view returns (struct InterestRateParameters memory)"}}, "id": 20289, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17060:106:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$69908_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "17019:147:34"}, {"expression": {"arguments": [{"id": 20293, "name": "irParams", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20283, "src": "17239:8:34", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$69908_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, {"expression": {"id": 20294, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20271, "src": "17261:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20295, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 69773, "src": "17261:17:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 20296, "name": "perMarketDepositUnderlying", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20277, "src": "17373:26:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20297, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 71012, "src": "17373:30:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 20298, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17373:32:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"expression": {"id": 20302, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20271, "src": "17459:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 20303, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalPrimeCash", "nodeType": "MemberAccess", "referencedDeclaration": 69775, "src": "17459:21:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 20299, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20269, "src": "17419:9:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20300, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 69751, "src": "17419:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$70190_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 20301, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 47144, "src": "17419:39:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PrimeRate_$70190_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$70190_memory_ptr_$", "typeString": "function (struct PrimeRate memory,int256) pure returns (int256)"}}, "id": 20304, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17419:62:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 20305, "name": "timeToMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20275, "src": "17495:14:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_InterestRateParameters_$69908_memory_ptr", "typeString": "struct InterestRateParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20291, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 41849, "src": "17184:17:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$41849_$", "typeString": "type(library InterestRateCurve)"}}, "id": 20292, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getfCashGivenCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 41770, "src": "17184:41:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$69908_memory_ptr_$_t_int256_$_t_int256_$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct InterestRateParameters memory,int256,int256,int256,uint256) pure returns (int256)"}}, "id": 20306, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17184:335:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 20281, "id": 20307, "nodeType": "Return", "src": "17177:342:34"}]}, "documentation": {"id": 20267, "nodeType": "StructuredDocumentation", "src": "16557:195:34", "text": "@notice Returns the amount of fCash that will be purchased for the given per market deposit, is used\n to reduce the potential of residual cash as a result of lending during deleverage."}, "id": 20309, "implemented": true, "kind": "function", "modifiers": [], "name": "_getActualfCashAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 20278, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20269, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 20309, "src": "16797:36:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 20268, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69754, "src": "16797:19:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20271, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 20309, "src": "16843:30:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 20270, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "16843:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 20273, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 20309, "src": "16883:19:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20272, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16883:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 20275, "mutability": "mutable", "name": "timeToMaturity", "nodeType": "VariableDeclaration", "scope": 20309, "src": "16912:22:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20274, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16912:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 20277, "mutability": "mutable", "name": "perMarketDepositUnderlying", "nodeType": "VariableDeclaration", "scope": 20309, "src": "16944:33:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20276, "name": "int256", "nodeType": "ElementaryTypeName", "src": "16944:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "16787:196:34"}, "returnParameters": {"id": 20281, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20280, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 20309, "src": "17001:6:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20279, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17001:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "17000:8:34"}, "scope": 20478, "src": "16757:769:34", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 20476, "nodeType": "Block", "src": "17998:3404:34", "statements": [{"assignments": [20323], "declarations": [{"constant": false, "id": 20323, "mutability": "mutable", "name": "assetsBitmap", "nodeType": "VariableDeclaration", "scope": 20476, "src": "18008:20:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 20322, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "18008:7:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "id": 20332, "initialValue": {"arguments": [{"expression": {"id": 20326, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "18067:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20327, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "18067:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 20328, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "18088:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20329, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "18088:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20330, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "18088:27:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 20324, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48575, "src": "18031:19:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$48575_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 20325, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getAssetsBitmap", "nodeType": "MemberAccess", "referencedDeclaration": 47954, "src": "18031:35:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bytes32_$", "typeString": "function (address,uint256) view returns (bytes32)"}}, "id": 20331, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18031:85:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "VariableDeclarationStatement", "src": "18008:108:34"}, {"assignments": [20334], "declarations": [{"constant": false, "id": 20334, "mutability": "mutable", "name": "oracleRateBuffer", "nodeType": "VariableDeclaration", "scope": 20476, "src": "18338:24:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20333, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18338:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 20349, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20348, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"expression": {"id": 20339, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "18391:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20340, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "parameters", "nodeType": "MemberAccess", "referencedDeclaration": 69669, "src": "18391:17:34", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 20343, "indexExpression": {"expression": {"id": 20341, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "18409:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20342, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "CASH_WITHHOLDING_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 69467, "src": "18409:33:34", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "18391:52:34", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 20338, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "18385:5:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 20337, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "18385:5:34", "typeDescriptions": {}}}, "id": 20344, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18385:59:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 20336, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "18377:7:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 20335, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18377:7:34", "typeDescriptions": {}}}, "id": 20345, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18377:68:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 20346, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "18448:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20347, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "TEN_BASIS_POINTS", "nodeType": "MemberAccess", "referencedDeclaration": 69388, "src": "18448:26:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "18377:97:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "18338:136:34"}, {"assignments": [20351], "declarations": [{"constant": false, "id": 20351, "mutability": "mutable", "name": "oracleRateBlockTime", "nodeType": "VariableDeclaration", "scope": 20476, "src": "18941:27:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20350, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18941:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 20363, "initialValue": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20355, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 20352, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20315, "src": "18971:15:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$69784_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 20353, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "18971:22:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 20354, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18997:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "18971:27:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"arguments": [{"expression": {"id": 20359, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 69514, "src": "19027:9:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$69514_$", "typeString": "type(library Constants)"}}, "id": 20360, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 69321, "src": "19027:17:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20357, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20317, "src": "19013:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20358, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 71403, "src": "19013:13:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 20361, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19013:32:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20362, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "18971:74:34", "trueExpression": {"id": 20356, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20317, "src": "19001:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "18941:104:34"}, {"assignments": [20365], "declarations": [{"constant": false, "id": 20365, "mutability": "mutable", "name": "bitNum", "nodeType": "VariableDeclaration", "scope": 20476, "src": "19056:14:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20364, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19056:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 20369, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 20366, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20323, "src": "19073:12:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 20367, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 76511, "src": "19073:26:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 20368, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19073:28:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "19056:45:34"}, {"body": {"id": 20467, "nodeType": "Block", "src": "19131:2177:34", "statements": [{"assignments": [20374], "declarations": [{"constant": false, "id": 20374, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 20467, "src": "19229:16:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20373, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19229:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 20381, "initialValue": {"arguments": [{"expression": {"id": 20377, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "19279:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20378, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 69667, "src": "19279:26:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20379, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20365, "src": "19307:6:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20375, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 70859, "src": "19248:8:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$70859_$", "typeString": "type(library DateTime)"}}, "id": 20376, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getMaturityFromBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 70858, "src": "19248:30:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 20380, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19248:66:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "19229:85:34"}, {"assignments": [20383], "declarations": [{"constant": false, "id": 20383, "mutability": "mutable", "name": "isValidMarket", "nodeType": "VariableDeclaration", "scope": 20467, "src": "19328:18:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 20382, "name": "bool", "nodeType": "ElementaryTypeName", "src": "19328:4:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "id": 20392, "initialValue": {"arguments": [{"expression": {"expression": {"id": 20386, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "19397:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20387, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "19397:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20388, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 69749, "src": "19397:31:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20389, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20374, "src": "19446:8:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20390, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20317, "src": "19472:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20384, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 70859, "src": "19349:8:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$70859_$", "typeString": "type(library DateTime)"}}, "id": 20385, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isValidMarketMaturity", "nodeType": "MemberAccess", "referencedDeclaration": 70421, "src": "19349:30:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256,uint256,uint256) pure returns (bool)"}}, "id": 20391, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19349:146:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "VariableDeclarationStatement", "src": "19328:167:34"}, {"condition": {"id": 20394, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "!", "prefix": true, "src": "19576:14:34", "subExpression": {"id": 20393, "name": "isValidMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20383, "src": "19577:13:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 20452, "nodeType": "IfStatement", "src": "19572:1553:34", "trueBody": {"id": 20451, "nodeType": "Block", "src": "19592:1533:34", "statements": [{"assignments": [20396], "declarations": [{"constant": false, "id": 20396, "mutability": "mutable", "name": "notional", "nodeType": "VariableDeclaration", "scope": 20451, "src": "19610:15:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20395, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19610:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 20406, "initialValue": {"arguments": [{"expression": {"id": 20399, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "19711:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20400, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 69671, "src": "19711:19:34", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 20401, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "19756:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20402, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "19756:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20403, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 69747, "src": "19756:27:34", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 20404, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20374, "src": "19809:8:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20397, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48575, "src": "19648:19:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$48575_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 20398, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getifCashNotional", "nodeType": "MemberAccess", "referencedDeclaration": 48025, "src": "19648:37:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256) view returns (int256)"}}, "id": 20405, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19648:191:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "19610:229:34"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 20409, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20407, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20396, "src": "19933:8:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 20408, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19944:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "19933:12:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 20450, "nodeType": "IfStatement", "src": "19929:1182:34", "trueBody": {"id": 20449, "nodeType": "Block", "src": "19947:1164:34", "statements": [{"assignments": [20411], "declarations": [{"constant": false, "id": 20411, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 20449, "src": "20590:18:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20410, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20590:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 20418, "initialValue": {"arguments": [{"id": 20415, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20374, "src": "20648:8:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20416, "name": "oracleRateBlockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20351, "src": "20658:19:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 20412, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "20611:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20413, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "20611:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20414, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 39395, "src": "20611:36:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$69754_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$69754_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 20417, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20611:67:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "20590:88:34"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20421, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20419, "name": "oracleRateBuffer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20334, "src": "20705:16:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 20420, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20411, "src": "20724:10:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20705:29:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 20434, "nodeType": "Block", "src": "20805:94:34", "statements": [{"expression": {"id": 20432, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20427, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20411, "src": "20831:10:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 20430, "name": "oracleRateBuffer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20334, "src": "20859:16:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20428, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20411, "src": "20844:10:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20429, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 71403, "src": "20844:14:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 20431, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20844:32:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20831:45:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20433, "nodeType": "ExpressionStatement", "src": "20831:45:34"}]}, "id": 20435, "nodeType": "IfStatement", "src": "20701:198:34", "trueBody": {"id": 20426, "nodeType": "Block", "src": "20736:63:34", "statements": [{"expression": {"id": 20424, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20422, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20411, "src": "20762:10:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 20423, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20775:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "20762:14:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20425, "nodeType": "ExpressionStatement", "src": "20762:14:34"}]}}, {"expression": {"id": 20447, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20436, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20320, "src": "20921:20:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 20441, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20396, "src": "21028:8:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 20442, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20374, "src": "21038:8:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20443, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20317, "src": "21048:9:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 20444, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20411, "src": "21059:10:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 20439, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 51157, "src": "20994:12:34", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$51157_$", "typeString": "type(library AssetHandler)"}}, "id": 20440, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getPresentfCashValue", "nodeType": "MemberAccess", "referencedDeclaration": 50871, "src": "20994:33:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256,uint256,uint256) pure returns (int256)"}}, "id": 20445, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20994:76:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 20437, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20320, "src": "20944:20:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20438, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 70972, "src": "20944:24:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 20446, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20944:148:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "20921:171:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 20448, "nodeType": "ExpressionStatement", "src": "20921:171:34"}]}}]}}, {"expression": {"id": 20459, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20453, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20323, "src": "21197:12:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 20456, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20365, "src": "21232:6:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 20457, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "21240:5:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "expression": {"id": 20454, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20323, "src": "21212:12:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 20455, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBit", "nodeType": "MemberAccess", "referencedDeclaration": 76227, "src": "21212:19:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_bool_$returns$_t_bytes32_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,uint256,bool) pure returns (bytes32)"}}, "id": 20458, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21212:34:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "21197:49:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 20460, "nodeType": "ExpressionStatement", "src": "21197:49:34"}, {"expression": {"id": 20465, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 20461, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20365, "src": "21260:6:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 20462, "name": "assetsBitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20323, "src": "21269:12:34", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 20463, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNextBitNum", "nodeType": "MemberAccess", "referencedDeclaration": 76511, "src": "21269:26:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_uint256_$bound_to$_t_bytes32_$", "typeString": "function (bytes32) pure returns (uint256)"}}, "id": 20464, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21269:28:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21260:37:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 20466, "nodeType": "ExpressionStatement", "src": "21260:37:34"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 20372, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 20370, "name": "bitNum", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20365, "src": "19118:6:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 20371, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19128:1:34", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "19118:11:34", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 20468, "nodeType": "WhileStatement", "src": "19111:2197:34"}, {"expression": {"arguments": [{"id": 20473, "name": "totalCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20320, "src": "21374:20:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 20469, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20312, "src": "21325:6:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 20470, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 69659, "src": "21325:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$69754_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 20471, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 69751, "src": "21325:26:34", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$70190_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 20472, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertFromUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 47179, "src": "21325:48:34", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PrimeRate_$70190_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$70190_memory_ptr_$", "typeString": "function (struct PrimeRate memory,int256) pure returns (int256)"}}, "id": 20474, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21325:70:34", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 20321, "id": 20475, "nodeType": "Return", "src": "21318:77:34"}]}, "documentation": {"id": 20310, "nodeType": "StructuredDocumentation", "src": "17532:243:34", "text": "@notice If a nToken incurs a negative fCash residual as a result of lending, this means\n that we are going to need to withhold some amount of cash so that market makers can purchase and\n clear the debts off the balance sheet."}, "id": 20477, "implemented": true, "kind": "function", "modifiers": [], "name": "getNTokenNegativefCashWithholding", "nodeType": "FunctionDefinition", "parameters": {"id": 20318, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20312, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 20477, "src": "17832:29:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 20311, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69672, "src": "17832:15:34", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$69672_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 20315, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 20477, "src": "17871:41:34", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$69784_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 20313, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 69784, "src": "17871:16:34", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$69784_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 20314, "nodeType": "ArrayTypeName", "src": "17871:18:34", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$69784_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 20317, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 20477, "src": "17922:17:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20316, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "17922:7:34", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "17822:123:34"}, "returnParameters": {"id": 20321, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 20320, "mutability": "mutable", "name": "totalCashWithholding", "nodeType": "VariableDeclaration", "scope": 20477, "src": "17969:27:34", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 20319, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17969:6:34", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "17968:29:34"}, "scope": 20478, "src": "17780:3622:34", "stateMutability": "view", "virtual": false, "visibility": "internal"}], "scope": 20479, "src": "1376:20028:34"}], "src": "37:21367:34"}, "bytecode": "", "bytecodeSha1": "3b6334ef7ae6720b312843c76edf406db9fb6016", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.7.6+commit.7338295f"}, "contractName": "nTokenMintAction", "coverageMap": {"branches": {"124": {}, "130": {}, "132": {}, "135": {}, "138": {}, "140": {}, "141": {}, "142": {}, "143": {}, "145": {}, "147": {}, "148": {}, "34": {"nTokenMintAction._addLiquidityToMarket": {"619": [12358, 12391, false], "620": [12488, 12550, false], "621": [12636, 12684, true]}, "nTokenMintAction._deleverageMarket": {"613": [13973, 14025, false], "614": [15047, 15062, true], "615": [15602, 15635, true], "616": [16029, 16045, true], "617": [16451, 16464, false], "618": [16468, 16482, true]}, "nTokenMintAction._depositIntoPortfolio": {"608": [7694, 7710, false], "609": [8277, 8294, true], "610": [8335, 8351, false]}, "nTokenMintAction._lendOrAddLiquidity": {"611": [9460, 9527, false], "612": [9962, 10029, false]}, "nTokenMintAction._nTokenMint": {"606": [4186, 4203, true], "607": [4752, 4782, false]}, "nTokenMintAction.getNTokenNegativefCashWithholding": {"602": [18971, 18998, true], "603": [19577, 19590, false], "604": [19933, 19945, false], "605": [20705, 20734, false]}, "nTokenMintAction.sweepCashIntoMarkets": {"600": [2704, 2747, true], "601": [3037, 3071, true]}}, "50": {}, "54": {}, "55": {}, "56": {}, "59": {}, "60": {}, "61": {"Emitter.emitChangefCashLiquidity": {"777": [7781, 7798, false]}, "Emitter.emitNTokenMint": {"775": [15348, 15364, false], "776": [15368, 15388, false]}, "Emitter.emitTransferfCash": {"778": [8139, 8150, false], "779": [8427, 8437, false]}}, "62": {"BalanceHandler._setPositiveCashBalance": {"711": [17529, 17548, true]}, "BalanceHandler.getPositiveCashBalance": {"712": [17125, 17141, true]}, "BalanceHandler.incrementFeeToReserve": {"713": [15362, 15370, true]}}, "63": {}, "64": {}, "65": {}, "66": {}, "67": {}, "71": {"CashGroup.calculateOracleRate": {"737": [9202, 9215, false], "738": [9817, 9833, false]}, "CashGroup.calculateRiskAdjustedDebtOracleRate": {"744": [8580, 8604, false], "745": [8737, 8763, false]}, "CashGroup.calculateRiskAdjustedfCashOracleRate": {"746": [8002, 8028, false]}, "CashGroup.interpolateOracleRate": {"739": [6242, 6271, true], "740": [6345, 6373, true], "741": [6609, 6630, false]}, "CashGroup.loadMarket": {"742": [5305, 5321, false], "743": [5325, 5364, true]}}, "72": {"DateTime.getBitNumFromMaturity": {"769": [4231, 4260, false], "770": [4335, 4360, false], "771": [4628, 4666, false], "772": [4728, 4767, false], "773": [5610, 5650, false], "774": [6060, 6102, false]}, "DateTime.getMarketIndex": {"765": [3175, 3193, true], "766": [3212, 3263, true], "767": [3535, 3561, false], "768": [3678, 3703, false]}, "DateTime.getMaturityFromBitNum": {"748": [6970, 6981, true], "749": [7053, 7066, true], "750": [7218, 7253, false], "751": [7335, 7371, false], "752": [7715, 7753, false]}, "DateTime.getReferenceTime": {"747": [445, 475, true]}, "DateTime.getTimeUTC0": {"757": [688, 709, true]}, "DateTime.getTradedMarket": {"758": [1034, 1044, false], "759": [1084, 1094, false], "760": [1138, 1148, false], "761": [1185, 1195, false], "762": [1236, 1246, false], "763": [1287, 1297, false], "764": [1339, 1349, false]}, "DateTime.isValidMarketMaturity": {"753": [1685, 1703, true], "754": [1747, 1798, true], "755": [1840, 1873, false], "756": [2023, 2072, false]}}, "74": {"InterestRateCurve._getMarketIndexOffset": {"806": [2338, 2353, true], "807": [2372, 2420, true], "808": [2446, 2461, true]}, "InterestRateCurve._getNetCashAmountsUnderlying": {"794": [23070, 23117, false], "795": [23651, 23694, true]}, "InterestRateCurve._getfCashInterestRateParams": {"793": [2821, 2836, true]}, "InterestRateCurve.calculateMaxRate": {"809": [3274, 3317, true]}, "InterestRateCurve.calculatefCashTrade": {"788": [19486, 19501, true], "789": [19769, 19804, false], "790": [20675, 20702, false], "791": [21242, 21289, false], "792": [21614, 21639, false]}, "InterestRateCurve.getInterestRate": {"798": [12812, 12832, true], "799": [13163, 13211, true], "800": [13227, 13267, false], "801": [13483, 13523, false]}, "InterestRateCurve.getPostFeeInterestRate": {"802": [17668, 17697, false], "803": [17742, 17771, false], "804": [17817, 17825, false], "805": [18153, 18181, true]}, "InterestRateCurve.getfCashGivenCashAmount": {"783": [28349, 28376, true], "784": [28452, 28497, true], "785": [28857, 28883, true], "786": [28996, 29022, false], "787": [30021, 30036, false]}, "InterestRateCurve.getfCashUtilization": {"796": [12202, 12217, true], "797": [12236, 12260, true]}, "InterestRateCurve.updateRateOracle": {"780": [10916, 10940, true], "781": [11088, 11114, false], "782": [11280, 11311, false]}}, "75": {"Market._setMarketStorage": {"815": [9074, 9089, false], "816": [9093, 9123, true], "817": [9178, 9197, false], "818": [9201, 9235, true], "819": [9294, 9313, false], "820": [9317, 9352, true], "821": [9412, 9426, false], "822": [9430, 9460, true], "823": [9541, 9578, true]}, "Market._setTotalLiquidity": {"824": [8635, 8654, false], "825": [8658, 8692, true]}, "Market.addLiquidity": {"812": [1099, 1124, true], "813": [1160, 1174, false], "814": [1207, 1220, true]}, "Market.executeTrade": {"811": [3446, 3463, false]}, "Market.getOracleRate": {"810": [5212, 5226, true]}}, "76": {"nTokenCalculations._getIfCashResidualPrimePV": {"912": [7069, 7084, false]}, "nTokenCalculations.calculateTokensToMint": {"904": [1298, 1321, true], "905": [1368, 1391, false], "906": [1416, 1447, false], "907": [1803, 1829, true], "908": [2279, 2301, true], "909": [2324, 2344, true], "910": [2726, 2762, true]}, "nTokenCalculations.getNTokenMarketValue": {"911": [15768, 15781, true]}, "nTokenCalculations.getNTokenifCashBits": {"913": [16434, 16453, false], "914": [16661, 16678, false], "915": [16776, 16803, false]}}, "77": {"nTokenHandler.getNextSettleTime": {"916": [13786, 13817, false]}}, "78": {}, "79": {"PrimeCashExchangeRate._getScalarIncrease": {"862": [23214, 23259, false]}, "PrimeCashExchangeRate._setPrimeCashFactorsOnAccrue": {"861": [11018, 11042, false]}, "PrimeCashExchangeRate._updatePrimeCashScalars": {"860": [25867, 25901, false]}, "PrimeCashExchangeRate.getPrimeCashRateStateful": {"856": [28130, 28164, false], "857": [28574, 28609, true]}, "PrimeCashExchangeRate.getPrimeInterestRates": {"863": [20035, 20063, false], "864": [20785, 20800, false], "865": [21238, 21266, false]}, "PrimeCashExchangeRate.updateTotalfCashDebtOutstanding": {"858": [17910, 17928, false], "859": [18420, 18437, true]}}, "80": {"PrimeRateLib.convertFromUnderlying": {"866": [15231, 15252, true]}}, "81": {}, "82": {"BitmapAssetsHandler.addifCashAsset": {"729": [3987, 3994, true], "730": [4055, 4084, false], "731": [4581, 4599, false], "732": [4806, 4819, false]}, "BitmapAssetsHandler.getNetPresentValueFromBitmap": {"734": [7286, 7292, false]}, "BitmapAssetsHandler.getPresentValue": {"735": [5889, 5910, false], "736": [5976, 5988, false]}, "BitmapAssetsHandler.setAssetsBitmap": {"733": [1437, 1495, true]}}, "83": {"PortfolioHandler._loadAssetArray": {"855": [17737, 17767, true]}, "PortfolioHandler._storeAsset": {"844": [12091, 12111, false], "845": [12115, 12159, true], "846": [12220, 12238, false], "847": [12242, 12276, true], "848": [12334, 12353, false], "849": [12357, 12411, true], "850": [12464, 12497, false], "851": [12501, 12534, true]}, "PortfolioHandler._updatePortfolioContext": {"852": [11410, 11429, true], "853": [11433, 11464, false], "854": [11589, 11636, true]}, "PortfolioHandler.buildPortfolioState": {"826": [16119, 16140, false]}, "PortfolioHandler.deleteAsset": {"837": [13151, 13193, true], "838": [13241, 13277, true], "839": [13428, 13482, false], "840": [13498, 13560, true], "841": [14036, 14065, false], "842": [14069, 14111, false], "843": [14239, 14266, false]}, "PortfolioHandler.storeAssets": {"827": [7751, 7805, true], "828": [7881, 7927, false], "829": [7931, 7950, false], "830": [8277, 8323, false], "831": [8561, 8607, false], "832": [9825, 9844, false], "833": [9893, 9939, false], "834": [9959, 10013, true], "835": [10574, 10598, true], "836": [10660, 10694, true]}}, "87": {"AssetHandler.getCashClaims": {"701": [5921, 5954, false], "702": [5958, 5977, true]}, "AssetHandler.getPresentfCashValue": {"698": [2992, 3005, false], "699": [3314, 3356, true], "700": [3557, 3569, true]}, "AssetHandler.getRiskAdjustedDebtDiscount": {"709": [4459, 4474, true]}, "AssetHandler.getRiskAdjustedPresentfCashValue": {"705": [5106, 5119, false], "706": [5164, 5176, true], "707": [5344, 5386, true], "708": [5591, 5603, true]}, "AssetHandler.getRiskAdjustedfCashDiscount": {"710": [4064, 4098, false]}, "AssetHandler.getSettlementDate": {"703": [1333, 1352, false], "704": [1356, 1410, true]}}, "95": {"ABDKMath64x64.div": {"623": [6730, 6736, true], "624": [6796, 6815, false], "625": [6819, 6838, true]}, "ABDKMath64x64.exp": {"627": [21388, 21412, true], "628": [21436, 21461, false]}, "ABDKMath64x64.exp_2": {"631": [14687, 14711, true], "632": [14735, 14760, false], "633": [14852, 14878, false], "634": [14956, 14982, false], "635": [15060, 15086, false], "636": [15164, 15190, false], "637": [15268, 15293, false], "638": [15371, 15396, false], "639": [15474, 15499, false], "640": [15577, 15602, false], "641": [15680, 15704, false], "642": [15782, 15806, false], "643": [15884, 15908, false], "644": [15986, 16010, false], "645": [16088, 16111, false], "646": [16189, 16212, false], "647": [16290, 16313, false], "648": [16391, 16414, false], "649": [16492, 16514, false], "650": [16592, 16614, false], "651": [16692, 16714, false], "652": [16792, 16814, false], "653": [16892, 16913, false], "654": [16991, 17012, false], "655": [17090, 17111, false], "656": [17189, 17210, false], "657": [17288, 17308, false], "658": [17386, 17406, false], "659": [17484, 17504, false], "660": [17582, 17602, false], "661": [17680, 17699, false], "662": [17777, 17796, false], "663": [17874, 17893, false], "664": [17971, 17990, false], "665": [18068, 18086, false], "666": [18164, 18182, false], "667": [18260, 18278, false], "668": [18356, 18374, false], "669": [18452, 18469, false], "670": [18547, 18564, false], "671": [18642, 18659, false], "672": [18737, 18754, false], "673": [18832, 18848, false], "674": [18926, 18942, false], "675": [19020, 19036, false], "676": [19114, 19130, false], "677": [19208, 19223, false], "678": [19301, 19316, false], "679": [19394, 19409, false], "680": [19487, 19502, false], "681": [19580, 19594, false], "682": [19672, 19686, false], "683": [19764, 19778, false], "684": [19856, 19870, false], "685": [19948, 19961, false], "686": [20039, 20052, false], "687": [20130, 20143, false], "688": [20221, 20234, false], "689": [20312, 20324, false], "690": [20402, 20414, false], "691": [20492, 20504, false], "692": [20582, 20594, false], "693": [20672, 20683, false], "694": [20761, 20772, false], "695": [20850, 20861, false], "696": [20939, 20950, false], "697": [21075, 21104, true]}, "ABDKMath64x64.fromUInt": {"622": [1983, 2006, true]}, "ABDKMath64x64.mul": {"629": [4286, 4305, false], "630": [4309, 4328, true]}, "ABDKMath64x64.neg": {"626": [8646, 8660, true]}}, "96": {"Bitmap.getMSB": {"718": [2263, 2269, true], "719": [2311, 2351, false], "720": [2424, 2448, false], "721": [2519, 2535, false], "722": [2606, 2618, false], "723": [2689, 2699, false], "724": [2768, 2777, false], "725": [2846, 2854, false], "726": [2923, 2931, false]}, "Bitmap.getNextBitNum": {"714": [3345, 3359, false]}, "Bitmap.isBitSet": {"727": [811, 821, false], "728": [825, 837, true]}, "Bitmap.setBit": {"715": [438, 448, false], "716": [452, 464, true], "717": [509, 514, false]}}, "97": {}, "98": {"SafeInt256.abs": {"880": [1730, 1735, false]}, "SafeInt256.add": {"869": [1524, 1552, true]}, "SafeInt256.div": {"876": [1121, 1128, false], "877": [1132, 1148, true]}, "SafeInt256.max": {"881": [3382, 3387, true]}, "SafeInt256.min": {"870": [3489, 3494, true]}, "SafeInt256.mul": {"871": [510, 517, false], "872": [528, 534, true], "873": [538, 548, true], "874": [573, 579, true], "875": [583, 593, true]}, "SafeInt256.negChange": {"884": [3781, 3793, true], "885": [3798, 3808, false], "886": [3812, 3820, false], "887": [3845, 3855, false], "888": [3859, 3866, false], "889": [4073, 4081, false], "890": [4085, 4094, false], "891": [4307, 4317, false], "892": [4321, 4329, false]}, "SafeInt256.sub": {"868": [1398, 1426, true]}, "SafeInt256.subNoNeg": {"867": [1898, 1904, true]}, "SafeInt256.toInt128": {"882": [3176, 3205, false], "883": [3209, 3238, true]}, "SafeInt256.toInt88": {"878": [2976, 3004, false], "879": [3008, 3036, true]}, "SafeInt256.toUint": {"893": [2486, 2492, true]}}, "99": {"SafeUint256.add": {"894": [481, 487, true]}, "SafeUint256.div": {"898": [1879, 1884, true]}, "SafeUint256.mul": {"896": [1233, 1239, false], "897": [1294, 1304, true]}, "SafeUint256.sub": {"895": [869, 875, true]}, "SafeUint256.toInt": {"899": [4964, 4994, true]}, "SafeUint256.toUint32": {"903": [3560, 3581, true]}, "SafeUint256.toUint40": {"901": [3699, 3720, true]}, "SafeUint256.toUint80": {"900": [4259, 4280, true]}, "SafeUint256.toUint88": {"902": [4398, 4419, true]}}}, "statements": {"124": {}, "130": {}, "132": {}, "135": {}, "138": {}, "140": {}, "141": {}, "142": {}, "143": {}, "145": {}, "147": {}, "148": {}, "34": {"nTokenMintAction._addLiquidityToMarket": {"255": [12337, 12737], "256": [12934, 12986], "257": [12996, 13041], "258": [13051, 13069]}, "nTokenMintAction._deleverageMarket": {"248": [14195, 14386], "249": [14695, 14836], "250": [15039, 15084], "251": [15594, 15657], "252": [16021, 16046], "253": [16443, 16504], "254": [16514, 16544]}, "nTokenMintAction._depositIntoPortfolio": {"83": [6727, 6897], "84": [7093, 7101], "85": [7421, 7675], "86": [7730, 7990], "87": [6610, 6623], "88": [8113, 8167], "89": [8269, 8321], "90": [8709, 8788]}, "nTokenMintAction._getActualfCashAmount": {"415": [17177, 17519]}, "nTokenMintAction._isMarketOverLeveraged": {"247": [11757, 11915]}, "nTokenMintAction._lendOrAddLiquidity": {"172": [9316, 9347], "173": [9543, 9789], "174": [10101, 10135], "175": [10470, 10591], "176": [10655, 10678]}, "nTokenMintAction._nTokenMint": {"23": [4010, 4056], "24": [4178, 4228], "25": [4403, 4466], "26": [4480, 4636], "27": [4667, 4727], "28": [4956, 5054], "29": [5219, 5238]}, "nTokenMintAction.getNTokenNegativefCashWithholding": {"14": [20762, 20776], "15": [20831, 20876], "16": [20921, 21092], "17": [21197, 21246], "18": [21260, 21297], "19": [21318, 21395]}, "nTokenMintAction.nTokenMint": {"7": [2253, 2312]}, "nTokenMintAction.sweepCashIntoMarkets": {"0": [2432, 2478], "1": [2488, 2542], "2": [2696, 2748], "3": [3029, 3072], "4": [3395, 3554], "5": [3668, 3729], "6": [3739, 3793]}}, "50": {}, "54": {}, "55": {}, "56": {"LibStorage._getStorageSlot": {"212": [16015, 16060]}}, "59": {}, "60": {}, "61": {"Emitter._fCashPair": {"526": [7101, 7112], "527": [7122, 7155], "528": [7218, 7251], "529": [7261, 7294], "530": [7305, 7325]}, "Emitter._posfCashId": {"564": [6324, 6536]}, "Emitter.emitChangefCashLiquidity": {"436": [7800, 7814], "437": [7840, 7852], "438": [7873, 7926]}, "Emitter.emitMintOrBurnPrimeCash": {"476": [13136, 13183]}, "Emitter.emitNTokenMint": {"91": [15404, 15470], "92": [15484, 15546]}, "Emitter.emitTransferfCash": {"559": [8152, 8159], "560": [8439, 8462], "561": [8473, 8541]}, "Emitter.emitfCashMarketTrade": {"522": [12308, 12399], "523": [12680, 12752]}}, "62": {"BalanceHandler._setPositiveCashBalance": {"72": [17521, 17549], "73": [17770, 17823]}, "BalanceHandler.getPositiveCashBalance": {"106": [16996, 17036], "107": [17117, 17142]}, "BalanceHandler.incrementFeeToReserve": {"203": [15354, 15371], "204": [15517, 15553], "205": [15563, 15635]}, "BalanceHandler.setBalanceStorageForNToken": {"22": [14670, 14733]}}, "63": {}, "64": {}, "65": {}, "66": {}, "67": {}, "71": {"CashGroup._get25BPSValue": {"599": [2437, 2530]}, "CashGroup._getCashGroupStorageBytes": {"211": [10745, 10769]}, "CashGroup.buildCashGroup": {"109": [15047, 15255]}, "CashGroup.buildCashGroupStateful": {"36": [15947, 15991]}, "CashGroup.calculateOracleRate": {"58": [9231, 9319], "59": [9981, 10029], "60": [9938, 9963], "61": [10127, 10203], "62": [10222, 10412], "63": [10441, 10535]}, "CashGroup.calculateRiskAdjustedDebtOracleRate": {"586": [8272, 8336], "587": [8606, 8614], "588": [8625, 8661], "589": [8765, 8791]}, "CashGroup.calculateRiskAdjustedfCashOracleRate": {"590": [7796, 7860], "591": [7871, 7926], "592": [8030, 8056]}, "CashGroup.getDebtBuffer": {"595": [3365, 3410]}, "CashGroup.getMaxDiscountFactor": {"593": [4297, 4356]}, "CashGroup.getMaxOracleRate": {"596": [2817, 2866]}, "CashGroup.getMinOracleRate": {"598": [2649, 2698]}, "CashGroup.getRateOracleTimeWindow": {"142": [4965, 5063]}, "CashGroup.getReserveFeeShare": {"585": [4581, 4639]}, "CashGroup.getfCashHaircut": {"597": [3091, 3138]}, "CashGroup.interpolateOracleRate": {"145": [6234, 6272], "146": [6337, 6374], "147": [6646, 6890], "148": [7233, 7569]}, "CashGroup.loadMarket": {"170": [5297, 5383], "171": [5514, 5696]}}, "72": {"DateTime.getBitNumFromMaturity": {"259": [4262, 4279], "260": [4362, 4379], "261": [4682, 4707], "262": [5254, 5589], "263": [5870, 6039], "264": [6325, 6500], "265": [6646, 6665]}, "DateTime.getMarketIndex": {"136": [3167, 3194], "137": [3204, 3264], "138": [3563, 3580], "139": [3705, 3721], "140": [3377, 3380], "141": [3742, 3750]}, "DateTime.getMaturityFromBitNum": {"42": [6962, 6982], "43": [7045, 7067], "44": [7269, 7314], "45": [7623, 7694], "46": [7387, 7609], "47": [7935, 8008], "48": [7769, 7921], "49": [8208, 8285], "50": [8039, 8194]}, "DateTime.getReferenceTime": {"10": [437, 476], "11": [486, 536]}, "DateTime.getTimeUTC0": {"126": [680, 710], "127": [720, 756]}, "DateTime.getTradedMarket": {"128": [1046, 1070], "129": [1096, 1124], "130": [1150, 1171], "131": [1197, 1222], "132": [1248, 1273], "133": [1299, 1325], "134": [1351, 1377], "135": [1388, 1411]}, "DateTime.isValidMarketMaturity": {"51": [1677, 1729], "52": [1739, 1825], "53": [1875, 1887], "54": [2074, 2085], "55": [2000, 2003], "56": [2106, 2118]}}, "74": {"InterestRateCurve._calculateDiff": {"541": [31073, 31155]}, "InterestRateCurve._calculatePostFeeExchangeRate": {"540": [31708, 31772]}, "InterestRateCurve._getMarketIndexOffset": {"574": [2330, 2354], "575": [2364, 2421], "576": [2431, 2498]}, "InterestRateCurve._getNetCashAmountsUnderlying": {"542": [23119, 23138], "543": [23385, 23479], "544": [23489, 23632], "545": [23643, 23695], "546": [23951, 24041], "547": [24757, 24828]}, "InterestRateCurve._getfCashInterestRateParams": {"539": [2855, 2900]}, "InterestRateCurve._setNewMarketState": {"556": [25509, 25580], "557": [25649, 25691], "558": [25890, 25940]}, "InterestRateCurve.calculateMaxRate": {"594": [3267, 3539]}, "InterestRateCurve.calculatefCashTrade": {"502": [19478, 19502], "503": [19806, 19822], "504": [20257, 20602], "505": [20704, 20720], "506": [20981, 21043], "507": [21057, 21125], "508": [21291, 21307], "509": [21641, 21657], "510": [21726, 21771], "511": [21792, 22026]}, "InterestRateCurve.getActiveInterestRateParameters": {"490": [7526, 7677]}, "InterestRateCurve.getInterestRate": {"551": [12804, 12833], "552": [13155, 13212], "553": [13341, 13462], "554": [13764, 14096], "555": [14341, 14679]}, "InterestRateCurve.getPostFeeInterestRate": {"566": [17699, 17728], "567": [17773, 17802], "568": [17945, 17998], "569": [18131, 18218]}, "InterestRateCurve.getPrimeCashInterestRateParameters": {"565": [8246, 8302]}, "InterestRateCurve.getfCashExchangeRate": {"414": [26592, 26643]}, "InterestRateCurve.getfCashGivenCashAmount": {"491": [28341, 28377], "492": [28444, 28519], "493": [29209, 29247], "494": [29265, 29348], "495": [29416, 29499], "496": [29517, 29668], "497": [30038, 30052], "498": [30456, 30495], "499": [30509, 30524], "500": [29945, 29948], "501": [30545, 30569]}, "InterestRateCurve.getfCashUtilization": {"548": [12194, 12218], "549": [12228, 12261], "550": [12271, 12411]}, "InterestRateCurve.unpackInterestRateParams": {"577": [3844, 4008], "578": [4018, 4182], "579": [4192, 4257], "580": [4439, 4518], "581": [4528, 4607], "582": [4666, 4768], "583": [4778, 4887], "584": [4897, 4968]}, "InterestRateCurve.updateRateOracle": {"213": [10908, 10941], "214": [11116, 11139], "215": [11313, 11336], "216": [11713, 11870]}}, "75": {"Market._loadMarketStorage": {"481": [6307, 6332], "482": [6342, 6368], "483": [6378, 6422], "484": [6432, 6484], "485": [6494, 6548], "486": [6558, 6602], "487": [6612, 6670], "488": [6715, 6767], "489": [6798, 6823]}, "Market._setMarketStorage": {"512": [9066, 9124], "513": [9170, 9236], "514": [9286, 9353], "515": [9404, 9461], "516": [9507, 9579], "517": [9635, 9680], "518": [9690, 9743], "519": [9753, 9808], "520": [9818, 9863], "521": [9873, 9932]}, "Market._setMarketStorageForLiquidity": {"524": [7392, 7616], "525": [7627, 7683]}, "Market._setTotalLiquidity": {"562": [8627, 8693], "563": [8750, 8803]}, "Market.addLiquidity": {"420": [1091, 1146], "421": [1176, 1189], "422": [1199, 1221], "423": [1260, 1341], "424": [1454, 1521], "425": [1532, 1598], "426": [1608, 1656], "427": [1666, 1726], "428": [1736, 1773], "429": [1843, 1862]}, "Market.executeTrade": {"416": [3086, 3318], "417": [3563, 3816], "418": [3830, 3911], "419": [3926, 4085]}, "Market.getOracleRate": {"143": [5204, 5253], "144": [5264, 5492]}, "Market.loadMarket": {"246": [10441, 10658]}, "Market.loadMarketWithSettlementDate": {"412": [11138, 11218], "413": [11229, 11455]}}, "76": {"nTokenCalculations._getIfCashResidualPrimePV": {"237": [7612, 7695], "238": [7726, 7734]}, "nTokenCalculations.calculateTokensToMint": {"74": [1290, 1322], "75": [1393, 1401], "76": [1795, 1853], "77": [1992, 2017], "78": [2271, 2302], "79": [2316, 2345], "80": [2718, 2787], "81": [3534, 3610]}, "nTokenCalculations.getNTokenMarketValue": {"232": [14095, 14130], "233": [14293, 14352], "234": [14889, 15139], "235": [15938, 15998], "236": [14217, 14220]}, "nTokenCalculations.getNTokenPrimePVForMinting": {"163": [4462, 4558], "164": [4568, 4660]}, "nTokenCalculations.getNTokenifCashBits": {"402": [16455, 16472], "403": [16680, 16699], "404": [16966, 17020], "405": [17836, 17885], "406": [17453, 17456], "407": [17914, 17933]}}, "77": {"nTokenHandler._getParameters": {"240": [11368, 11391], "241": [11405, 11412], "242": [11426, 11449], "243": [11463, 11470], "244": [11349, 11352], "245": [11491, 11514]}, "nTokenHandler.getDepositParameters": {"169": [7514, 7601]}, "nTokenHandler.getNTokenContext": {"94": [1552, 1583], "95": [1593, 1658], "96": [1668, 1717], "97": [1727, 1770], "98": [1780, 1817]}, "nTokenHandler.getNextSettleTime": {"161": [13819, 13827], "162": [13837, 13917]}, "nTokenHandler.loadNTokenPortfolioNoCashGroup": {"30": [12044, 12091], "31": [12589, 12637], "32": [12647, 12687], "33": [12697, 12727], "34": [12738, 12886], "35": [12897, 12988]}, "nTokenHandler.loadNTokenPortfolioStateful": {"8": [13163, 13213], "9": [13223, 13286]}, "nTokenHandler.nTokenAddress": {"93": [2088, 2112]}}, "78": {"nTokenSupply.getStoredNTokenSupplyFactors": {"99": [1170, 1209], "100": [1422, 1487], "101": [1497, 1552]}}, "79": {"PrimeCashExchangeRate._getScalarIncrease": {"466": [22109, 22215], "467": [22577, 22830], "468": [22841, 23089], "469": [23275, 23339], "470": [24262, 24350]}, "PrimeCashExchangeRate._setPrimeCashFactorsOnAccrue": {"318": [10428, 10474], "319": [10484, 10534], "320": [10544, 10586], "321": [10596, 10634], "322": [10714, 10764], "323": [10774, 10820], "324": [10830, 10896], "325": [10906, 10956], "326": [11121, 11182], "327": [11196, 11275], "328": [11296, 11409]}, "PrimeCashExchangeRate._updatePrimeCashScalars": {"311": [24923, 25110], "312": [25255, 25328], "313": [26113, 26270], "314": [26299, 26440], "315": [26454, 26509], "316": [26569, 26601], "317": [26612, 26648]}, "PrimeCashExchangeRate.getPrimeCashFactors": {"302": [1875, 1910], "303": [1920, 1959], "304": [1969, 2004], "305": [2014, 2053], "306": [2063, 2118], "307": [2128, 2167], "308": [2177, 2208], "309": [2218, 2245], "310": [2255, 2318]}, "PrimeCashExchangeRate.getPrimeCashHoldingsOracle": {"465": [3767, 3782]}, "PrimeCashExchangeRate.getPrimeCashRateStateful": {"207": [28307, 28450], "208": [28464, 28535], "209": [28566, 28610], "210": [28664, 28916]}, "PrimeCashExchangeRate.getPrimeInterestRates": {"532": [20169, 20317], "533": [20454, 20507], "534": [20903, 20979], "535": [21282, 21353]}, "PrimeCashExchangeRate.updateTotalfCashDebtOutstanding": {"269": [17930, 17937], "270": [18412, 18438], "271": [18448, 18531], "272": [19310, 19388]}}, "80": {"PrimeRateLib.buildPrimeRateStateful": {"108": [16456, 16538]}, "PrimeRateLib.convertFromUnderlying": {"71": [15224, 15290]}}, "81": {}, "82": {"BitmapAssetsHandler.addifCashAsset": {"177": [3979, 3995], "178": [4291, 4336], "179": [4351, 4497], "180": [4619, 4668], "181": [4697, 4747], "182": [4761, 4781], "183": [4933, 4973], "184": [4988, 5233], "185": [5248, 5296], "186": [5310, 5360], "187": [5381, 5396]}, "BitmapAssetsHandler.getAssetsBitmap": {"37": [1250, 1283]}, "BitmapAssetsHandler.getNetPresentValueFromBitmap": {"408": [7216, 7267], "409": [7294, 7308], "410": [7381, 7430], "411": [7444, 7481]}, "BitmapAssetsHandler.getPresentValue": {"478": [5926, 5941], "479": [6008, 6140], "480": [6268, 6449]}, "BitmapAssetsHandler.getifCashNotional": {"57": [1997, 2049]}, "BitmapAssetsHandler.setAssetsBitmap": {"273": [1429, 1515], "274": [1634, 1675]}}, "83": {"PortfolioHandler._loadAssetArray": {"450": [17729, 17768], "451": [18366, 18408], "452": [18422, 18460], "453": [18474, 18514], "454": [18528, 18566], "455": [18580, 18604], "456": [18114, 18117], "457": [18625, 18638]}, "PortfolioHandler._sortId": {"531": [16496, 16683]}, "PortfolioHandler._sortInPlace": {"458": [16858, 16885], "459": [17053, 17120], "460": [16923, 16926], "461": [17347, 17390], "462": [17408, 17463], "463": [17481, 17484], "464": [17512, 17515]}, "PortfolioHandler._storeAsset": {"287": [12083, 12160], "288": [12212, 12277], "289": [12326, 12412], "290": [12456, 12535], "291": [12585, 12635], "292": [12645, 12691], "293": [12701, 12748], "294": [12758, 12803]}, "PortfolioHandler._updatePortfolioContext": {"295": [11480, 11511], "296": [11531, 11570], "297": [11581, 11637], "298": [11692, 11825], "299": [11836, 11895]}, "PortfolioHandler.buildPortfolioState": {"102": [16142, 16154], "103": [16165, 16231], "104": [16241, 16283], "105": [16293, 16346]}, "PortfolioHandler.deleteAsset": {"275": [13143, 13194], "276": [13233, 13278], "277": [13407, 13570], "278": [13609, 13646], "279": [14131, 14160], "280": [14178, 14200], "281": [13943, 13946], "282": [14387, 14440], "283": [14454, 14461], "284": [14777, 14952], "285": [14962, 15013], "286": [15023, 15076]}, "PortfolioHandler.getSortedPortfolio": {"206": [15289, 15359]}, "PortfolioHandler.getSortedPortfolioWithIds": {"300": [15543, 15594], "301": [15604, 15630]}, "PortfolioHandler.storeAssets": {"188": [7743, 7806], "189": [7970, 8000], "190": [7511, 7514], "191": [8867, 8899], "192": [9076, 9311], "193": [8179, 8182], "194": [9846, 9854], "195": [9868, 10027], "196": [10079, 10294], "197": [10309, 10361], "198": [10375, 10398], "199": [9731, 9734], "200": [10566, 10599], "201": [10652, 10695], "202": [10745, 10897]}}, "87": {"AssetHandler.getCashClaims": {"399": [5913, 5978], "400": [6028, 6108], "401": [6118, 6190]}, "AssetHandler.getDiscountFactor": {"149": [2402, 2472], "150": [2482, 2539], "151": [2549, 2619]}, "AssetHandler.getPresentfCashValue": {"64": [3007, 3015], "65": [3306, 3357], "66": [3550, 3600]}, "AssetHandler.getRiskAdjustedDebtDiscount": {"571": [4442, 4682]}, "AssetHandler.getRiskAdjustedPresentfCashValue": {"536": [5121, 5129], "537": [5336, 5387], "538": [5584, 5634]}, "AssetHandler.getRiskAdjustedfCashDiscount": {"572": [3910, 3981], "573": [4100, 4134]}, "AssetHandler.getSettlementDate": {"447": [1325, 1411], "448": [1586, 1607], "449": [1910, 1972]}, "AssetHandler.isLiquidityToken": {"477": [920, 1051]}}, "95": {"ABDKMath64x64.div": {"223": [6721, 6737], "224": [6787, 6839]}, "ABDKMath64x64.exp": {"227": [21379, 21413], "228": [21463, 21471], "229": [21491, 21579]}, "ABDKMath64x64.exp_2": {"331": [14678, 14712], "332": [14762, 14770], "333": [14886, 14946], "334": [14990, 15050], "335": [15094, 15154], "336": [15198, 15258], "337": [15301, 15361], "338": [15404, 15464], "339": [15507, 15567], "340": [15610, 15670], "341": [15712, 15772], "342": [15814, 15874], "343": [15916, 15976], "344": [16018, 16078], "345": [16119, 16179], "346": [16220, 16280], "347": [16321, 16381], "348": [16422, 16482], "349": [16522, 16582], "350": [16622, 16682], "351": [16722, 16782], "352": [16822, 16882], "353": [16921, 16981], "354": [17020, 17080], "355": [17119, 17179], "356": [17218, 17278], "357": [17316, 17376], "358": [17414, 17474], "359": [17512, 17572], "360": [17610, 17670], "361": [17707, 17767], "362": [17804, 17864], "363": [17901, 17961], "364": [17998, 18058], "365": [18094, 18154], "366": [18190, 18250], "367": [18286, 18346], "368": [18382, 18442], "369": [18477, 18537], "370": [18572, 18632], "371": [18667, 18727], "372": [18762, 18822], "373": [18856, 18916], "374": [18950, 19010], "375": [19044, 19104], "376": [19138, 19198], "377": [19231, 19291], "378": [19324, 19384], "379": [19417, 19477], "380": [19510, 19570], "381": [19602, 19662], "382": [19694, 19754], "383": [19786, 19846], "384": [19878, 19938], "385": [19969, 20029], "386": [20060, 20120], "387": [20151, 20211], "388": [20242, 20302], "389": [20332, 20392], "390": [20422, 20482], "391": [20512, 20572], "392": [20602, 20662], "393": [20691, 20751], "394": [20780, 20840], "395": [20869, 20929], "396": [20958, 21018], "397": [21025, 21060], "398": [21066, 21105]}, "ABDKMath64x64.fromUInt": {"221": [1974, 2007], "222": [2013, 2036]}, "ABDKMath64x64.mul": {"230": [4277, 4329]}, "ABDKMath64x64.neg": {"225": [8637, 8661], "226": [8667, 8676]}, "ABDKMath64x64.toInt": {"231": [1651, 1673]}}, "96": {"Bitmap.getMSB": {"110": [2255, 2270], "111": [2367, 2376], "112": [2390, 2400], "113": [2464, 2472], "114": [2486, 2495], "115": [2551, 2559], "116": [2573, 2582], "117": [2634, 2642], "118": [2656, 2665], "119": [2715, 2722], "120": [2736, 2744], "121": [2793, 2800], "122": [2814, 2822], "123": [2870, 2877], "124": [2891, 2899], "125": [2933, 2941]}, "Bitmap.getNextBitNum": {"40": [3361, 3369], "41": [3380, 3420]}, "Bitmap.isBitSet": {"266": [803, 838], "267": [877, 942]}, "Bitmap.setBit": {"68": [430, 465], "69": [530, 576], "70": [607, 654]}, "Bitmap.totalBitsSet": {"439": [1113, 1269], "440": [1279, 1435], "441": [1445, 1532], "442": [1542, 1698], "443": [1708, 1725], "444": [1735, 1752], "445": [1762, 1780], "446": [1790, 1827]}}, "97": {}, "98": {"SafeInt256.abs": {"165": [1737, 1750], "166": [1765, 1773]}, "SafeInt256.add": {"82": [1516, 1553]}, "SafeInt256.div": {"157": [1111, 1150], "158": [1258, 1267]}, "SafeInt256.divInRatePrecision": {"167": [2129, 2176]}, "SafeInt256.max": {"168": [3375, 3395]}, "SafeInt256.min": {"153": [3482, 3502]}, "SafeInt256.mul": {"154": [487, 496], "155": [519, 549], "156": [564, 594]}, "SafeInt256.mulInRatePrecision": {"152": [2350, 2397]}, "SafeInt256.neg": {"239": [1632, 1649]}, "SafeInt256.negChange": {"430": [3823, 3831], "431": [4040, 4052], "432": [4271, 4286], "433": [4562, 4584]}, "SafeInt256.sub": {"67": [1390, 1427]}, "SafeInt256.subNoNeg": {"20": [1867, 1880], "21": [1890, 1905]}, "SafeInt256.toInt128": {"268": [3167, 3239]}, "SafeInt256.toInt88": {"159": [2967, 3037], "160": [3070, 3085]}, "SafeInt256.toUint": {"434": [2478, 2493]}}, "99": {"SafeUint256.add": {"12": [473, 488], "13": [498, 506]}, "SafeUint256.div": {"219": [1871, 1885], "220": [1895, 1907]}, "SafeUint256.divInRatePrecision": {"330": [2805, 2861]}, "SafeUint256.divInScalarPrecision": {"471": [3129, 3178]}, "SafeUint256.mul": {"217": [1241, 1249], "218": [1286, 1305]}, "SafeUint256.mulInRatePrecision": {"570": [2966, 3022]}, "SafeUint256.mulInScalarPrecision": {"472": [3285, 3334]}, "SafeUint256.sub": {"38": [861, 876], "39": [886, 898]}, "SafeUint256.toInt": {"329": [4955, 4995]}, "SafeUint256.toUint32": {"475": [3552, 3582]}, "SafeUint256.toUint40": {"473": [3691, 3721]}, "SafeUint256.toUint80": {"435": [4251, 4281]}, "SafeUint256.toUint88": {"474": [4390, 4420]}}}}, "dependencies": ["ABDKMath64x64", "AccountContextHandler", "AggregatorInterface", "AggregatorV2V3Interface", "AggregatorV3Interface", "AssetHandler", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CTokenInterface", "CashGroup", "CompoundHandler", "Constants", "DateTime", "Deployments", "Emitter", "ExternalLending", "FloatingPoint", "GenericToken", "IBeacon", "IEIP20NonStandard", "IERC20", "IPrimeCashHoldingsOracle", "IRewarder", "ITransferEmitter", "IUpgradeableBeacon", "Incentives", "InterestRateCurve", "LibStorage", "Market", "PortfolioHandler", "PrimeCashExchangeRate", "PrimeRateLib", "PrimeSupplyCap", "SafeInt256", "SafeUint256", "TokenHandler", "WETH9", "nTokenCalculations", "nTokenHandler", "nTokenSupply"], "deployedBytecode": "", "deployedSourceMap": "1376:20028:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2325:1475;;;;;;;;;;-1:-1:-1;2325:1475:34;;;;;:::i;:::-;;:::i;:::-;;2134:185;;;;;;;;;;-1:-1:-1;2134:185:34;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2325:1475;2393:29;;:::i;:::-;2432:46;:6;2467:10;2432:34;:46::i;:::-;2496:21;;;;:34;:41;2488:54;;;;;;2620:21;2644:42;2670:15;2644:25;:42::i;:::-;2620:66;;2734:13;2704:6;:26;;;:43;;2696:52;;;;;;2935:17;;;;2873:26;;;;2834:24;;2873:146;;:26;6916:1:54;2935:58:34;2998:7;2921:84;2873:30;:146::i;:::-;2834:185;;3055:16;3037:15;:34;3029:43;;;;;;3180:25;;;3083:27;3180:25;;;;;;;;;3113:187;;3160:6;;3083:27;3180:25;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3275:15;3113:33;:187::i;:::-;3083:217;;3311:22;3336:49;3364:20;3336:6;:18;;;:27;;:49;;;;:::i;:::-;3450:19;;;;3483:16;;:27;3311:74;;-1:-1:-1;3395:159:34;;3524:20;3395:41;:159::i;:::-;3668:61;3680:6;:19;;;3701:10;3713:15;3668:11;:61::i;:::-;;3744:49;3765:10;3777:15;3744:49;;;;;;;:::i;:::-;;;;;;;;2325:1475;;;;;;:::o;2134:185::-;2235:6;2260:52;2272:7;2281:10;2293:18;2260:11;:52::i;:::-;2253:59;;2134:185;;;;;;:::o;13045:248:77:-;13163:50;13194:6;13202:10;13163:30;:50::i;:::-;13242:44;13275:10;13242:32;:44::i;:::-;13223:63;;;-1:-1:-1;13045:248:77:o;350:193:72:-;418:7;3200:9:54;445:30:72;;;437:39;;;;;;3200:9:54;506::72;:29;;493:9;:43;486:50;;350:193;;;;:::o;369:144:99:-;427:7;458:5;;;481:6;;;;473:15;;;;;;505:1;-1:-1:-1;369:144:99;;;;;:::o;17780:3622:34:-;17969:27;18008:20;18031:85;18067:6;:19;;;18088:6;:16;;;:27;;;18031:85;;:35;:85::i;:::-;18391:17;;;;18971:22;;18008:108;;-1:-1:-1;6853:1:54;18391:52:34;4771:16:54;18377:97:34;;18338:24;;18971:27;:74;;19013:32;:9;3200::54;19013:13:34;:32::i;:::-;18971:74;;;19001:9;18971:74;18941:104;;19056:14;19073:28;:12;:26;:28::i;:::-;19056:45;;19111:2197;19118:11;;19111:2197;;19229:16;19248:66;19279:6;:26;;;19307:6;19248:30;:66::i;:::-;19229:85;;19328:18;19349:146;19397:6;:16;;;:31;;;19446:8;19472:9;19349:30;:146::i;:::-;19328:167;;19577:13;19572:1553;;19711:19;;;;19756:16;;:27;19610:15;;19648:191;;;;19809:8;19648:37;:191::i;:::-;19610:229;;19944:1;19933:8;:12;19929:1182;;;20611:16;;20590:18;;20611:67;;20648:8;20658:19;20611:36;:67::i;:::-;20590:88;;20724:10;20705:16;:29;20701:198;;;-1:-1:-1;20775:1:34;20701:198;;;20844:32;:10;20859:16;20844:14;:32::i;:::-;20831:45;;20701:198;20944:148;20994:76;21028:8;21038;21048:9;21059:10;20994:33;:76::i;:::-;20944:20;;:24;:148::i;:::-;20921:171;;19929:1182;;19572:1553;;21212:34;:12;21232:6;21240:5;21212:19;:34::i;:::-;21197:49;;21269:28;:12;:26;:28::i;:::-;21260:37;;19111:2197;;;;;21325:16;;:26;;;:70;;21374:20;21325:48;:70::i;:::-;21318:77;17780:3622;-1:-1:-1;;;;;;;;17780:3622:34:o;1786:176:98:-;1847:8;1871:9;1875:1;1878;1871:3;:9::i;:::-;1867:13;;1903:1;1898;:6;;1890:15;;;;;14523:217:62;14670:63;14694:13;14709:10;14721:11;14670:23;:63::i;:::-;14523:217;;;:::o;3806:1439:34:-;3908:6;3946:15;3971:29;;:::i;:::-;4010:46;:6;4045:10;4010:34;:46::i;:::-;4067:19;4089:79;4130:6;4138:18;4158:9;4089:40;:79::i;:::-;4067:101;;4202:1;4186:12;:17;;4178:50;;;;-1:-1:-1;;;4178:50:34;;;;;;;:::i;:::-;;;;;;;;;4243:21;;;;:34;:41;4239:499;;4424:18;;;;:42;;4447:18;4424:22;:42::i;:::-;4403:18;;;:63;;;4539:19;;;;4480:156;;4576:10;;4480:41;:156::i;:::-;4239:499;;;4667:60;4689:6;4697:18;4717:9;4667:21;:60::i;:::-;4763:6;:19;;;-1:-1:-1;;;;;4752:30:34;:7;-1:-1:-1;;;;;4752:30:34;;4748:317;;4956:98;4979:7;4988:6;:19;;;5009:10;5021:18;5041:12;4956:22;:98::i;:::-;5226:12;3806:1439;-1:-1:-1;;;;;;3806:1439:34:o;11910:1085:77:-;12066:25;12080:10;12066:25;;:13;:25::i;:::-;-1:-1:-1;;;;;12044:47:77;:19;;;:47;;;12205:27;;;;;;12312:37;;:16;:37::i;:::-;12128:221;;;;;;;;12401:19;12516:62;12558:6;:19;;;12516:41;:62::i;:::-;-1:-1:-1;;12589:26:77;;;:48;;;12647:18;;;:40;;;-1:-1:-1;;;;;;12697:30:77;;:17;;;:30;12812:19;;;;12387:191;;-1:-1:-1;12762:124:77;;12845:16;-1:-1:-1;12762:36:77;:124::i;:::-;12738:21;;;:148;12956:19;;;;12918:70;;12977:10;12918:37;:70::i;:::-;12897:18;;;;:91;;;;-1:-1:-1;;;;;11910:1085:77:o;15734:264:71:-;15819:26;;:::i;:::-;15861;15890:47;15926:10;15890:35;:47::i;:::-;15861:76;;15954:37;15969:10;15981:9;15954:14;:37::i;1024:266:82:-;1109:20;1141:61;1205:35;:33;:35::i;:::-;-1:-1:-1;;;;;1257:14:82;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;1024:266:82;;;;:::o;784:121:99:-;842:7;874:1;869;:6;;861:15;;;;;;-1:-1:-1;893:5:99;;;784:121::o;3194:233:96:-;3256:14;3345;3341:28;;-1:-1:-1;3368:1:96;3361:8;;3341:28;3393:23;3408:6;3393;:23::i;:::-;3387:3;:29;3419:1;3387:33;3380:40;;3194:233;;;:::o;6826:1476:72:-;6939:7;6970:11;6962:20;;;;;;7063:3;7053:6;:13;;7045:22;;;;;;7131:21;7155:22;7167:9;7155:11;:22::i;:::-;7131:46;;7187:16;3840:2:54;7218:6:72;:35;7214:1082;;-1:-1:-1;2982:5:54;7292:22:72;;7276:38;;-1:-1:-1;7269:45:72;;7214:1082;3893:3:54;7335:6:72;:36;7331:965;;-1:-1:-1;;;7642:34:72;;3103:7:54;7641:53:72;;;7578:30;;;7414:195;;;7630:64;7446:40;7630:64;;-1:-1:-1;7623:71:72;;7331:965;3949:3:54;7715:6:72;:38;7711:585;;-1:-1:-1;;;7954:35:72;;3150:8:54;7953:55:72;;;7889:31;;;7796:125;;;7942:66;7828:41;7942:66;;-1:-1:-1;7935:73:72;;7711:585;-1:-1:-1;;;8227:37:72;;3200:9:54;8226:59:72;;;8160:33;;;8066:128;;;8215:70;8098:42;8215:70;;-1:-1:-1;8208:77:72;;7711:585;6826:1476;;;;;;:::o;1516:609::-;1661:4;1702:1;1685:14;:18;1677:52;;;;-1:-1:-1;;;1677:52:72;;;;;;;:::i;:::-;2606:1:54;1747:14:72;:51;;1739:86;;;;-1:-1:-1;;;1739:86:72;;;;;;;:::i;:::-;3200:9:54;1840:8:72;:28;:33;1836:51;;-1:-1:-1;1882:5:72;1875:12;;1836:51;1897:12;1912:36;1938:9;1912:25;:36::i;:::-;1897:51;-1:-1:-1;1976:1:72;1959:137;1984:14;1979:1;:19;1959:137;;2035:37;2044:27;2069:1;2044:24;:27::i;:::-;2035:4;;:8;:37::i;:::-;2023:8;:49;2019:66;;;2081:4;2074:11;;;;;;2019:66;2000:3;;1959:137;;;-1:-1:-1;2113:5:72;;1516:609;-1:-1:-1;;;;;1516:609:72:o;1688:368:82:-;1823:15;1850:99;1952:35;:33;:35::i;:::-;-1:-1:-1;;;;;2004:14:82;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;1997:52;;;-1:-1:-1;;1688:368:82;;;;;:::o;8808:1744:71:-;8965:18;8996:19;9017:18;9051:70;9075:9;:24;;;9101:8;9111:9;9051:23;:70::i;:::-;8995:126;;;;9131:18;9152:34;9176:9;9152:23;:34::i;:::-;9131:55;;9202:13;9197:1349;;9265:20;;9244:75;;;;9287:8;9297:10;9309:9;9244:20;:75::i;:::-;9231:88;;9197:1349;;;9350:21;9374:36;9400:9;9374:25;:36::i;:::-;9350:60;;9525:20;9548:56;9566:37;9591:11;9566:24;:37::i;9548:56::-;9525:79;;9618:16;9653:79;9674:9;:20;;;9653:79;;9696:12;9710:10;9722:9;9653:20;:79::i;:::-;9618:114;;9747:17;9778:21;9817:11;9832:1;9817:16;9813:614;;;-1:-1:-1;;9993:19:71;;;;;:36;;9954:9;9813:614;;;10143:60;10161:41;10200:1;10186:11;:15;10161:24;:41::i;:::-;10143:13;;:17;:60::i;:::-;10127:76;;10234:178;10276:9;:20;;;10234:178;;10318:13;10353:10;10385:9;10234:20;:178::i;:::-;10222:190;;9813:614;10454:81;10476:13;10491:12;10505:9;10516:8;10526;10454:21;:81::i;:::-;10441:94;;9197:1349;;;;;;8808:1744;;;;;;;;:::o;2805:802:87:-;2970:6;2992:13;2988:27;;-1:-1:-1;3014:1:87;3007:8;;2988:27;3168:22;3193:23;:8;3206:9;3193:12;:23::i;:::-;3168:48;;3226:21;3250:45;3268:14;3284:10;3250:17;:45::i;:::-;3226:69;;4071:3:54;3314:14:87;:42;;3306:51;;;;;;3418:9;3430:43;:8;3458:14;3430:27;:43::i;:::-;3418:55;;3568:1;3557:8;:12;:43;;3598:2;3557:43;;;3573:22;3588:2;-1:-1:-1;;3573:14:87;:22::i;:::-;3550:50;;;;;2805:802;;;;;;;:::o;1280:154:98:-;1403:5;;;1398:16;;;;1336:8;1419:6;;;1398:28;1390:37;;;;;299:372:96;411:7;447:1;438:5;:10;;:26;;;;;461:3;452:5;:12;;438:26;430:35;;;;;;509:5;505:160;;;-1:-1:-1;;;;;;565:9:96;;547:28;537:39;;530:46;;505:160;-1:-1:-1;;;;;;643:9:96;;625:28;623:31;614:40;;607:47;;14980:317:80;15198:15;;15103:6;;;;15137:77;;:56;:17;4251:4:54;15137:21:80;:56::i;:::-;:60;;:77::i;:::-;15121:93;;15251:1;15231:17;:21;:59;;15284:6;15231:59;;;15255:26;15270:6;-1:-1:-1;;15255:14:80;:26::i;17410:420:62:-;17547:1;17529:14;:19;;17521:28;;;;;;17583:68;17654:30;:28;:30::i;:::-;-1:-1:-1;;;;;17734:14:62;;17694:37;17734:14;;;;;;;;;;;:26;;;;;;;;;;17583:101;;-1:-1:-1;17799:24:62;:14;:22;:24::i;:::-;17770:53;;;;;;;-1:-1:-1;;;;;17770:53:62;-1:-1:-1;;;17770:53:62;-1:-1:-1;;;;;17770:53:62;;;;;;-1:-1:-1;;;;17410:420:62:o;1111:2516:76:-;1272:6;1320:1;1298:18;:23;;1290:32;;;;;;1368:23;1364:37;;-1:-1:-1;1400:1:76;1393:8;;1364:37;1416:26;;;;:31;1412:452;;1639:22;1664:39;1696:6;1664:31;:39::i;:::-;1639:64;;1820:9;1803:14;:26;1795:58;;;;-1:-1:-1;;;1795:58:76;;;;;;;:::i;:::-;1412:452;;1878:18;;;;1874:1747;;-1:-1:-1;1999:18:76;1992:25;;1874:1747;2049:24;2075:22;2101:94;2164:6;2172:9;2101:45;:94::i;:::-;2048:147;;;;2300:1;2279:17;:22;;2271:31;;;;;;2343:1;2324:15;:20;;2316:29;;;;;;2427:17;;;;4633:1:54;2427:53:76;4633:15:54;2413:99:76;2360:26;2605:99;2686:17;2605:44;:38;2686:17;2627:15;2605:21;:38::i;:::-;:42;:44::i;:::-;:80;;:99::i;:::-;2582:122;;2743:19;2726:13;:36;;2718:69;;;;-1:-1:-1;;;2718:69:76;;;;;;;:::i;:::-;2939:28;2970:50;2985:17;3004:15;2970:14;:50::i;:::-;2939:81;;3541:69;3588:21;3541:42;3564:6;:18;;;3541;:22;;:42;;;;:::i;:69::-;3534:76;;;;;;;;;1440:120:98;1529:5;;;1524:16;;;;1496:8;1545:6;;;1524:28;1516:37;;;;;5492:3313:34;5780:16;;:27;;5825:31;;;;;5647:29;;;;5728:142;;;;;:34;:142::i;:::-;5646:224;;;;6464:19;6493:30;;:::i;:::-;6560:16;;:31;;;6533:1482;6593:15;;6533:1482;;6727:16;;6639:18;;6727:170;;6772:6;6796:11;6825:4;6874:9;6727:27;:170::i;:::-;7065:21;;;;7061:40;;7093:8;;;7061:40;7194:23;7236:170;7393:12;7236:131;6556:3:54;7236:73:34;7278:13;7306:1;7292:11;:15;7278:30;;;;;;;;;;;;;;7236:16;:41;;:73;;;;:::i;:131::-;:156;;:170::i;:::-;7194:212;;7451:224;7488:6;7512;7536:16;7570:18;7603:1;7589:11;:15;7570:35;;;;;;;;;;;;;;7623:11;7652:9;7451:19;:224::i;:::-;7421:254;-1:-1:-1;7421:254:34;-1:-1:-1;7694:16:34;;7690:315;;7730:260;7786:6;:19;;;7827:6;:16;;;:27;;;7876:6;:15;;;7913:6;:26;;;7961:11;7730:34;:260::i;:::-;;7690:315;6533:1482;;;-1:-1:-1;;6610:13:34;6533:1482;;;-1:-1:-1;8147:19:34;;;;8113:21;;;;:54;;:33;:54::i;:::-;;;;;8293:1;8277:12;:17;;8269:52;;;;-1:-1:-1;;;8269:52:34;;;;;;;:::i;:::-;8350:1;8335:12;:16;8331:468;;;8746:16;;:27;8709:79;;8775:12;8709:36;:79::i;:::-;5492:3313;;;;;;;:::o;15085:478:61:-;15240:26;15286:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15286:47:61;;-1:-1:-1;15348:16:61;;:40;;;;;15387:1;15368:16;:20;15348:40;15344:213;;;15404:66;;-1:-1:-1;;;15404:66:61;;-1:-1:-1;;;;;15404:22:61;;;;;:66;;15427:7;;15436:6;;15452:16;;15404:66;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;15484:62:61;;-1:-1:-1;;;15484:62:61;;-1:-1:-1;;;;;15484:39:61;;;-1:-1:-1;15484:39:61;;-1:-1:-1;15484:62:61;;15524:7;;15533:12;;15484:62;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15344:213;15085:478;;;;;;:::o;1900:219:77:-;1966:20;1998:41;2042:36;:34;:36::i;:::-;2095:17;;;;;;-1:-1:-1;;2095:17:77;;;;-1:-1:-1;;;;;2095:17:77;;1900:219::o;1087:737::-;1195:17;1226:35;1275:27;1316:22;1352:17;1394:47;1444:36;:34;:36::i;:::-;-1:-1:-1;;;;;1522:19:77;;;1490:29;1522:19;;;;;;;;-1:-1:-1;;1522:19:77;;;;1565:18;;;;;1623:35;;;;;;;-1:-1:-1;1690:27:77;;;;;-1:-1:-1;1746:24:77;-1:-1:-1;;;1746:24:77;;;;-1:-1:-1;;;;1793:24:77;;;;;;-1:-1:-1;1087:737:77:o;730:829:78:-;850:19;883:32;929:27;981:58;1042:40;:38;:40::i;:::-;-1:-1:-1;;;;;1141:19:78;;;;1092:46;1141:19;;;;;;;;-1:-1:-1;;1141:19:78;;;;1184:25;;;;;-1:-1:-1;;;1449:38:78;;-1:-1:-1;;;;;1449:38:78;;-1:-1:-1;;;;1519:33:78;;;;;;-1:-1:-1;730:829:78:o;15899:477:83:-;16045:21;;:::i;:::-;16078:27;;:::i;:::-;16119:21;;;16115:39;;16149:5;-1:-1:-1;16142:12:83;;16115:39;16186:45;16205:7;16214:16;16186:18;:45::i;:::-;16165:66;;16241:42;;;:23;;;:42;16332:13;16311:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;16293:15:83;;;:53;:15;15899:477;-1:-1:-1;;;;15899:477:83:o;16666:483:62:-;16779:18;16809:68;16880:30;:28;:30::i;:::-;-1:-1:-1;;;;;16960:14:62;;16920:37;16960:14;;;;;;;;;;;:26;;;;;;;;;;17010;;-1:-1:-1;;;17010:26:62;;;;;;16996:40;;;-1:-1:-1;16809:101:62;;-1:-1:-1;17125:16:62;;;17117:25;;;;;16345:200:80;16428:16;;:::i;:::-;16463:75;16510:10;16522:15;16463:46;:75::i;14775:487:71:-;14877:26;;:::i;:::-;14920:12;14935:37;14961:10;14935:37;;:25;:37::i;:::-;15066:189;;;;;;;;;;;;;;;15013:22;;;15066:189;;;;;;;;;;-1:-1:-1;;15066:189:71;;;;;14775:487::o;6170:243:56:-;6235:61;6312:12;6327:39;6343:22;6327:15;:39::i;1923:1056:96:-;1973:11;2263:6;2255:15;;;;;;-1:-1:-1;;;2311:1:96;:40;2307:104;;2373:3;2367:9;;;;2390:10;2307:104;-1:-1:-1;;;2424:1:96;:24;2420:86;;2470:2;2464:8;;;;2486:9;2420:86;2524:11;2519:1;:16;2515:78;;2557:2;2551:8;;;;2573:9;2515:78;2611:7;2606:1;:12;2602:74;;2640:2;2634:8;;;;2656:9;2602:74;2694:5;2689:1;:10;2685:70;;2721:1;2715:7;;;;2736:8;2685:70;2773:4;2768:1;:9;2764:69;;2799:1;2793:7;;;;2814:8;2764:69;2851:3;2846:1;:8;2842:68;;2876:1;2870:7;;;;2891:8;2842:68;2928:3;2923:1;:8;2919:22;;2940:1;2933:8;1923:1056;;;:::o;603:160:72:-;661:7;2982:5:54;688:4:72;:21;;680:30;;;;;;2982:5:54;735:4:72;:20;;948:470;1011:7;1034:5;1043:1;1034:10;1030:40;;;-1:-1:-1;3200:9:54;1046:24:72;;1030:40;1084:5;1093:1;1084:10;1080:44;;;-1:-1:-1;1103:21:72;1096:28;;1080:44;1138:5;1147:1;1138:10;1134:37;;;-1:-1:-1;3248:11:54;1150:21:72;;1134:37;1185:5;1194:1;1185:10;1181:41;;;-1:-1:-1;1204:18:72;1197:25;;1181:41;1236:5;1245:1;1236:10;1232:41;;;-1:-1:-1;1255:18:72;1248:25;;1232:41;1287:5;1296:1;1287:10;1283:42;;;-1:-1:-1;1306:19:72;1299:26;;1283:42;1339:5;1348:1;1339:10;1335:42;;;-1:-1:-1;1358:19:72;1351:26;;1335:42;1388:23;;-1:-1:-1;;;1388:23:72;;;;;;;:::i;6520:269:56:-;6585:87;6688:12;6703:39;6719:22;6703:15;:39::i;3004:753:72:-;3142:7;3151:4;3192:1;3175:14;:18;3167:27;;;;;;2606:1:54;3212:14:72;:51;;3204:60;;;;;;3274:12;3289:36;3315:9;3289:25;:36::i;:::-;3274:51;-1:-1:-1;3353:1:72;3336:396;3361:14;3356:1;:19;3336:396;;3396:22;3421:37;3430:27;3455:1;3430:24;:27::i;:::-;3421:4;;:8;:37::i;:::-;3396:62;;3553:8;3535:14;:26;3531:49;;;-1:-1:-1;3571:1:72;-1:-1:-1;3574:5:72;;-1:-1:-1;3563:17:72;;-1:-1:-1;3563:17:72;3531:49;3695:8;3678:14;:25;3674:47;;;-1:-1:-1;3713:1:72;-1:-1:-1;3716:4:72;;-1:-1:-1;3705:16:72;;-1:-1:-1;3705:16:72;3674:47;-1:-1:-1;3377:3:72;;3336:396;;;;3742:8;;;3004:753;;;;;;;:::o;4759:311:71:-;4994:14;;;2847:3:54;1642:1:71;4994:41;;;;4972:66;;:91;;4759:311::o;4108:1391:75:-;4279:7;4298:100;4401:29;:27;:29::i;:::-;4298:132;-1:-1:-1;4440:22:75;3200:9:54;4465:36:75;4491:9;4465:25;:36::i;:::-;4531:35;4569:17;;;;;;;;;;;:27;;;;;;;;4465:56;;;;4569:43;;;;;;;4649:29;;4465:56;;-1:-1:-1;4569:43:75;4649:29;-1:-1:-1;;;4649:29:75;;;;;-1:-1:-1;;;4709:24:75;;;;;-1:-1:-1;;;4771:31:75;;;;5212:14;5204:49;;;;-1:-1:-1;;;5204:49:75;;;;;;;:::i;:::-;5283:209;5335:17;5370:15;5403:10;5431:20;5469:9;5283:34;:209::i;:::-;5264:228;4108:1391;-1:-1:-1;;;;;;;;;;;4108:1391:75:o;6010:1576:71:-;6215:7;6258:13;6242;:29;6234:38;;;;;;6361:12;6345:13;:28;6337:37;;;;;;6621:9;6609:8;:21;6605:975;;6669:221;6880:9;6669:185;6825:28;;;6669:78;6670:20;;;6717:29;;;6669:47;:78::i;:::-;:155;;:185::i;:::-;:210;;:221::i;:::-;6646:244;;;;6605:975;7256:313;7354:197;7522:28;;;7354:82;7355:20;;;7406:29;;;7354:51;:82::i;:197::-;7256:9;;:13;:313::i;6605:975::-;6010:1576;;;;;;;:::o;2148:573:87:-;2266:6;;2318:74;2341:50;3248:11:54;2341:30:87;:10;2356:14;2341;:30::i;:50::-;2318:22;:74::i;:::-;2288:104;;2413:59;2431:8;-1:-1:-1;;;2413:17:87;:59::i;:::-;2402:70;;2493:46;2511:27;2529:8;2511:17;:27::i;:::-;2493:17;:46::i;:::-;2482:57;;2560:59;2578:8;-1:-1:-1;;;2560:17:87;:59::i;:::-;2549:70;;2629:21;2653:29;2673:8;2653:19;:29::i;:::-;2629:53;;;2148:573;-1:-1:-1;;;;;2148:573:87:o;2261:143:98:-;2332:6;2357:40;2361:9;2365:1;2368;2361:3;:9::i;:::-;4071:3:54;2357::98;:40::i;3408:101::-;3464:6;3493:1;3489;:5;:13;;3501:1;3489:13;;;-1:-1:-1;3497:1:98;;3408:101;-1:-1:-1;3408:101:98:o;411:190::-;491:5;;;-1:-1:-1;;510:7:98;;506:88;;;528:6;;;:20;;;547:1;542;538;:5;;;;;;:10;528:20;519:30;;;;;;506:88;;;573:6;;;:20;;;592:1;587;583;:5;;;;;;:10;573:20;564:30;;;;;1035:239;1091:8;1121:1;-1:-1:-1;;1121:7:98;:27;;;;;-1:-1:-1;;;1132:1:98;:16;1121:27;1119:30;1111:39;;;;;;1266:1;1262;:5;;;;;;;1035:239;-1:-1:-1;;;1035:239:98:o;4471:240:56:-;4531:68;4615:12;4630:34;4646:17;4630:15;:34::i;2900:192:98:-;2950:5;-1:-1:-1;;2976:28:98;-1:-1:-1;2976:28:98;;;:60;;-1:-1:-1;3020:15:98;3008:28;;;2976:60;2967:70;;;;;;-1:-1:-1;3083:1:98;2900:192::o;13682:242:77:-;13763:7;13786:6;:26;;;13816:1;13786:31;13782:45;;;-1:-1:-1;13826:1:77;13819:8;;13782:45;13870:26;;;;3200:9:54;;13844:53:77;;:25;:53::i;:::-;:73;;13682:242;-1:-1:-1;;13682:242:77:o;3633:1034:76:-;3750:24;3776:22;3945:32;4013:103;4056:6;4075:9;4101:4;4013:20;:103::i;:::-;3944:172;;;4127:30;4193:104;4236:6;4255:9;4281:5;4193:20;:104::i;:::-;4126:171;;;4307:28;4338:44;4364:6;4372:9;4338:25;:44::i;:::-;4539:18;;;;4307:75;;-1:-1:-1;4482:76:76;;:52;:25;4307:75;4482:29;:52::i;:76::-;4641:18;;;;4462:96;;-1:-1:-1;4586:74:76;;:50;:23;4614:21;4586:27;:50::i;:74::-;4568:92;;3633:1034;;;;;;;;:::o;1662:118:98:-;1708:6;1734:1;1730;:5;1726:47;;;1744:6;1748:1;1744:3;:6::i;:::-;1737:13;;;;1726:47;-1:-1:-1;1772:1:98;1765:8;;2040:143;2111:6;2136:40;2140:32;2144:1;4071:3:54;2140::98;:32::i;:::-;2174:1;2136:3;:40::i;3301:101::-;3357:6;3386:1;3382;:5;:13;;3394:1;3382:13;;7107:501:77;7228:29;7259:34;7309:67;7379:36;:34;:36::i;:::-;7425:59;7487:17;;;;;;;;;;7309:106;;-1:-1:-1;7552:49:77;7487:17;7586:14;7552;:49::i;:::-;7514:87;;;;-1:-1:-1;7107:501:77;-1:-1:-1;;;;;7107:501:77:o;5076:627:71:-;5310:11;5305:1;:16;;:59;;;;;5340:9;:24;;;5325:11;:39;;5305:59;5297:86;;;;-1:-1:-1;;;5297:86:71;;;;;;;:::i;:::-;5393:16;5424:79;5465:37;5490:11;5465:24;:37::i;:::-;5424:36;5450:9;5424:25;:36::i;:79::-;5393:110;;5514:182;5545:9;:20;;;5514:182;;5579:8;5601:9;5624:14;5652:34;5676:9;5652:23;:34::i;:::-;5514:6;;:182;;;;:17;:182::i;8939:1746:34:-;9483:16;;9193:18;;9331:16;;9460:67;;9501:6;9509:17;9460:22;:67::i;:::-;9456:704;;;9573:216;9608:6;:16;;;9642:6;9666:16;9700:9;9727:11;9756:6;:19;;;9573:17;:216::i;:::-;9985:16;;9543:246;;-1:-1:-1;9543:246:34;;-1:-1:-1;9962:67:34;;10003:6;10011:17;9962:22;:67::i;:::-;9958:192;;;10101:34;;9958:192;10484:107;10513:68;10535:6;10543;10565:1;10551:11;:15;10568:12;10513:21;:68::i;:::-;10484:11;;:15;:107::i;:::-;10470:121;-1:-1:-1;10676:1:34;;-1:-1:-1;8939:1746:34;;;;;;;;;;:::o;3383:2020:82:-;3566:6;3584:20;3607:36;3623:7;3632:10;3607:36;;:15;:36::i;:::-;3584:59;;3653:99;3755:35;:33;:35::i;:::-;-1:-1:-1;;;;;3834:14:82;;3800:31;3834:14;;;;;;;;;;;:26;;;;;;;;;;:36;;;;;;;;3653:137;;-1:-1:-1;3800:31:82;3913:56;3944:14;3861:8;3913:30;:56::i;:::-;3880:89;;;;3987:7;3979:16;;;;;;4055:29;:12;4077:6;4055:21;:29::i;:::-;4051:741;;;4193:18;;;;;;4168:43;;:22;4248:29;:8;4168:43;4248:12;:29::i;:::-;4225:52;;4312:24;:13;:22;:24::i;:::-;4291:45;;;;;;;-1:-1:-1;;;;;4291:45:82;-1:-1:-1;;;;;;4291:45:82;;;;;;4351:146;4422:7;4431:10;4443:8;4453:15;4470:13;4351:53;:146::i;:::-;4581:18;4577:106;;4634:34;:12;4654:6;4662:5;4634:19;:34::i;:::-;4619:49;;4577:106;4697:50;4713:7;4722:10;4697:50;;4734:12;4697:15;:50::i;:::-;4768:13;-1:-1:-1;4761:20:82;;-1:-1:-1;;;;;;4761:20:82;4051:741;4806:13;;4802:569;;4954:19;:8;:17;:19::i;:::-;4933:40;;;;;;;-1:-1:-1;;;;;4933:40:82;-1:-1:-1;;;;;;4933:40:82;;;;;;4988:245;5059:7;5084:10;5112:8;4933:18;5211:8;4988:53;:245::i;:::-;5263:33;:12;5283:6;5291:4;5263:19;:33::i;:::-;5248:48;;5310:50;5326:7;5335:10;5310:50;;5347:12;5310:15;:50::i;:::-;-1:-1:-1;5388:8:82;;3383:2020;-1:-1:-1;;;;;;;;;3383:2020:82:o;6716:4188:83:-;6839:4;;;;;;;;7451:574;7475:27;;:34;7471:38;;7451:574;;;7530:27;7560:14;:27;;;7588:1;7560:30;;;;;;;;;;;;;;7530:60;;7773:32;7751:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7743:63;;;;;;7903:24;7881:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7931:14:83;;;;:19;7881:69;7877:138;;;7970:30;7982:14;7998:1;7970:11;:30::i;:::-;-1:-1:-1;7511:3:83;;7451:574;;;;8124:9;8119:1217;8143:27;;:34;8139:38;;8119:1217;;;8198:27;8228:14;:27;;;8256:1;8228:30;;;;;;;;;;;;;;8198:60;;8299:24;8277:46;;;;;;;;:5;:18;;;:46;;;;;;;;;8273:1053;;;8410:17;;;;8388:19;8476:25;;8454:65;;;8583:24;8561:5;:18;;;:46;;;;;;;;;8557:361;;;8717:17;;;;;8867:32;8717:5;:17;8867:11;:32::i;:::-;8557:361;;;9131:180;9176:5;9203:7;9232:25;9279:14;9131:23;:180::i;:::-;9076:235;;-1:-1:-1;9076:235:83;-1:-1:-1;9076:235:83;-1:-1:-1;8273:1053:83;-1:-1:-1;8179:3:83;;8119:1217;;;-1:-1:-1;9401:32:83;;;;9372:26;9536:37;:35;:37::i;:::-;-1:-1:-1;;;;;9650:14:83;;9583:64;9650:14;;;;;;;;;;9443:130;;-1:-1:-1;9674:735:83;9698:14;:24;;;:31;9694:1;:35;9674:735;;;9750:27;9780:14;:24;;;9805:1;9780:27;;;;;;;;;;;;;;9750:57;;9825:5;:14;;;9843:1;9825:19;9821:33;;;9846:8;;;9821:33;9915:24;9893:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9981:32:83;9959:5;:18;;;:54;;;;;;;;;;9893:120;9868:159;;;;;;10134:160;10175:5;10198:7;10223:25;10266:14;10134:23;:160::i;:::-;10079:215;;-1:-1:-1;10079:215:83;-1:-1:-1;10079:215:83;-1:-1:-1;10309:52:83;10321:5;10328:12;10341:18;10328:32;;;;;;;;10309:11;:52::i;:::-;10397:1;10375:23;;;;9674:735;;9731:3;;9674:735;;;;10596:2;10574:18;:24;;10566:33;;;;;;10678:16;10660:34;;;10652:43;;;;;;-1:-1:-1;10766:7:83;;10787:25;;-1:-1:-1;10787:25:83;-1:-1:-1;10832:18:83;-1:-1:-1;6716:4188:83;-1:-1:-1;;;;6716:4188:83:o;15273:369:62:-;15369:1;15362:3;:8;;15354:17;;;;;;15428:19;15450:57;1172:42:54;15496:10:62;15450:22;:57::i;:::-;15428:79;-1:-1:-1;15532:21:62;15428:79;15549:3;15532:16;:21::i;:::-;15517:36;;15563:72;1172:42:54;15610:10:62;15622:12;15563:23;:72::i;13955:225:56:-;14021:41;14079:12;14094:39;14110:22;14094:15;:39::i;3301:225::-;3367:41;3424:12;3439:40;3455:23;3439:15;:40::i;3008:232::-;3074:47;3138:12;3153:40;3169:23;3153:15;:40::i;7500:250::-;7570:58;7644:12;7659:44;7675:27;7659:15;:44::i;15147:219:83:-;15247:30;15307:52;15333:7;15342:16;15307:25;:52::i;:::-;-1:-1:-1;15289:70:83;15147:219;-1:-1:-1;;;15147:219:83:o;27850:1073:79:-;27962:21;;:::i;:::-;27995:31;28029;28049:10;28029:19;:31::i;:::-;27995:65;;28155:9;28130:7;:22;;;:34;28126:528;;;28180:28;28222:30;28255:38;28282:10;28255:26;:38::i;:::-;28222:71;;28341:109;28382:10;28394:7;28403:22;28427:9;28341:23;:109::i;:::-;28307:143;;-1:-1:-1;28307:143:79;-1:-1:-1;28464:71:79;28493:10;28307:143;;28464:28;:71::i;:::-;28126:528;;;;;28574:22;;:35;;28566:44;;;;;;28671:245;;;;;;;;28709:58;:50;28734:7;:24;;;28709:7;:20;;;:24;;:50;;;;:::i;:::-;:56;:58::i;:::-;28671:245;;;;28793:56;:48;28816:7;:24;;;28793:7;:18;;;:22;;:48;;;;:::i;:56::-;28671:245;;;;28881:7;:24;;;28671:245;;;28664:252;;27850:1073;;;;;:::o;10558:218:71:-;10635:12;10659:41;10703:32;:30;:32::i;:::-;10752:17;;;;;;-1:-1:-1;;10752:17:71;;;;;10558:218::o;15738:329:56:-;15830:12;490:7;16030:9;16022:18;;;;;;;5837:257;5896:87;5999:12;6014:33;6030:16;6014:15;:33::i;10661:1216:74:-;10875:21;10939:1;10916:20;:24;10908:33;;;;;;11105:9;11088:14;:26;11084:55;;;-1:-1:-1;11123:16:74;11116:23;;11084:55;11150:16;11169:29;:9;11183:14;11169:13;:29::i;:::-;11150:48;;11291:20;11280:8;:31;11276:60;;;11320:16;11313:23;;;;;11276:60;11396:23;11422:49;:8;11450:20;11422:27;:49::i;:::-;11396:75;-1:-1:-1;11535:20:74;11558:54;4071:3:54;11396:75:74;11558:37;:54::i;:::-;11535:77;-1:-1:-1;11741:129:74;4071:3:54;11742:71:74;11784:28;:10;11535:77;11784:14;:28::i;:::-;11742:37;:16;11763:15;11742:20;:37::i;11741:129::-;11713:157;10661:1216;-1:-1:-1;;;;;;;;;10661:1216:74:o;1152:178:99:-;1210:7;1233:6;1229:20;;-1:-1:-1;1248:1:99;1241:8;;1229:20;1271:5;;;1275:1;1271;:5;:1;1294:5;;;;;:10;1286:19;;;;;1794:120;1852:7;1883:1;1879;:5;1871:14;;;;;;1906:1;1902;:5;;;;;;;1794:120;-1:-1:-1;;;1794:120:99:o;1907:134:95:-;1960:6;1988:18;1983:1;:23;;1974:33;;;;;;-1:-1:-1;2033:2:95;2028:7;;1907:134::o;6650:222::-;6707:6;6730:1;:6;;6735:1;6730:6;;6721:16;;;;;;6743:13;6780:1;6759:22;;6774:2;6768:1;6760:10;;:16;;6759:22;;;;;;;-1:-1:-1;;;;;;;6796:19:95;;;;;:42;;-1:-1:-1;;;;;;6819:19:95;;;6796:42;6787:52;;;;;8576:105;8623:6;8646:14;;;;-1:-1:-1;;;;;;8646:14:95;;8637:24;;;;;;-1:-1:-1;8674:2:95;;;8576:105::o;21318:266::-;21365:6;-1:-1:-1;;;21388:1:95;:24;;;21379:34;;;;;;-1:-1:-1;;21436:1:95;:25;;;21432:39;;;-1:-1:-1;21470:1:95;21463:8;;21432:39;21498:81;21574:3;21530:1;21522:10;;21535:35;21522:48;:55;;21498:5;:81::i;4165:197::-;4222:6;4252:13;:9;;;:13;;;;;4269:2;4252:19;-1:-1:-1;;;;;;4286:19:95;;;;;:42;;-1:-1:-1;;;;;;4309:19:95;;;4277:52;;;;;1589:89;1665:7;;1670:2;1665:7;;1589:89::o;13828:2187:76:-;14044:21;;;;:34;:41;13959:22;;13983:24;;14044:41;14106:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14106:24:76;;14095:35;;14141:30;;:::i;:::-;14186:9;14181:1828;14205:10;14201:1;:14;14181:1828;;;14293:16;;:59;;14321:6;14333:1;14329:5;;;;14342:9;14293:27;:59::i;:::-;14366:36;14405:6;:21;;;:34;;;14440:1;14405:37;;;;;;;;;;;;;;14366:76;;14730:21;14753:17;14774:50;14801:14;14817:6;14774:26;:50::i;:::-;14729:95;;;;14903:236;14935:190;14994:6;:19;;;15035:6;:16;;;:27;;;14935:190;;15084:14;:23;;;14935:37;:190::i;:::-;14903:10;;:14;:236::i;:::-;14889:8;14898:1;14889:11;;;;;;;;;;;;;:250;;;;;15280:28;15311:569;15347:519;15417:431;15476:8;15485:1;15476:11;;;;;;;;;;;;;;15513:14;:23;;;15562:9;15768:13;:58;;15804:6;:22;;;15768:58;;;15784:6;:17;;;15768:58;15417:33;:431::i;:::-;15347:16;;:26;;;;:48;:519::i;:::-;15311:14;;:18;:569::i;:::-;15280:600;-1:-1:-1;15956:42:76;:15;15280:600;15956:19;:42::i;:::-;15938:60;-1:-1:-1;;14217:3:76;;;;;-1:-1:-1;14181:1828:76;;-1:-1:-1;;14181:1828:76;;;13828:2187;;;;;;;;:::o;6594:1157::-;6715:6;6822:18;6843:211;6876:6;:19;;;6909:6;:16;;;:27;;;6843:211;;6950:6;:26;;;6990:9;7013:6;:16;;;:31;;;6843:19;:211::i;:::-;6822:232;-1:-1:-1;7069:15:76;;7065:680;;7176:33;7228:370;7294:6;:19;;;7331:6;:16;;;:27;;;7228:370;;7376:6;:26;;;7420:9;7447:6;:16;;;7481:5;7574:10;7228:48;:370::i;:::-;-1:-1:-1;7619:16:76;;:26;;;7175:423;;-1:-1:-1;7619:76:76;;7175:423;7619:48;:76::i;:::-;7612:83;;;;;;7065:680;7733:1;7726:8;;;;;1566:90:98;1612:8;1639:10;-1:-1:-1;;1647:1:98;1639:3;:10::i;3732:251:56:-;3798:67;3881:12;3896:40;3912:23;3896:15;:40::i;10976:545:77:-;11116:15;11133;11160:13;11187:22;11225:14;11212:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11212:28:77;;11187:53;;11250:22;11288:14;11275:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11275:28:77;;11250:53;;11318:9;11313:168;11333:14;11329:1;:18;11313:168;;;11380:4;11385:5;11380:11;;;;;;;;;;;;;;;;;;;;;;;;;;;11368:23;;:6;11375:1;11368:9;;;;;;;;;;;;;;;;;:23;11405:7;;;;;11438:4;11405:7;11438:11;;;;;;;;;;;;;;;;;;;;;;;;;;;11426:23;;:6;11433:1;11426:9;;;;;;;;;;;;;;;;;:23;11463:7;;;;;11349:3;11313:168;;;-1:-1:-1;11499:6:77;;-1:-1:-1;11507:6:77;-1:-1:-1;;10976:545:77;;;;;;:::o;10056:609:75:-;10350:22;3200:9:54;10375:36:75;10401:9;10375:25;:36::i;:::-;:56;10350:81;;10441:217;10483:6;10503:10;10527:8;10549:9;10572:14;10600:20;10634:14;10441:28;:217::i;11096:826:34:-;11276:4;11292:26;11321:62;11361:6;:21;;;11321:9;:19;;;:39;;:62;;;;:::i;:::-;11292:91;;11840:65;11862:42;11884:19;11862:6;:17;;;:21;;:42;;;;:::i;:::-;11840:17;;:21;:65::i;:::-;11778:17;;;;:47;;4071:3:54;11778:21:34;:47::i;:::-;:127;;11096:826;-1:-1:-1;;;;;11096:826:34:o;13258:3293::-;13513:6;13521;13539:22;13564:30;13584:9;13564:6;:15;;;:19;;:30;;;;:::i;:::-;13539:55;-1:-1:-1;13604:18:34;;4373:5:54;4071:3;4356:22;4521:3;:17;13973:6:34;:22;;;:52;13969:432;;;-1:-1:-1;4071:3:54;13969:432:34;;;14277:22;;;;14217:169;;14277:55;;4521:17:54;14277:26:34;:55::i;:::-;14354:14;14217:38;:169::i;:::-;14195:191;;13969:432;14467:19;;;;14415:33;;14467:57;;14507:16;14467:39;:57::i;:::-;14415:109;-1:-1:-1;14587:25:34;14615:66;14415:109;14661:19;14615:45;:66::i;:::-;14587:94;;14709:127;14748:9;14759:6;14767:11;14780:14;14796:26;14709:21;:127::i;:::-;14695:141;;15051:11;15047:1;:15;15039:45;;;;-1:-1:-1;;;15039:45:34;;;;;;;:::i;:::-;15624:11;15602:18;:33;;15594:63;;;;-1:-1:-1;;;15594:63:34;;;;;;;:::i;:::-;-1:-1:-1;15679:19:34;;-1:-1:-1;15709:108:34;;-1:-1:-1;15709:6:34;15742:12;15756:9;15767:11;15780:14;15796:11;15709:19;:108::i;:::-;15678:139;;;16044:1;16029:12;:16;16021:25;;;;;;16247:15;16265:34;:16;16286:12;16265:20;:34::i;:::-;16247:52;;16456:8;16451:1;:13;;:31;;;;;16479:3;16468:8;:14;16451:31;16443:61;;;;-1:-1:-1;;;16443:61:34;;;;;;;:::i;:::-;16522:8;16532:11;;-1:-1:-1;13258:3293:34;;-1:-1:-1;;;;;;;;;13258:3293:34:o;11928:1148::-;12117:6;12174:27;12204:6;:21;;;:34;;;12239:5;12204:41;;;;;;;;;;;;;;12174:71;;12376:6;:15;;;12358:5;:14;;;:33;:192;;;;-1:-1:-1;12488:15:34;;;;5641:1:54;12507:43:34;;12488:62;12358:192;:326;;;;-1:-1:-1;12658:26:34;12636:5;:18;;;:48;;;;;;;;;12358:326;12337:400;;;;-1:-1:-1;;;12337:400:34;;;;;;;:::i;:::-;12841:22;;12887:37;:6;12907:16;12887:19;:37::i;:::-;12951:14;;;;12840:84;;-1:-1:-1;12840:84:34;-1:-1:-1;12951:35:34;;12840:84;12951:18;:35::i;:::-;12934:14;;;:52;13017:24;12996:18;;;13017:24;12996:45;;-1:-1:-1;13058:11:34;11928:1148;-1:-1:-1;;;;;;;11928:1148:34:o;3973:2699:72:-;4088:7;4097:4;4117:21;4141:22;4153:9;4141:11;:22::i;:::-;4117:46;-1:-1:-1;2982:5:54;4231:8:72;:24;:29;4227:52;;4270:1;4273:5;4262:17;;;;;;;4227:52;4352:8;4335:13;:25;4331:48;;4370:1;4373:5;4362:17;;;;;;;4331:48;2982:5:54;4504:24:72;;;4503:42;3567:2:54;4628:38:72;;4624:1887;;4690:10;-1:-1:-1;4702:4:72;;-1:-1:-1;4682:25:72;;-1:-1:-1;4682:25:72;4624:1887;3619:3:54;4728:10:72;:39;4724:1787;;5040:20;2982:5:54;3103:7;5160:30:72;;5159:68;5079:148;;-1:-1:-1;;5079:148:72;;-1:-1:-1;3359:1:54;5079:148:72;5476:37;3840:2:54;5448:65:72;3359:1:54;5532:12:72;:37;;;;;;5574:1;5531:44;5254:335;;;;;;;;;4724:1787;3673:4:54;5610:10:72;:40;5606:905;;5666:20;2982:5:54;3150:8;5787:31:72;;5786:69;5705:150;;-1:-1:-1;;5705:150:72;;-1:-1:-1;3408:2:54;5705:150:72;5924:38;3893:3:54;5895:67:72;3408:2:54;5981:12:72;:38;;;;5606:905;3730:4:54;6060:10:72;:42;6056:455;;6118:20;2982:5:54;3200:9;6240:33:72;;6239:71;6157:153;;-1:-1:-1;;6157:153:72;;-1:-1:-1;3460:2:54;6157:153:72;6381:40;3949:3:54;6350:71:72;3460:2:54;6440:12:72;:40;;;;6056:455;-1:-1:-1;6654:3:72;;6659:5;;-1:-1:-1;3973:2699:72;-1:-1:-1;;;;3973:2699:72:o;715:234:96:-;787:4;820:1;811:5;:10;;:26;;;;;834:3;825:5;:12;;811:26;803:35;;;;;;-1:-1:-1;;;897:9:96;886:21;-1:-1:-1;;;885:39:96;;;884:58;;715:234::o;3098:197:98:-;3149:6;-1:-1:-1;;;;;;3176:29:98;-1:-1:-1;3176:29:98;;;:62;;-1:-1:-1;;;;;;3209:29:98;;;3167:72;;;;;17615:1780:79;17827:20;17850:46;:18;17879:16;17850:28;:46::i;:::-;17827:69;-1:-1:-1;17910:18:79;17906:31;;17930:7;;;17906:31;17947:75;18025:41;:39;:41::i;:::-;18146:17;;;18119:16;18146:17;;;;;;;;;;;:27;;;;;;;;:42;17947:119;;-1:-1:-1;;;;;;18146:42:79;;;18138:51;;;18374:28;18138:51;18388:13;18374;:28::i;:::-;18352:50;;18436:1;18420:12;:17;;18412:26;;;;;;18493:38;:27;:18;:12;:16;:18::i;:::-;:25;:27::i;:::-;:36;:38::i;:::-;18448:17;;;;;;;;;;;;;;;:27;;;;;;;;:83;;-1:-1:-1;;18448:83:79;-1:-1:-1;;;;;18448:83:79;;;;;;;;;;19310:78;19343:7;18448:17;:27;19374:13;19310:32;:78::i;:::-;17615:1780;;;;;;;;;;:::o;1296:386:82:-;2798:2:54;1437:27:82;:12;:25;:27::i;:::-;:58;;1429:86;;;;-1:-1:-1;;;1429:86:82;;;;;;;:::i;:::-;1525:61;1589:35;:33;:35::i;:::-;-1:-1:-1;;;;;1634:14:82;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1634:26:82;;:41;1296:386::o;13045:2038:83:-;13159:27;;:34;13151:42;;13143:51;;;;;;13276:1;13241:14;:32;;;:36;13233:45;;;;;;13325:35;13363:14;:27;;;13391:5;13363:34;;;;;;;;;;;;;;13325:72;;13458:24;13428:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13528:32:83;13498:13;:26;;;:62;;;;;;;;;;13428:132;13407:163;;;;;;13609:32;;;:37;;-1:-1:-1;;13609:37:83;;;-1:-1:-1;;;13887:338:83;13907:27;;:34;13903:38;;13887:338;;;13962:23;13988:14;:27;;;14016:1;13988:30;;;;;;;;;;;;;;13962:56;;14052:13;14036:1;:13;;;:29;:75;;;;-1:-1:-1;14087:24:83;14069:1;:14;;;:42;;;;;;;;;;14036:75;14032:183;;;14147:1;:13;;;14131:29;;14199:1;14178:22;;14032:183;-1:-1:-1;13943:3:83;;13887:338;;;;14248:18;14239:5;:27;14235:236;;;-1:-1:-1;;14416:24:83;14387:26;;;;;:53;14454:7;;14235:236;14684:33;14720:14;:27;;;14748:18;14720:47;;;;;;;;;;;;;;;;;;14880:25;;;;;;14919:23;;;;;14777:175;;;;14989:24;14962;;;;:51;15052:24;15023:26;;:53;;;;-1:-1:-1;;;13045:2038:83;;;:::o;11948:862::-;12095:16;;12091:20;;;;;;:68;;-1:-1:-1;12115:16:83;;6326:6:54;12115:44:83;;;;;;12091:68;12083:77;;;;;;12224:5;:14;;;12220:1;:18;:56;;;;-1:-1:-1;12242:14:83;;;;12260:16;-1:-1:-1;12242:34:83;12220:56;12212:65;;;;;;12338:5;:15;;;12334:1;:19;:77;;;;-1:-1:-1;12357:15:83;;;;5700:1:54;-1:-1:-1;12357:54:83;12334:77;12326:86;;;;;;12483:14;;;;-1:-1:-1;;12464:33:83;;;;:70;;-1:-1:-1;12501:14:83;;;;12519:15;-1:-1:-1;12501:33:83;12464:70;12456:79;;;;;;12618:16;;12585:50;;12676:14;;;;12732:15;;;;12788:14;;;;;12758:45;;-1:-1:-1;;;;;12758:45:83;-1:-1:-1;;;12758:45:83;-1:-1:-1;;12701:47:83;;;;-1:-1:-1;;;12701:47:83;-1:-1:-1;;12645:46:83;;;;;;-1:-1:-1;;12585:50:83;;;;-1:-1:-1;;12585:50:83;;;;;;;12645:46;;;;;;;;12701:47;;;;;12758:45;;;;;;;;;;11948:862::o;10985:917::-;11217:4;11235:7;11256;11288:22;11313:25;:5;:23;:25::i;:::-;11288:50;-1:-1:-1;11410:19:83;;;:54;;;11450:14;11433;:31;11410:54;11406:116;;;11497:14;11480:31;;11406:116;11541:7;:29;;;;11569:1;11552:5;:14;;;:18;11541:29;11531:39;-1:-1:-1;11589:47:83;;;;11581:56;;;;;;-1:-1:-1;;11799:16:83;;11844:7;;11821:3;11783:41;;;;-1:-1:-1;;;;;;11783:41:83;11763:2;11734:31;;;;11733:92;;;;;-1:-1:-1;11880:14:83;11844:7;-1:-1:-1;10985:917:83:o;6875:263:56:-;6942:77;7035:12;7050:41;7066:24;7050:15;:41::i;15372:265:83:-;15479:30;15511:20;15552:42;15568:7;15577:16;15552:15;:42::i;:::-;15543:51;;15610:20;15623:6;15610:12;:20::i;:::-;15604:26;;15372:265;;;;;:::o;1663:662:79:-;1748:25;;:::i;:::-;1785:33;1821:32;:30;:32::i;:::-;:44;;;;;;;;;;;;;;;;;1894:16;;;;;1875:35;;1941:18;;;-1:-1:-1;;;;;1941:18:79;;;1920;;;:39;;;;1894:16;1988;;;;;1969;;;:35;;;;-1:-1:-1;;;2035:18:79;;;;2014;;;:39;-1:-1:-1;;;2092:26:79;;;;;;2063;;;:55;2149:18;;;-1:-1:-1;;;;;2149:18:79;;;2128;;;:39;-1:-1:-1;;;2194:14:79;;;;2177;;;:31;-1:-1:-1;;;2233:12:79;;;2218;;;:27;-1:-1:-1;;;2280:26:79;;;;2309:9;2280:38;2255:63;;;1894:16;2255:22;;:63;1875:35;:1;-1:-1:-1;1663:662:79:o;4438:255::-;4511:7;4538:25;4567:38;4594:10;4567:26;:38::i;:::-;-1:-1:-1;;;;;4567:83:79;;:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;24613:2042::-;24807:23;;:::i;:::-;24832:7;24851:28;24889:24;25062:48;25081:10;25093:9;25104:5;25062:18;:48::i;:::-;24967:18;;;24923:187;;;;24937:16;;;24923:187;;;;25280:22;;;;24923:187;;-1:-1:-1;24923:187:79;-1:-1:-1;25280:48:79;;24923:187;25280:26;:48::i;:::-;25255:22;;;:73;25867:30;;;;25818;;25867:34;25863:422;;26239:30;;;;26138:132;;:58;:22;26239:30;26138:26;:58::i;:::-;:100;;:132::i;:::-;26113:157;;25863:422;26324:116;26385:54;4160:4:54;26416:22:79;26385:30;:54::i;:::-;26324:22;;;;;:60;:116::i;:::-;26299:22;;;:141;-1:-1:-1;;26454:30:79;;;:55;;;;-1:-1:-1;;26569:32:79;;26299:22;;26627:20;;-1:-1:-1;24613:2042:79:o;10176:1240::-;10338:33;10374:32;:30;:32::i;:::-;:44;10407:10;10374:44;;;;;;;;;;;;;10338:80;;10447:27;:1;:16;;;:25;:27::i;:::-;10428:46;;-1:-1:-1;;10428:46:79;;;;;;;;;10505:18;;;;:29;;:27;:29::i;:::-;10484:18;;;:50;;-1:-1:-1;;10484:50:79;-1:-1:-1;;;;;10484:50:79;;;;;;;;;;10561:14;;;;:25;;:23;:25::i;:::-;10544:1;:14;;;:42;;;;;-1:-1:-1;;;;;10544:42:79;;;;;-1:-1:-1;;;;;10544:42:79;;;;;;10611:23;:1;:12;;;:21;:23::i;:::-;10596:1;:12;;;:38;;;;;-1:-1:-1;;;;;10596:38:79;;;;;-1:-1:-1;;;;;10596:38:79;;;;;;10735:29;:1;:18;;;:27;:29::i;:::-;10714:50;;-1:-1:-1;;;;;10714:50:79;;;;;;-1:-1:-1;;10714:50:79;;;;;;10793:16;;;;:27;;:25;:27::i;:::-;10774:16;;;:46;;-1:-1:-1;;10774:46:79;-1:-1:-1;;;;;10774:46:79;;;;;;;;;;10859:26;;;;:37;;:35;:37::i;:::-;10830:66;;-1:-1:-1;;;;;10830:66:79;;;;-1:-1:-1;;;10830:66:79;-1:-1:-1;;;;10830:66:79;;;;;;10927:18;;;;:29;;:27;:29::i;:::-;10906:50;;;;;;;-1:-1:-1;;;10906:50:79;-1:-1:-1;;;;10906:50:79;;;;;;11018:24;;11014:272;;11058:18;11079:28;:20;:26;:28::i;:::-;11058:49;;11121:61;11158:10;11170:11;11121:36;:61::i;:::-;11196:79;1172:42:54;11251:10:79;11263:11;11196:31;:79::i;:::-;11014:272;;11339:10;11301:108;;;11351:1;:18;;;11371:1;:14;;;11387:1;:12;;;11301:108;;;;;;;;:::i;:::-;;;;;;;;10176:1240;;;;:::o;4888:163:99:-;4937:6;-1:-1:-1;;;;;4964:1:99;:30;;4955:40;;;;;5532:217:56;5594:41;5651:12;5666:36;5682:19;5666:15;:36::i;2713:155:99:-;2786:7;2812:49;2816:41;2820:1;4071:3:54;2816::99;:41::i;:::-;2859:1;2812:3;:49::i;14615:6524:95:-;14664:6;-1:-1:-1;;;14687:1:95;:24;;;14678:34;;;;;;-1:-1:-1;;14735:1:95;:25;;;14731:39;;;-1:-1:-1;14769:1:95;14762:8;;14731:39;-1:-1:-1;;;14790:14:95;14856:18;14852:22;;:26;;;14848:98;;;14904:35;14895:44;14943:3;14895:51;14848:98;14981:1;14956;14960:18;14956:22;:26;;;14952:98;;;15008:35;14999:44;15047:3;14999:51;14952:98;15085:1;15060;15064:18;15060:22;:26;;;15056:98;;;15112:35;15103:44;15151:3;15103:51;15056:98;15189:1;15164;15168:18;15164:22;:26;;;15160:98;;;15216:35;15207:44;15255:3;15207:51;15160:98;15292:1;15268;15272:17;15268:21;:25;;;15264:97;;;15319:35;15310:44;15358:3;15310:51;15264:97;15395:1;15371;15375:17;15371:21;:25;;;15367:97;;;15422:35;15413:44;15461:3;15413:51;15367:97;15498:1;15474;15478:17;15474:21;:25;;;15470:97;;;15525:35;15516:44;15564:3;15516:51;15470:97;15601:1;15577;-1:-1:-1;;;15577:21:95;:25;;;15573:97;;;15628:35;15619:44;15667:3;15619:51;15573:97;15703:1;15680;15684:16;15680:20;:24;;;15676:96;;;15730:35;15721:44;15769:3;15721:51;15676:96;15805:1;15782;15786:16;15782:20;:24;;;15778:96;;;15832:35;15823:44;15871:3;15823:51;15778:96;15907:1;15884;15888:16;15884:20;:24;;;15880:96;;;15934:35;15925:44;15973:3;15925:51;15880:96;16009:1;15986;15990:16;15986:20;:24;;;15982:96;;;16036:35;16027:44;16075:3;16027:51;15982:96;16110:1;16088;16092:15;16088:19;:23;;;16084:95;;;16137:35;16128:44;16176:3;16128:51;16084:95;16211:1;16189;16193:15;16189:19;:23;;;16185:95;;;16238:35;16229:44;16277:3;16229:51;16185:95;16312:1;16290;16294:15;16290:19;:23;;;16286:95;;;16339:35;16330:44;16378:3;16330:51;16286:95;16413:1;16391;16395:15;16391:19;:23;;;16387:95;;;16440:35;16431:44;16479:3;16431:51;16387:95;16513:1;16492;16496:14;16492:18;:22;;;16488:94;;;16540:35;16531:44;16579:3;16531:51;16488:94;16613:1;16592;16596:14;16592:18;:22;;;16588:94;;;16640:35;16631:44;16679:3;16631:51;16588:94;16713:1;16692;16696:14;16692:18;:22;;;16688:94;;;16740:35;16731:44;16779:3;16731:51;16688:94;16813:1;16792;16796:14;16792:18;:22;;;16788:94;;;16840:35;16831:44;16879:3;16831:51;16788:94;16912:1;16892;16896:13;16892:17;:21;;;16888:93;;;16939:35;16930:44;16978:3;16930:51;16888:93;17011:1;16991;16995:13;16991:17;:21;;;16987:93;;;17038:35;17029:44;17077:3;17029:51;16987:93;17110:1;17090;17094:13;17090:17;:21;;;17086:93;;;17137:35;17128:44;17176:3;17128:51;17086:93;17209:1;17189;17193:13;17189:17;:21;;;17185:93;;;17236:35;17227:44;17275:3;17227:51;17185:93;17307:1;17288;17292:12;17288:16;:20;;;17284:92;;;17334:35;17325:44;17373:3;17325:51;17284:92;17405:1;17386;17390:12;17386:16;:20;;;17382:92;;;17432:35;17423:44;17471:3;17423:51;17382:92;17503:1;17484;17488:12;17484:16;:20;;;17480:92;;;17530:35;17521:44;17569:3;17521:51;17480:92;17601:1;17582;17586:12;17582:16;:20;;;17578:92;;;17628:35;17619:44;17667:3;17619:51;17578:92;17698:1;17680;17684:11;17680:15;:19;;;17676:91;;;17725:35;17716:44;17764:3;17716:51;17676:91;17795:1;17777;17781:11;17777:15;:19;;;17773:91;;;17822:35;17813:44;17861:3;17813:51;17773:91;17892:1;17874;17878:11;17874:15;:19;;;17870:91;;;17919:35;17910:44;17958:3;17910:51;17870:91;17989:1;17971;17975:11;17971:15;:19;;;17967:91;;;18016:35;18007:44;18055:3;18007:51;17967:91;18085:1;18068;18072:10;18068:14;:18;;;18064:90;;;18112:35;18103:44;18151:3;18103:51;18064:90;18181:1;18164;18168:10;18164:14;:18;;;18160:90;;;18208:35;18199:44;18247:3;18199:51;18160:90;18277:1;18260;18264:10;18260:14;:18;;;18256:90;;;18304:35;18295:44;18343:3;18295:51;18256:90;18373:1;18356;18360:10;18356:14;:18;;;18352:90;;;18400:35;18391:44;18439:3;18391:51;18352:90;18468:1;18452;18456:9;18452:13;:17;;;18448:89;;;18495:35;18486:44;18534:3;18486:51;18448:89;18563:1;18547;18551:9;18547:13;:17;;;18543:89;;;18590:35;18581:44;18629:3;18581:51;18543:89;18658:1;18642;18646:9;18642:13;:17;;;18638:89;;;18685:35;18676:44;18724:3;18676:51;18638:89;18753:1;18737;18741:9;18737:13;:17;;;18733:89;;;18780:35;18771:44;18819:3;18771:51;18733:89;18847:1;18832;18836:8;18832:12;:16;;;18828:88;;;18874:35;18865:44;18913:3;18865:51;18828:88;18941:1;18926;18930:8;18926:12;:16;;;18922:88;;;18968:35;18959:44;19007:3;18959:51;18922:88;19035:1;19020;19024:8;19020:12;:16;;;19016:88;;;19062:35;19053:44;19101:3;19053:51;19016:88;19129:1;19114;19118:8;19114:12;:16;;;19110:88;;;19156:35;19147:44;19195:3;19147:51;19110:88;19222:1;19208;19212:7;19208:11;:15;;;19204:87;;;19249:35;19240:44;19288:3;19240:51;19204:87;19315:1;19301;19305:7;19301:11;:15;;;19297:87;;;19342:35;19333:44;19381:3;19333:51;19297:87;19408:1;19394;19398:7;19394:11;:15;;;19390:87;;;19435:35;19426:44;19474:3;19426:51;19390:87;19501:1;19487;19491:7;19487:11;:15;;;19483:87;;;19528:35;19519:44;19567:3;19519:51;19483:87;19593:1;19580;19584:6;19580:10;:14;;;19576:86;;;19620:35;19611:44;19659:3;19611:51;19576:86;19685:1;19672;19676:6;19672:10;:14;;;19668:86;;;19712:35;19703:44;19751:3;19703:51;19668:86;19777:1;19764;19768:6;19764:10;:14;;;19760:86;;;19804:35;19795:44;19843:3;19795:51;19760:86;19869:1;19856;19860:6;19856:10;:14;;;19852:86;;;19896:35;19887:44;19935:3;19887:51;19852:86;19960:1;19948;19952:5;19948:9;:13;;;19944:85;;;19987:35;19978:44;20026:3;19978:51;19944:85;20051:1;20039;20043:5;20039:9;:13;;;20035:85;;;20078:35;20069:44;20117:3;20069:51;20035:85;20142:1;20130;20134:5;20130:9;:13;;;20126:85;;;20169:35;20160:44;20208:3;20160:51;20126:85;20233:1;20221;20225:5;20221:9;:13;;;20217:85;;;20260:35;20251:44;20299:3;20251:51;20217:85;20323:1;20312;20316:4;20312:8;:12;;;20308:84;;;20350:35;20341:44;20389:3;20341:51;20308:84;20413:1;20402;20406:4;20402:8;:12;;;20398:84;;;20440:35;20431:44;20479:3;20431:51;20398:84;20503:1;20492;20496:4;20492:8;:12;;;20488:84;;;20530:35;20521:44;20569:3;20521:51;20488:84;20593:1;20582;20586:4;20582:8;:12;;;20578:84;;;20620:35;20611:44;20659:3;20611:51;20578:84;20682:1;20672;20676:3;20672:7;:11;;;20668:83;;;20709:35;20700:44;20748:3;20700:51;20668:83;20771:1;20761;20765:3;20761:7;:11;;;20757:83;;;20798:35;20789:44;20837:3;20789:51;20757:83;20860:1;20850;20854:3;20850:7;:11;;;20846:83;;;20887:35;20878:44;20926:3;20878:51;20846:83;20949:1;20939;20943:3;20939:7;:11;;;20935:83;;;20976:35;20967:44;21015:3;20967:51;20935:83;21051:7;;;;21056:2;21051:7;21045:2;:14;21036:24;;21025:35;-1:-1:-1;;;;;21075:29:95;;;21066:39;;;;;5736:461:87;5867:16;5885:12;5921:33;5938:5;:15;;;5921:16;:33::i;:::-;:56;;;;;5976:1;5958:5;:14;;;:19;;5921:56;5913:65;;;;;;6040:68;6086:6;:21;;;6040:41;6066:5;:14;;;6040:6;:21;;;:25;;:41;;;;:::i;:68::-;6028:80;;6126:64;6168:6;:21;;;6126:37;6148:5;:14;;;6126:6;:17;;;:21;;:37;;;;:::i;16094:1856:76:-;16306:7;16452:1;16434:14;:19;16430:42;;-1:-1:-1;16470:1:76;16455:17;;16430:42;16482:20;16505:61;16541:12;16555:10;16505:35;:61::i;:::-;16482:84;-1:-1:-1;16661:17:76;16657:42;;16687:12;-1:-1:-1;16680:19:76;;16657:42;16710:12;16725:36;16751:9;16725:25;:36::i;:::-;16710:51;;16784:19;16776:4;:27;16772:1172;;;-1:-1:-1;;;16973:47:76;;-1:-1:-1;16966:54:76;;16772:1172;17429:1;17415:485;17437:14;17432:1;:19;17415:485;;17660:16;17686:27;17711:1;17686:24;:27::i;:::-;17679:4;:34;17660:53;;17732:14;17757:61;17788:19;17809:8;17757:30;:61::i;:::-;-1:-1:-1;17731:87:76;-1:-1:-1;17851:34:76;:12;17731:87;17879:5;17851:19;:34::i;:::-;17836:49;-1:-1:-1;;;17453:3:76;;17415:485;;;;17921:12;17914:19;;;;;;6486:1012:82;6768:27;6797:12;6821:14;6838:28;:12;:26;:28::i;:::-;6821:45;;6877:615;6884:11;;6877:615;;6911:16;6930:54;6961:14;6977:6;6930:30;:54::i;:::-;6911:73;;6998:9;7010:192;7043:7;7068:10;7096:8;7122:9;7149;7176:12;7010:15;:192::i;:::-;6998:204;-1:-1:-1;7239:28:82;:20;6998:204;7239:24;:28::i;:::-;7216:51;;7291:1;7286:2;:6;7282:26;;;7304:4;7294:14;;7282:26;7396:34;:12;7416:6;7424:5;7396:19;:34::i;:::-;7381:49;;7453:28;:12;:26;:28::i;:::-;7444:37;;6877:615;;;;;6486:1012;;;;;;;;;;;:::o;10850:612:75:-;11138:80;11157:6;11165:10;11177:8;11187:14;11203;11138:18;:80::i;:::-;11249:206;11297:6;:24;;;11335:6;:22;;;11371:6;:17;;;11402:20;11436:9;11249:34;:206::i;:::-;11229:17;;;;:226;;;;-1:-1:-1;;;;;;10850:612:75:o;14554:312:80:-;14674:6;14692:13;14708:76;4251:4:54;14708:37:80;14729:2;:15;;;14708:16;:20;;:37;;;;:::i;26073:577:74:-;26194:19;;26255:76;26278:52;3248:11:54;26278:32:74;:12;26295:14;26278:16;:32::i;26255:76::-;26225:106;;26341:21;26365:59;26383:8;-1:-1:-1;;;26365:17:74;:59::i;:::-;26341:83;;26434:16;26453:33;26471:14;26453:17;:33::i;:::-;26434:52;;26496:22;26521:60;26539:9;-1:-1:-1;;;26521:17:74;:60::i;:::-;26496:85;;26607:36;26627:15;26607:19;:36::i;:::-;26592:51;;;26073:577;-1:-1:-1;;;;;;;26073:577:74:o;16757:769:34:-;17001:6;17019:38;17060:106;17123:9;:20;;;17145:11;17060:49;:106::i;:::-;17019:147;;17184:335;17239:8;17261:6;:17;;;17373:32;:26;:30;:32::i;:::-;17459:21;;;;17419:19;;;;:62;;:39;:62::i;:::-;17495:14;17184:41;:335::i;:::-;17177:342;16757:769;-1:-1:-1;;;;;;;16757:769:34:o;2739:1363:75:-;2988:19;3009:27;3048:28;3147:171;3198:6;3218:9;3241:14;3269;3297:11;3147:37;:171::i;:::-;3086:232;;-1:-1:-1;3086:232:75;;-1:-1:-1;3086:232:75;-1:-1:-1;3446:17:75;;3442:654;;3479:35;3517:32;3542:6;3517:24;:32::i;:::-;3479:70;;3563:253;3598:13;3629:6;:17;;;3664:6;:21;;;3703:6;:22;;;3743:6;:17;;;3778:6;:24;;;3563:17;:253::i;:::-;3867:20;;3830:81;;3889:21;3830:36;:81::i;:::-;3926:159;3972:7;3981:9;:20;;;4003:6;:15;;;4020:14;4036:12;4050:21;3926:28;:159::i;:::-;3442:654;;2739:1363;;;;;;;;;;:::o;933:936::-;1039:22;1063:12;1123:1;1099:6;:21;;;:25;1091:55;;;;-1:-1:-1;;;1091:55:75;;;;;;;:::i;:::-;1160:14;1156:33;;-1:-1:-1;1184:1:75;;-1:-1:-1;1184:1:75;1176:13;;1156:33;1219:1;1207:9;:13;1199:22;;;;;;1278:63;1319:6;:21;;;1278:36;1304:9;1278:6;:21;;;:25;;:36;;;;:::i;:63::-;1260:81;;1462:59;1499:6;:21;;;1462:32;1484:9;1462:6;:17;;;:21;;:32;;;;:::i;:59::-;1556:21;;;;1454:67;;-1:-1:-1;1556:42:75;;1582:15;1556:25;:42::i;:::-;1532:21;;;:66;1628:17;;;;:28;;1650:5;1628:21;:28::i;:::-;1608:17;;;:48;1690:21;;;;:36;;1716:9;1690:25;:36::i;:::-;1666:21;;;:60;1736:37;1666:6;1736:29;:37::i;:::-;1851:11;:5;:9;:11::i;3647:1015:98:-;3715:6;3790:3;3781:5;:12;:40;;;;3807:1;3798:5;:10;;:22;;;;;3819:1;3812:3;:8;;3798:22;3777:54;;;-1:-1:-1;3830:1:98;3823:8;;3777:54;3854:1;3845:5;:10;;:21;;;;;3863:3;3859:1;:7;3845:21;3841:754;;;-1:-1:-1;4047:5:98;4040:12;;3841:754;4080:1;4073:3;:8;;:21;;;;;4089:5;4085:1;:9;4073:21;4069:526;;;4278:8;4282:3;4278;:8::i;:::-;4271:15;;;;4069:526;4316:1;4307:5;:10;;:22;;;;;4328:1;4321:3;:8;;4307:22;4303:292;;;4569:15;4573:5;4580:3;4569;:15::i;13605:278:56:-;13677:75;13769:12;13784:52;13800:35;13784:15;:52::i;2410:117:98:-;2459:7;2491:1;2486;:6;;2478:15;;;;;4181:133:99;4233:6;-1:-1:-1;;;;;4259:21:99;;;4251:30;;;;;7493:440:61;7637:20;7659:23;7686:47;7697:10;7709:8;7719:13;7686:10;:47::i;:::-;7636:97;;;;7743:12;7757:10;7797:1;7781:13;:17;7777:75;;;7807:7;7800:14;;7777:75;;;-1:-1:-1;7845:7:61;7777:75;7910:2;-1:-1:-1;;;;;7878:48:61;7904:4;-1:-1:-1;;;;;7878:48:61;7892:10;-1:-1:-1;;;;;7878:48:61;;7914:3;7919:6;7878:48;;;;;;;:::i;:::-;;;;;;;;7493:440;;;;;;;;:::o;996:838:96:-;1198:1;1193:6;;;1202:66;1193:75;;;1118:70;;1117:152;1364:1;1359:6;;;1368:66;1359:75;;;1284:70;;1283:152;1530:1;1525:6;;;1454:66;1450:70;;;;1449:83;1627:1;1622:6;;;1631:66;1622:75;;;1547:70;;1546:152;1722:2;1717:7;;;1712:13;1749:2;1744:7;;;1739:13;1777:2;1772:7;;;1766:14;1816:3;1811:8;;;1822:4;1811:15;;;1798:8;;1797:30;;996:838::o;1227:752:87:-;1306:7;1351:1;1333:5;:15;;;:19;:77;;;;-1:-1:-1;1356:15:87;;;;5700:1:54;-1:-1:-1;1356:54:87;1333:77;1325:86;;;;;;1530:15;;;;5641:1:54;-1:-1:-1;1526:81:87;;-1:-1:-1;1593:14:87;;;;1586:21;;1526:81;1618:20;1641:45;1684:1;1666:5;:15;;;:19;1641:24;:45::i;:::-;1917:14;;;;1618:68;;-1:-1:-1;1917:55:87;;3200:9:54;;1917:32:87;;1618:68;1917:18;:32::i;17538:1107:83:-;17640:23;847:1;17737:6;:30;;;;17729:39;;;;;;17779:90;17872:37;:35;:37::i;:::-;-1:-1:-1;;;;;17986:14:83;;17919:64;17986:14;;;;;;;;;;17779:130;;-1:-1:-1;18043:28:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;18010:61;;18087:9;18082:533;18106:6;18102:10;;:1;:10;18082:533;;;18133:42;18178:12;18191:1;18178:15;;;;;;;;18133:60;;18207:27;18237:6;18244:1;18237:9;;;;;;;;;;;;;;;;;;;18385:23;;;;;18366:42;;18439:21;;;;;18422:14;;;:38;;;;18492:22;-1:-1:-1;;;18492:22:83;;;18474:15;;;:40;-1:-1:-1;;;18545:21:83;;;;;;;18528:38;;:14;;;:38;18580:17;;:24;;;;-1:-1:-1;18385:23:83;18114:3;18082:533;;;-1:-1:-1;18632:6:83;17538:1107;-1:-1:-1;;;;;17538:1107:83:o;16696:836::-;16835:13;;16786:20;;16835:13;16864:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16864:21:83;;16858:27;;16900:9;16895:236;16915:6;16911:1;:10;16895:236;;;16942:27;16972:6;16979:1;16972:9;;;;;;;;;;;;;;16942:39;;17062:58;17070:5;:16;;;17088:5;:14;;;17104:5;:15;;;17062:7;:58::i;:::-;17053:3;17057:1;17053:6;;;;;;;;;;;;;;;;;:67;-1:-1:-1;16923:3:83;;16895:236;;;-1:-1:-1;17185:1:83;17196:330;17207:6;17203:1;:10;17196:330;;;17241:1;17256:243;17267:1;17263;:5;:28;;;;;17285:3;17289:1;17285:6;;;;;;;;;;;;;;17272:3;17280:1;17276;:5;17272:10;;;;;;;;;;;;;;:19;17263:28;17256:243;;;17371:3;17375:1;17371:6;;;;;;;;;;;;;;17379:3;17387:1;17383;:5;17379:10;;;;;;;;;;;;;;17348:3;17356:1;17352;:5;17348:10;;;;;;;;;;;;;17360:3;17364:1;17360:6;;;;;;;;;;;;;17347:43;;;;;;;;;;17438:6;17445:1;17438:9;;;;;;;;;;;;;;17449:6;17460:1;17456;:5;17449:13;;;;;;;;;;;;;;17409:6;17420:1;17416;:5;17409:13;;;;;;;;;;;;;17424:6;17431:1;17424:9;;;;;;;;;;;;;;;;;17408:55;;;;;-1:-1:-1;;17481:3:83;17256:243;;;-1:-1:-1;17512:3:83;;17196:330;;;16696:836;;;;;:::o;12513:242:56:-;12576:57;12650:12;12665:43;12681:26;12665:15;:43::i;3556:233:79:-;3634:24;3670:33;3706:39;:37;:39::i;:::-;:51;;;;;;;;;;;;;;-1:-1:-1;;3706:51:79;;;3774:8;-1:-1:-1;;;;;3774:8:79;;3556:233::o;21727:2630::-;21885:25;21920:23;21953:28;21991:24;22032:28;22070:29;22175:40;22197:10;22209:5;22175:21;:40::i;:::-;22544:20;;22109:106;;-1:-1:-1;22109:106:79;;-1:-1:-1;22109:106:79;-1:-1:-1;22443:33:79;;22479:87;;22530:35;;:9;;:13;:35::i;:::-;4071:3:54;;22479:50:79;:87::i;:::-;22443:123;-1:-1:-1;22597:233:79;22648:172;3248:11:54;22737:52:79;:21;22443:123;22737:25;:52::i;:::-;:69;;;;;4160:4:54;;22737:69:79;;22648:30;:172::i;:::-;22597:16;;;;;:37;:233::i;:::-;22577:253;-1:-1:-1;22859:230:79;22912:167;3248:11:54;23001:47:79;:16;23022:25;23001:20;:47::i;22912:167::-;22859:18;;;;;:39;:230::i;:::-;22841:248;;23238:21;23214:20;:45;23210:140;;;-1:-1:-1;23319:1:79;;-1:-1:-1;23275:64:79;;-1:-1:-1;;23275:64:79;23210:140;23487:23;23513:232;23564:171;3248:11:54;23653:51:79;:20;23678:25;23653:24;:51::i;23564:171::-;23513:16;;;;;:37;:232::i;:::-;23487:258;-1:-1:-1;23755:26:79;23784:38;:17;23487:258;23784:21;:38::i;:::-;23755:67;;24285:65;24334:15;24285:44;24310:18;24285:5;:20;;;:24;;:44;;;;:::i;:65::-;24262:88;;21727:2630;;;;;;;;;;;;;:::o;3035:150:99:-;3110:7;3136:42;3140:34;3144:1;4160:4:54;3140:3:99;:34::i;3191:150::-;3266:7;3292:42;3296:9;3300:1;3303;3296:3;:9::i;:::-;4160:4:54;3292:3:99;:42::i;3621:133::-;3673:6;3704:16;3699:21;;;3691:30;;;;;4320:133;4372:6;-1:-1:-1;;;;;4398:21:99;;;4390:30;;;;;3482:133;3534:6;3565:16;3560:21;;;3552:30;;;;;12909:281:61;13032:26;13078:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;;;13136;;-1:-1:-1;;;13136:47:61;;-1:-1:-1;;;;;13078:47:61;;;;-1:-1:-1;13078:47:61;;13136:24;;:47;;13161:7;;13170:12;;13136:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12909:281;;;;:::o;836:222:87:-;904:4;5641:1:54;939:48:87;;;;;:112;;-1:-1:-1;;5700:1:54;-1:-1:-1;1003:48:87;;836:222::o;5463:1017:82:-;5696:6;5714:15;5732:48;5750:7;5759:10;5771:8;5732:17;:48::i;:::-;5714:66;;5901:9;5889:8;:21;5885:589;;5933:8;-1:-1:-1;5926:15:82;;5885:589;5976:12;5972:492;;;6015:125;6082:9;6093:8;6103;6113:9;6015:45;:125::i;:::-;6008:132;;;;;5972:492;6179:18;6200:50;:9;6230:8;6240:9;6200:29;:50::i;:::-;6179:71;;6275:174;6330:8;6360;6390:9;6421:10;6275:33;:174::i;5679:1161:75:-;5983:100;6086:29;:27;:29::i;:::-;6125:35;6163:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;6307:25;;;6342:15;;;:26;;;6398:24;;-1:-1:-1;;;;;6398:24:75;;;6378:17;;;:44;;;;-1:-1:-1;;;6456:28:75;;;;;6432:21;;;:52;6519:29;-1:-1:-1;;;6519:29:75;;;;6494:22;;;:54;-1:-1:-1;;;6578:24:75;;;;6558:17;;;:44;-1:-1:-1;;;6639:31:75;;;;;;6612:24;;;:58;5983:132;;-1:-1:-1;6163:43:75;6681:153;;;;6739:28;;;;-1:-1:-1;;;;;6739:28:75;6715:21;;;:52;6681:153;;;6822:1;6798:21;;;:25;5679:1161;;;;;;;;:::o;7357:327:74:-;7483:31;;:::i;:::-;7533:144;7574:10;7598:11;7623:44;:42;:44::i;:::-;7533:27;:144::i;28079:2497::-;28323:6;28349:27;28341:36;;;;;;28478:19;28452:22;:45;;28444:75;;;;-1:-1:-1;;;28444:75:74;;;;;;;:::i;:::-;28530:14;28554;28653:31;28687:290;28734:8;28760:10;28788:19;28825:14;28882:1;28857:22;:26;:51;;28906:1;28857:51;;;-1:-1:-1;;28857:51:74;28687:29;:290::i;:::-;28653:324;;29021:1;28996:22;:26;28992:691;;;29219:28;:22;:26;:28::i;:::-;29209:38;-1:-1:-1;29275:73:74;:67;:22;29317:24;29275:41;:67::i;:::-;:71;:73::i;:::-;29265:83;;28992:691;;;29426:73;:67;:22;29468:24;29426:41;:67::i;:73::-;29416:83;;29527:141;:135;29590:54;29611:8;:16;;;29629:14;29590:20;:54::i;:::-;29527:22;;:41;:135::i;:141::-;29517:151;;28992:691;28079:2497;29703:13;29719:188;29747:8;29769:10;29793:19;29826:7;29847:14;29875:22;29719:14;:188::i;:::-;29703:204;;29923:7;29918:617;29940:3;29936:1;:7;;;29918:617;;;29985:17;;;30021:15;30017:35;;30045:7;30038:14;;;;;;;;;30017:35;30066:13;30082:216;30114:8;30140:10;30168:19;30205:7;30230:14;30262:22;30082:14;:216::i;:::-;30066:232;-1:-1:-1;30312:14:74;30329:59;30341:46;30368:18;30066:232;30379:6;30368:10;:18::i;:::-;30341:22;:6;30352:10;30341;:22::i;:46::-;30329:7;;:11;:59::i;:::-;30487:7;;-1:-1:-1;30518:6:74;;-1:-1:-1;;;29945:3:74;;29918:617;;;;30545:24;;-1:-1:-1;;;30545:24:74;;;;;;;:::i;19096:2937::-;19332:28;19362:25;19389:27;19500:1;19486:11;:15;19478:24;;;;;;19790:14;19769:6;:17;;;:35;19765:57;;-1:-1:-1;19814:1:74;;-1:-1:-1;19814:1:74;;-1:-1:-1;19814:1:74;19806:16;;19765:57;19833:38;19874:66;19906:9;:20;;;19928:11;19874:31;:66::i;:::-;19833:107;;19950:26;19979:62;20019:6;:21;;;19979:9;:19;;;:39;;:62;;;;:::i;:::-;19950:91;;20141:29;20180:28;20218:29;20410:192;20452:8;20474:6;20494:9;20517:19;20550:14;20578;20410:28;:192::i;:::-;20257:345;-1:-1:-1;20257:345:74;;-1:-1:-1;20257:345:74;-1:-1:-1;20257:345:74;-1:-1:-1;20675:27:74;20671:49;;20712:1;20715;20718;20704:16;;;;;;;;;;;;;20671:49;21001:17;;;;:42;;21028:14;21001:26;:42::i;:::-;20981:17;;;:62;21079:46;:19;21103:21;21079:23;:46::i;:::-;21057:68;;21140:19;21162:62;21182:1;21185:6;:17;;;21204:19;21162;:62::i;:::-;21140:84;;4071:3:54;21242:11:74;:47;21238:69;;;21299:1;21302;21305;21291:16;;;;;;;;;;;;;;21238:69;21322:28;21353:38;21369:8;21379:11;21353:15;:38::i;:::-;21322:69;-1:-1:-1;21614:25:74;21610:47;;21649:1;21652;21655;21641:16;;;;;;;;;;;;;;;21610:47;21726:22;;;:45;-1:-1:-1;21890:19:74;;;;21838:188;;21726:6;;21923:22;21959:21;21994:22;21838:18;:188::i;:::-;21792:234;;-1:-1:-1;21792:234:74;-1:-1:-1;;;;;;19096:2937:74;;;;;;;;;;:::o;6846:257:75:-;7010:18;;7047:50::o;8816:1123::-;9088:1;9074:10;:15;;:49;;;;-1:-1:-1;;;;;;9093:30:75;;;9074:49;9066:58;;;;;;9196:1;9178:14;:19;;:57;;;;-1:-1:-1;;;;;;9201:34:75;;;9178:57;9170:66;;;;;;9298:15;9294:1;:19;:58;;;;-1:-1:-1;9336:16:75;9317:35;;;9294:58;9286:67;;;;;;9416:10;9412:1;:14;:48;;;;-1:-1:-1;9444:16:75;9430:30;;;9412:48;9404:57;;;;;;9562:16;9541:37;;;9507:72;;;;;;9635:45;;-1:-1:-1;;9635:45:75;-1:-1:-1;;;;;9635:45:75;;;;-1:-1:-1;;;;9690:53:75;-1:-1:-1;;;9690:53:75;;;;;;;;;;;;-1:-1:-1;;;;9753:55:75;-1:-1:-1;;;9753:55:75;;;;;;-1:-1:-1;;;;9818:45:75;-1:-1:-1;;;9818:45:75;;;;;;;;;;;-1:-1:-1;;;;;9873:59:75;-1:-1:-1;;;9873:59:75;;;;;;;;8816:1123::o;11248:1511:61:-;11472:26;11518:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11518:47:61;;-1:-1:-1;11593:36:61;:34;:36::i;:::-;:48;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11593:48:61;;-1:-1:-1;12266:32:61;:13;12284;12266:17;:32::i;:::-;12241:57;;12308:9;-1:-1:-1;;;;;12308:33:61;;12342:7;12351:6;12359:15;12376:22;:13;:20;:22::i;:::-;12308:91;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12680:72;12698:6;12706:7;12715:10;12727:8;12737:14;12680:17;:72::i;7109:581:75:-;7199:35;7237:32;7262:6;7237:24;:32::i;:::-;7199:70;;7331:23;7357:13;:24;;;;;;;;;;;;7331:50;;7392:224;7423:13;7450:6;:17;;;7481:6;:21;;;7516:6;:22;;;7552:16;7392:224;;7582:6;:24;;;7392:17;:224::i;:::-;7627:56;7646:13;7661:6;:21;;;7627:18;:56::i;6842:490:61:-;7019:16;;;7033:1;7019:16;;;6950;7019;;;;;;6950;;6996:20;;7019:16;;;;;;;;;;;;-1:-1:-1;7019:16:61;6996:39;;7045:10;7058:33;7070:10;7082:8;7058:11;:33::i;:::-;7045:46;;7110:2;7101:3;7105:1;7101:6;;;;;;;;;;;;;:11;;;;;-1:-1:-1;;;7131:2:61;:24;7122:3;7126:1;7122:6;;;;;;;;;;;;;;;;;:33;7192:16;;;7206:1;7192:16;;;;;;;;;7166:23;;7192:16;;;;;;;;;;;;-1:-1:-1;7192:16:61;7166:42;;7238:12;:6;:10;:12::i;:::-;7218:6;7225:1;7218:9;;;;;;;;;;;;;:33;;;;;7281:12;:6;:10;:12::i;:::-;7261:6;7268:1;7261:9;;;;;;;;;;;;;;;;;:33;7313:3;;;;-1:-1:-1;6842:490:61;;-1:-1:-1;;;;;6842:490:61:o;16382:308:83:-;16525:34;16557:2;16525:34;;;;16580:39;16618:1;16580:39;;;;16524:96;16647:25;;;16524:149;16382:308;;;;;:::o;13247:257:56:-;13317:57;13391:12;13406:51;13422:34;13406:15;:51::i;19401:1969:79:-;19538:28;19576:29;19615:24;20002:19;20062:1;20035:7;:24;;;:28;20031:297;;;20183:134;20266:50;20295:7;:20;;;20266:7;:24;;;:28;;:50;;;;:::i;:::-;20210:18;;;;20183:22;;;;:46;;:26;:46::i;:::-;:82;;:134::i;:::-;20169:148;;20031:297;20337:31;20371:64;20424:10;20371:52;:64::i;:::-;20337:98;-1:-1:-1;20477:30:79;20337:98;20495:11;20477:17;:30::i;:::-;20454:53;-1:-1:-1;20785:15:79;;20781:209;;20927:52;:1;20952:20;20974:4;20927:24;:52::i;:::-;20903:76;;20781:209;21238:24;;;;:28;21234:130;;21301:52;:20;21341:11;21301:39;:52::i;:::-;21282:71;;21234:130;19401:1969;;;;;;;:::o;4889:752:87:-;5084:6;5106:13;5102:27;;-1:-1:-1;5128:1:87;5121:8;;5102:27;5140:21;5175:1;5164:8;:12;:161;;5266:59;5294:9;5305:8;5315:9;5266:27;:59::i;:::-;5164:161;;;5191:60;5220:9;5231:8;5241:9;5191:28;:60::i;:::-;5140:185;;4071:3:54;5344:14:87;:42;;5336:51;;;;;;5451:9;5463:43;:8;5491:14;5463:27;:43::i;:::-;5451:55;;5602:1;5591:8;:12;:43;;5632:2;5591:43;;;5607:22;5622:2;-1:-1:-1;;5607:14:87;:22::i;11787:253:56:-;11862:44;11923:12;11938:55;11954:38;11938:15;:55::i;2511:396:74:-;2686:31;;:::i;:::-;2729:12;2744:34;2766:11;2744:21;:34::i;:::-;2803:17;;;2788:12;2803:17;;;;;;;;;;2729:49;;-1:-1:-1;2788:12:74;2835:1;2821:15;;:23;;2843:1;2821:23;;;2839:1;2821:23;2803:42;;;;;;;;;;;2788:57;;2862:38;2887:6;2895:4;2862:24;:38::i;31168:611::-;31409:6;31427:26;31456:129;31485:8;31507:68;31527:14;31543:10;31555:19;31507;:68::i;:::-;31456:15;:129::i;:::-;31427:158;;31595:27;31625:72;31648:8;31658:18;31695:1;31678:14;:18;31625:22;:72::i;:::-;31595:102;;31715:57;31736:19;31757:14;31715:20;:57::i;30582:580::-;30847:6;30865:19;30888:174;30931:8;30953:10;30977:19;31010:14;31038;30888:29;:174::i;:::-;30865:197;-1:-1:-1;31080:75:74;31099:55;:22;30865:197;31099:41;:55::i;:::-;31080:14;;:18;:75::i;22439:2396::-;22747:27;22784:28;22822:20;22852:27;22896:19;22918:75;22938:14;22954:6;:17;;;22973:19;22918;:75::i;:::-;22896:97;;4071:3:54;23070:11:74;:47;23066:72;;;23127:1;23130;23133;23136;23119:19;;;;;;;;;;;23066:72;23148:26;23177:38;23193:8;23203:11;23177:15;:38::i;:::-;23148:67;;23226:26;23255:119;:113;23302:56;23323:18;23343:14;23302:20;:56::i;:::-;23255:14;;:33;:113::i;:119::-;23226:148;;23407:72;23430:8;23440:18;23477:1;23460:14;:18;23407:22;:72::i;:::-;23385:94;;23512:120;:114;23559:57;23580:19;23601:14;23559:20;:57::i;23512:120::-;23489:143;;23675:19;23651:20;:43;;23643:52;;;;;;23882:10;23895:45;:19;23919:20;23895:23;:45::i;:::-;23882:58;;23967:74;2186:3:54;23967:39:74;23975:30;:9;:28;:30::i;23967:74::-;23951:90;-1:-1:-1;24781:47:74;24782:39;:20;23951:90;24782:24;:39::i;24781:47::-;24757:71;;22439:2396;;;;;;;;;;;;;;;;:::o;12011:407::-;12163:19;12216:1;12202:10;:15;;12194:24;;;;;;12259:1;12236:19;:24;;12228:33;;;;;;12285:126;:104;12353:35;:19;12377:10;12353:23;:35::i;:::-;12285;:10;12305:14;12285:19;:35::i;12518:2178::-;12649:26;12831:1;12812:8;:16;;;:20;12804:29;;;;;;4071:3:54;13163:11:74;:48;;13155:57;;;;;;13242:25;;13227:40;;13223:1467;;13436:25;;13395:18;;;;13362:100;;13436:25;13362:52;;:11;;:32;:52::i;13223:1467::-;13498:8;:25;;;13483:11;:40;13479:1211;;14077:18;;;;13994:25;;13966;;;;13869:18;;;;13785:311;;14077:18;13785:235;;13966:53;;;;13785:124;;13786:39;;;13869;;;13785:83;:124::i;13479:1211::-;14362:317;14660:8;:18;;;14362:241;14577:8;:25;;;4071:3:54;14541:61:74;14362:122;14465:8;:18;;;14446:8;:16;;;:37;14377:8;:25;;;14363:11;:39;14362:83;;:122;;;;:::i;25075:872::-;25323:6;;;25379:54;:9;25411:21;25379:31;:54::i;:::-;25533:21;;;;25349:84;;-1:-1:-1;25533:47:74;;25349:84;25533:25;:47::i;:::-;25509:21;;;:71;25676:15;25649:24;;;:42;-1:-1:-1;25729:55:74;:9;25761:22;25729:31;:55::i;:::-;25701:83;-1:-1:-1;25794:28:74;25825:55;:9;25857:22;25825:31;:55::i;:::-;25794:86;25921:18;;-1:-1:-1;25075:872:74;;-1:-1:-1;;;;;;;;25075:872:74:o;7997:551:61:-;8139:11;8135:24;;8152:7;;8135:24;8168:10;8181:33;8193:10;8205:8;8181:11;:33::i;:::-;8168:46;;8436:1;8427:6;:10;8423:39;;;8453:2;;8457:4;8423:39;-1:-1:-1;;;;;8478:63:61;;;;;;8493:10;8478:63;8515:2;8527:12;:6;:10;:12::i;:::-;8478:63;;;;;;;:::i;:::-;;;;;;;;7997:551;;;;;;:::o;8498:312:75:-;8653:1;8635:14;:19;;:57;;;;-1:-1:-1;;;;;;8658:34:75;;;8635:57;8627:66;;;;;;8750:28;;;;;:53;;-1:-1:-1;;8750:53:75;-1:-1:-1;;;;;8750:53:75;;;;;;;;;8498:312::o;6221:322:61:-;6353:47;2786:2;6353:47;;;;2729:1;6417:36;;;6352:102;5494:1:54;6352:174:61;6221:322;;;;:::o;8019:290:74:-;8119:31;;:::i;:::-;8162:12;8177:44;:42;:44::i;:::-;:56;;;;;;;;;;;;;;;:59;;-1:-1:-1;8253:49:74;;8177:59;8253:24;:49::i;17338:897::-;17506:27;17545:15;17563:91;2186:3:54;17563:47:74;17586:8;:23;;;17563:18;:22;;:47;;;;:::i;:91::-;17545:109;;17678:8;:19;;;17668:7;:29;17664:64;;;-1:-1:-1;17709:19:74;;;;17664:64;17752:8;:19;;;17742:7;:29;17738:64;;;-1:-1:-1;17783:19:74;;;;17738:64;17817:8;17813:416;;;17967:31;:18;17990:7;17967:22;:31::i;:::-;17945:53;;17813:416;;;18163:18;18153:7;:28;:65;;18210:7;18189:18;:28;18153:65;;;18184:1;18131:87;17338:897;-1:-1:-1;;;;;17338:897:74:o;2874:155:99:-;2947:7;2973:49;2977:9;2981:1;2984;2977:3;:9::i;:::-;4071:3:54;2973::99;:49::i;4147:542:87:-;4312:21;;4366:66;:9;4412:8;4422:9;4366:45;:66::i;:::-;4345:87;-1:-1:-1;4459:15:87;;:223;;4628:54;4646:23;:8;4659:9;4646:12;:23::i;:::-;4671:10;4628:17;:54::i;:::-;4459:223;;;4071:3:54;4442:240:87;4147:542;-1:-1:-1;;;;;4147:542:87:o;3613:528::-;3779:21;;3833:67;:9;3880:8;3890:9;3833:46;:67::i;:::-;3812:88;-1:-1:-1;3927:54:87;3945:23;:8;3958:9;3945:12;:23::i;3927:54::-;3910:71;;3991:24;4018:32;:9;:30;:32::i;:::-;3991:59;;4084:14;4064:17;:34;4060:74;;;4117:17;4100:34;;4060:74;3613:528;;;;;;;:::o;2232:273:74:-;2306:12;2342:11;2338:1;:15;2330:24;;;;;;2606:1:54;2372:11:74;:48;;2364:57;;;;;;2460:1;2446:11;:15;:47;;2492:1;2478:11;:15;2446:47;;;2464:11;2446:47;2497:1;2440:58;;2232:273;-1:-1:-1;;2232:273:74:o;3552:1423::-;3659:31;;:::i;:::-;2186:3:54;4071;3879:4:74;3884:32;;;3879:38;;;;;;;;3865:90;:143;;;;;;3844:164;;2186:3:54;4071;4053:4:74;4058:32;;;1019:1;4058:32;4053:38;;;;;;;;4039:90;:143;;;;;;4018:1;:18;;:164;;;;;4204:53;4227:4;1077:1;4232:6;:22;;;4227:28;;;;;;;;4204:16;:53::i;:::-;4192:9;;;:65;;;4515:3;;4467:4;4472:25;;;1135:1;4472:25;4467:31;;;;;;;;4453:59;:65;;;;;;4439:11;;;:79;4592:9;;;;4604:3;;4556:4;4561:25;;;1193:1;4561:25;4556:31;;;;;;;;4542:59;:65;;;;;;4528:11;;;:79;4633:15:54;4695:4:74;4700:26;;;4633:1:54;4700:26:74;4695:32;;;;;;;;4681:87;4666:12;;;:102;5125:16:54;4807:4:74;4812:26;;;1309:1;4812:26;4807:32;;;;;;;;4793:94;4778:12;;;:109;4930:4;4801:39;4935:30;;1367:1;4935:30;4930:36;;;;;;;;4897:16;;;:71;:1;3552:1423;-1:-1:-1;;3552:1423:74:o;4446:200:71:-;4602:14;;;1781:32;4602:35;4581:58;;;4446:200::o;8069:729::-;8242:18;8285:51;8305:9;8316:8;8326:9;8285:19;:51::i;:::-;8272:64;;8347:18;8368:24;8382:9;8368:13;:24::i;:::-;8347:45;;8594:10;8580;:24;8576:38;;8613:1;8606:8;;;;;8576:38;8651:10;8638;:23;8625:36;;8671:21;8695:27;8712:9;8695:16;:27::i;:::-;8671:51;;8753:10;8737:13;:26;8733:58;;;8778:13;8069:729;-1:-1:-1;;;;;8069:729:71:o;7592:471::-;7766:18;7809:51;7829:9;7840:8;7850:9;7809:19;:51::i;:::-;7796:64;;7884:42;7899:26;7915:9;7899:15;:26::i;:::-;7884:10;;:14;:42::i;:::-;7871:55;;7936:21;7960:27;7977:9;7960:16;:27::i;:::-;7936:51;;8015:13;8002:10;:26;7998:58;;;8043:13;7592:471;-1:-1:-1;;;;7592:471:71:o;3973:390::-;4144:14;;;4122:92;1696:34;4144:37;;;;4122:62;;:92;4071:3:54;4304:52:71;;3973:390::o;2913:633:74:-;2981:7;3306:11;3274:43;;4981:3:54;3274:43:74;:265;;3491:48;;;5125:16:54;3491:48:74;3274:265;;;-1:-1:-1;;;3388:43:74;;;;;;5206:17:54;3387:88:74;5044:22:54;3333:142:74;;2913:633::o;3262:155:71:-;3346:7;3372:38;3387:9;1858:26;3372:14;:38::i;2711:162::-;2798:7;2824:42;2839:9;2281:30;2824:14;:42::i;2986:159::-;3072:7;3098:40;3113:9;1931:28;3098:14;:40::i;2543:162::-;2630:7;2656:42;2671:9;2008:30;2318:219;2466:14;;;;;2444:49;2466:24;;2444:49;5125:16:54;2444:86:71;;2318:219::o;-1:-1:-1:-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:161:161:-;83:20;;143:6;132:18;;122:29;;112:2;;165:1;162;155:12;180:447;;;;324:2;312:9;303:7;299:23;295:32;292:2;;;345:6;337;330:22;292:2;376:23;;-1:-1:-1;;;;;428:31:161;;418:42;;408:2;;479:6;471;464:22;408:2;507:5;-1:-1:-1;531:39:161;566:2;551:18;;531:39;:::i;:::-;521:49;;617:2;606:9;602:18;589:32;579:42;;282:345;;;;;:::o;632:196::-;;743:2;731:9;722:7;718:23;714:32;711:2;;;764:6;756;749:22;711:2;792:30;812:9;792:30;:::i;833:255::-;;;973:2;961:9;952:7;948:23;944:32;941:2;;;994:6;986;979:22;941:2;-1:-1:-1;;1022:16:161;;1078:2;1063:18;;;1057:25;1022:16;;1057:25;;-1:-1:-1;931:157:161:o;1093:443::-;;1190:5;1184:12;1217:6;1212:3;1205:19;1243:4;1272:2;1267:3;1263:12;1256:19;;1309:2;1302:5;1298:14;1330:3;1342:169;1356:6;1353:1;1350:13;1342:169;;;1417:13;;1405:26;;1451:12;;;;1486:15;;;;1378:1;1371:9;1342:169;;;-1:-1:-1;1527:3:161;;1160:376;-1:-1:-1;;;;;1160:376:161:o;1541:445::-;-1:-1:-1;;;;;1826:15:161;;;1808:34;;1878:15;;;;1873:2;1858:18;;1851:43;1925:2;1910:18;;1903:34;1968:2;1953:18;;1946:34;;;;1757:3;1742:19;;1724:262::o;1991:375::-;-1:-1:-1;;;;;2249:15:161;;;2231:34;;2301:15;;;;2296:2;2281:18;;2274:43;2348:2;2333:18;;2326:34;;;;2181:2;2166:18;;2148:218::o;2371:272::-;-1:-1:-1;;;;;2561:32:161;;;;2543:51;;2625:2;2610:18;;2603:34;2531:2;2516:18;;2498:145::o;2648:477::-;;2905:2;2894:9;2887:21;2931:62;2989:2;2978:9;2974:18;2966:6;2931:62;:::i;:::-;3041:9;3033:6;3029:22;3024:2;3013:9;3009:18;3002:50;3069;3112:6;3104;3069:50;:::i;3130:183::-;3282:25;;;3270:2;3255:18;;3237:76::o;3318:341::-;3520:2;3502:21;;;3559:2;3539:18;;;3532:30;-1:-1:-1;;;3593:2:161;3578:18;;3571:47;3650:2;3635:18;;3492:167::o;3664:346::-;3866:2;3848:21;;;3905:2;3885:18;;;3878:30;-1:-1:-1;;;3939:2:161;3924:18;;3917:52;4001:2;3986:18;;3838:172::o;4015:343::-;4217:2;4199:21;;;4256:2;4236:18;;;4229:30;-1:-1:-1;;;4290:2:161;4275:18;;4268:49;4349:2;4334:18;;4189:169::o;4363:338::-;4565:2;4547:21;;;4604:2;4584:18;;;4577:30;-1:-1:-1;;;4638:2:161;4623:18;;4616:44;4692:2;4677:18;;4537:164::o;4706:345::-;4908:2;4890:21;;;4947:2;4927:18;;;4920:30;-1:-1:-1;;;4981:2:161;4966:18;;4959:51;5042:2;5027:18;;4880:171::o;5056:337::-;5258:2;5240:21;;;5297:2;5277:18;;;5270:30;-1:-1:-1;;;5331:2:161;5316:18;;5309:43;5384:2;5369:18;;5230:163::o;5398:344::-;5600:2;5582:21;;;5639:2;5619:18;;;5612:30;-1:-1:-1;;;5673:2:161;5658:18;;5651:50;5733:2;5718:18;;5572:170::o;5747:346::-;5949:2;5931:21;;;5988:2;5968:18;;;5961:30;-1:-1:-1;;;6022:2:161;6007:18;;6000:52;6084:2;6069:18;;5921:172::o;6098:339::-;6300:2;6282:21;;;6339:2;6319:18;;;6312:30;-1:-1:-1;;;6373:2:161;6358:18;;6351:45;6428:2;6413:18;;6272:165::o;6442:346::-;6644:2;6626:21;;;6683:2;6663:18;;;6656:30;-1:-1:-1;;;6717:2:161;6702:18;;6695:52;6779:2;6764:18;;6616:172::o;6793:338::-;6995:2;6977:21;;;7034:2;7014:18;;;7007:30;-1:-1:-1;;;7068:2:161;7053:18;;7046:44;7122:2;7107:18;;6967:164::o;7136:351::-;7338:2;7320:21;;;7377:2;7357:18;;;7350:30;7416:29;7411:2;7396:18;;7389:57;7478:2;7463:18;;7310:177::o;7492:341::-;7694:2;7676:21;;;7733:2;7713:18;;;7706:30;-1:-1:-1;;;7767:2:161;7752:18;;7745:47;7824:2;7809:18;;7666:167::o;7838:341::-;8040:2;8022:21;;;8079:2;8059:18;;;8052:30;-1:-1:-1;;;8113:2:161;8098:18;;8091:47;8170:2;8155:18;;8012:167::o;8184:344::-;8386:2;8368:21;;;8425:2;8405:18;;;8398:30;-1:-1:-1;;;8459:2:161;8444:18;;8437:50;8519:2;8504:18;;8358:170::o;8533:257::-;8733:6;8721:19;;;;8703:38;;8772:2;8757:18;;8750:34;8691:2;8676:18;;8658:132::o;8795:248::-;8969:25;;;9025:2;9010:18;;9003:34;8957:2;8942:18;;8924:119::o;9048:319::-;9250:25;;;9306:2;9291:18;;9284:34;;;;9349:2;9334:18;;9327:34;9238:2;9223:18;;9205:162::o", "language": "Solidity", "natspec": {"kind": "dev", "methods": {"nTokenMint(address,uint16,int256)": {"notice": "Converts the given amount of cash to nTokens in the same currency.", "params": {"currencyId": "the currency associated the nToken", "primeCashToDeposit": "the amount of asset tokens to deposit denominated in internal decimals"}, "returns": {"_0": "nTokens minted by this action"}}}, "version": 1}, "offset": [1376, 21404], "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB6DD58E EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xD3158DFA EQ PUSH2 0x67 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65 PUSH2 0x60 CALLDATASIZE PUSH1 0x4 PUSH2 0x54EE JUMP JUMPDEST PUSH2 0x9D JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x87 PUSH2 0x82 CALLDATASIZE PUSH1 0x4 PUSH2 0x54A6 JUMP JUMPDEST PUSH2 0x1C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x94 SWAP2 SWAP1 PUSH2 0x55F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA5 PUSH2 0x52B9 JUMP JUMPDEST PUSH2 0xAF DUP2 DUP4 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD MLOAD MLOAD PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCA TIMESTAMP PUSH2 0x1F8 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x80 ADD MLOAD LT ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0xFB SWAP2 SWAP1 PUSH1 0x2 BYTE PUSH2 0xE10 MUL PUSH2 0x21B JUMP JUMPDEST SWAP1 POP DUP1 TIMESTAMP GT PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x147 SWAP1 DUP6 SWAP1 DUP4 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x12D PUSH2 0x5302 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x125 JUMPI SWAP1 POP JUMPDEST POP TIMESTAMP PUSH2 0x236 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x162 DUP3 DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x371 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD DUP7 MLOAD MLOAD SWAP2 SWAP3 POP PUSH2 0x177 SWAP2 DUP5 PUSH2 0x38D JUMP JUMPDEST PUSH2 0x186 DUP6 PUSH1 0xC0 ADD MLOAD DUP8 DUP4 PUSH2 0x39D JUMP JUMPDEST POP PUSH32 0x120B36BD1B47AE64F0F3EA6EB0FBFBA209B2C780A31864E382D9957377A9F946 DUP7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP3 SWAP2 SWAP1 PUSH2 0x5899 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D5 DUP5 DUP5 DUP5 PUSH2 0x39D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E9 DUP3 DUP3 PUSH2 0x464 JUMP JUMPDEST PUSH2 0x1F2 DUP2 PUSH2 0x500 JUMP JUMPDEST SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD DUP3 SUB SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x253 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x51F JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 BYTE PUSH3 0xF4240 MUL SWAP1 PUSH1 0x0 SWAP1 ISZERO PUSH2 0x280 JUMPI PUSH2 0x27B DUP6 PUSH3 0x76A700 PUSH2 0x554 JUMP JUMPDEST PUSH2 0x282 JUMP JUMPDEST DUP5 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28F DUP5 PUSH2 0x569 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 PUSH2 0x2A8 DUP10 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x58E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BF DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP11 PUSH2 0x649 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x335 JUMPI PUSH1 0xC0 DUP11 ADD MLOAD DUP11 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x2DF SWAP2 PUSH2 0xFFFF AND DUP6 PUSH2 0x6EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x333 JUMPI DUP11 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2FA SWAP1 DUP6 DUP9 PUSH2 0x733 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT ISZERO PUSH2 0x30C JUMPI POP PUSH1 0x0 PUSH2 0x319 JUMP JUMPDEST PUSH2 0x316 DUP2 DUP9 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x32F PUSH2 0x328 DUP4 DUP7 DUP14 DUP6 PUSH2 0x815 JUMP JUMPDEST DUP11 SWAP1 PUSH2 0x887 JUMP JUMPDEST SWAP9 POP POP JUMPDEST POP JUMPDEST PUSH2 0x341 DUP7 DUP5 PUSH1 0x0 PUSH2 0x89D JUMP JUMPDEST SWAP6 POP PUSH2 0x34C DUP7 PUSH2 0x569 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x292 JUMP JUMPDEST DUP8 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x365 SWAP1 DUP7 PUSH2 0x8E8 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D DUP4 DUP4 PUSH2 0x887 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x398 DUP4 DUP4 DUP4 PUSH2 0x92E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x3A8 PUSH2 0x52B9 JUMP JUMPDEST PUSH2 0x3B2 DUP2 DUP7 PUSH2 0x1DF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BF DUP3 DUP7 DUP6 PUSH2 0x9A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x3EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x56FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD MLOAD MLOAD PUSH2 0x421 JUMPI PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x405 SWAP1 DUP7 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x41C SWAP2 DUP9 SWAP1 PUSH2 0x38D JUMP JUMPDEST PUSH2 0x42C JUMP JUMPDEST PUSH2 0x42C DUP3 DUP7 DUP6 PUSH2 0xACB JUMP JUMPDEST DUP2 PUSH1 0xC0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x45A JUMPI PUSH2 0x45A DUP8 DUP4 PUSH1 0xC0 ADD MLOAD DUP9 DUP9 DUP6 PUSH2 0xC19 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x471 DUP2 PUSH2 0xFFFF AND PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x491 SWAP1 PUSH2 0xD47 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x0 PUSH2 0x4A8 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0xDB3 JUMP JUMPDEST POP POP PUSH1 0x80 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT DUP4 AND PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x4DC SWAP1 DUP5 PUSH1 0x0 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0x4F0 SWAP1 DUP7 PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP7 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x508 PUSH2 0x534A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x513 DUP4 PUSH2 0xEF8 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D8 DUP4 DUP3 PUSH2 0xF0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x52A PUSH2 0xF4D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x578 JUMPI POP PUSH1 0x0 PUSH2 0x216 JUMP JUMPDEST PUSH2 0x581 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH1 0xFF SUB PUSH1 0x1 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP3 GT ISZERO PUSH2 0x5A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5B4 DUP5 PUSH2 0xFF3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x5A DUP5 GT PUSH2 0x5CF JUMPI POP PUSH3 0x15180 DUP4 MUL ADD SWAP1 POP PUSH2 0x230 JUMP JUMPDEST PUSH1 0x87 DUP5 GT PUSH2 0x5F7 JUMPI POP PUSH1 0x59 NOT DUP4 ADD PUSH3 0x7E900 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH3 0x76A700 ADD SWAP1 POP PUSH2 0x230 JUMP JUMPDEST PUSH1 0xC3 DUP5 GT PUSH2 0x620 JUMPI POP PUSH1 0x86 NOT DUP4 ADD PUSH3 0x278D00 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0x1DA9C00 ADD SWAP1 POP PUSH2 0x230 JUMP JUMPDEST POP PUSH1 0xC2 NOT DUP4 ADD PUSH3 0x76A700 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0xB1FA800 ADD SWAP1 POP PUSH2 0x230 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x66A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x56A9 JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x68B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x5786 JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x69E JUMPI POP PUSH1 0x0 PUSH2 0x1D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A9 DUP4 PUSH2 0x1F8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x6E2 JUMPI PUSH2 0x6C8 PUSH2 0x6C1 DUP3 PUSH2 0x100F JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x21B JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x6DA JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x1D8 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x6AE JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6F9 PUSH2 0x10B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x747 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x10C0 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x756 DUP8 PUSH2 0x114F JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x776 JUMPI DUP7 MLOAD PUSH2 0x76F SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x1163 JUMP JUMPDEST SWAP4 POP PUSH2 0x80B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x781 DUP7 PUSH2 0x1F8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x791 PUSH2 0x6C1 DUP7 PUSH2 0x100F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7A9 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x1163 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x7C7 JUMPI POP POP PUSH1 0x40 DUP1 DUP12 ADD MLOAD ADD MLOAD DUP9 PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x7DD PUSH2 0x7D6 PUSH1 0x1 DUP11 SUB PUSH2 0x100F JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x21B JUMP JUMPDEST SWAP1 POP PUSH2 0x7F3 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP3 DUP9 DUP14 PUSH2 0x1163 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x803 DUP2 DUP6 DUP5 DUP7 DUP16 PUSH2 0x1202 JUMP JUMPDEST SWAP9 POP POP POP POP POP POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x824 JUMPI POP PUSH1 0x0 PUSH2 0x87F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x830 DUP6 DUP6 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x83E DUP3 DUP6 PUSH2 0x1275 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SGT ISZERO PUSH2 0x851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x85D DUP9 DUP4 PUSH2 0x12E2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 SLT PUSH2 0x86D JUMPI DUP1 PUSH2 0x879 JUMP JUMPDEST PUSH2 0x879 DUP2 PUSH1 0x0 NOT PUSH2 0x12FB JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0x8B2 JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0x8BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x8D4 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0x1D8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND PUSH2 0x1D8 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x912 SWAP1 PUSH2 0x90C DUP6 PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x1311 JUMP JUMPDEST SWAP1 PUSH2 0x135F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 SLT PUSH2 0x922 JUMPI DUP1 PUSH2 0x87F JUMP JUMPDEST PUSH2 0x87F DUP2 PUSH1 0x0 NOT PUSH2 0x12FB JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x946 PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x977 DUP4 PUSH2 0x139D JUMP JUMPDEST DUP2 SLOAD PUSH1 0xA SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x9B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH2 0x9BE JUMPI POP PUSH1 0x0 PUSH2 0x1D8 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD ISZERO PUSH2 0x9F6 JUMPI PUSH1 0x0 PUSH2 0x9D3 DUP6 PUSH2 0x13D3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT PUSH2 0x9F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x5654 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0xA06 JUMPI POP DUP2 PUSH2 0x1D8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA13 DUP7 DUP6 PUSH2 0x1404 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xA25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0xA33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0x5 BYTE PUSH3 0x7A120 MUL PUSH1 0x0 PUSH2 0xA5E DUP5 PUSH2 0xA58 PUSH2 0xA53 DUP3 DUP8 PUSH2 0x887 JUMP JUMPDEST PUSH2 0x146D JUMP JUMPDEST SWAP1 PUSH2 0x148E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SGT ISZERO PUSH2 0xA80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x586B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA8C DUP6 DUP6 PUSH2 0x14A7 JUMP JUMPDEST SWAP1 POP PUSH2 0xAA9 DUP2 PUSH2 0x90C DUP12 PUSH1 0x40 ADD MLOAD DUP12 PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0x1D8 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0xAE8 SWAP2 PUSH2 0xFFFF AND SWAP1 PUSH2 0x14B6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0xAF6 PUSH2 0x5302 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x20 ADD MLOAD JUMPDEST DUP1 ISZERO PUSH2 0xBC1 JUMPI DUP8 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xB16 SWAP1 DUP5 DUP5 PUSH1 0x1 DUP12 PUSH2 0x14EB JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xB25 JUMPI POP PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP6 PUSH2 0xB5C PUSH4 0x5F5E100 PUSH2 0x90C DUP12 PUSH1 0x1 DUP10 SUB DUP2 MLOAD DUP2 LT PUSH2 0xB45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP15 PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP PUSH2 0xB88 DUP11 DUP6 DUP4 DUP10 PUSH1 0x1 DUP9 SUB DUP2 MLOAD DUP2 LT PUSH2 0xB79 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP14 PUSH2 0x1558 JUMP JUMPDEST SWAP6 POP SWAP2 POP DUP2 ISZERO PUSH2 0xBB5 JUMPI PUSH2 0xBB3 DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP14 PUSH1 0x80 ADD MLOAD DUP7 PUSH2 0x15CD JUMP JUMPDEST POP JUMPDEST POP POP JUMPDEST PUSH1 0x0 NOT ADD PUSH2 0xAFD JUMP JUMPDEST POP PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0xBD5 SWAP2 PUSH2 0x1729 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x572D JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0xC10 JUMPI DUP7 MLOAD MLOAD PUSH2 0xC10 SWAP1 DUP4 PUSH2 0x1969 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH2 0x19A0 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SGT DUP1 ISZERO PUSH2 0xC51 JUMPI POP PUSH1 0x0 DUP4 SGT JUMPDEST ISZERO PUSH2 0xD19 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23DE6651 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x23DE6651 SWAP1 PUSH2 0xC86 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x558E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP3 POP PUSH4 0xAD1C095D SWAP2 POP PUSH2 0xCE6 SWAP1 DUP10 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x55B2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD2C PUSH2 0x19AD JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xD58 PUSH2 0x19BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH7 0x1000000000000 DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD0 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xDC1 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 POP JUMP JUMPDEST PUSH2 0xE1C PUSH2 0x5376 JUMP JUMPDEST PUSH2 0xE24 PUSH2 0x5376 JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0xE33 JUMPI SWAP1 POP PUSH2 0x1D8 JUMP JUMPDEST PUSH2 0xE3D DUP6 DUP6 PUSH2 0x19D4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE99 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xE86 PUSH2 0x539E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xE7E JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB2 PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP5 POP SWAP2 SWAP3 POP DUP4 SLT ISZERO PUSH2 0x641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF00 PUSH2 0x53E2 JUMP JUMPDEST PUSH2 0x230 DUP3 TIMESTAMP PUSH2 0x19E8 JUMP JUMPDEST PUSH2 0xF12 PUSH2 0x534A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF21 DUP5 PUSH2 0xFFFF AND PUSH2 0x1AAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0xB PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xF66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0xF79 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0xF8C JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0xFA0 JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0xFB2 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0xFC3 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0xFD3 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0xFE3 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x216 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x210 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x1024 JUMPI POP PUSH3 0x76A700 PUSH2 0x216 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x1037 JUMPI POP PUSH3 0xED4E00 PUSH2 0x216 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x104B JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x216 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x105F JUMPI POP PUSH4 0x3B53800 PUSH2 0x216 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0x1073 JUMPI POP PUSH4 0x9450C00 PUSH2 0x216 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0x1087 JUMPI POP PUSH4 0x128A1800 PUSH2 0x216 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0x109B JUMPI POP PUSH4 0x25143000 PUSH2 0x216 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x56D8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0xC PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x10DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10E9 DUP5 PUSH2 0x1F8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x1141 JUMPI PUSH1 0x0 PUSH2 0x110A PUSH2 0x1103 DUP4 PUSH2 0x100F JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x21B JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x1122 JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x1147 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x1138 JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x1147 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x10EE JUMP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x116E PUSH2 0x1ADD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x117F DUP6 PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x11E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x5624 JUMP JUMPDEST PUSH2 0x11F3 DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x1AEA JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x1210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x121C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x124E JUMPI PUSH2 0x1247 DUP5 PUSH2 0x1241 DUP9 DUP9 SUB PUSH2 0x123B DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x1B72 JUMP JUMPDEST SWAP1 PUSH2 0x1B99 JUMP JUMPDEST SWAP1 PUSH2 0x21B JUMP JUMPDEST SWAP1 POP PUSH2 0x126C JUMP JUMPDEST PUSH2 0x1247 PUSH2 0x1265 DUP8 DUP8 SUB PUSH2 0x123B DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x1B72 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x554 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1292 PUSH2 0x128D PUSH4 0x1DA9C00 PUSH2 0x123B DUP7 DUP9 PUSH2 0x1B72 JUMP JUMPDEST PUSH2 0x1BB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x12A4 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH2 0x12B7 PUSH2 0x12B2 DUP3 PUSH2 0x1C29 JUMP JUMPDEST PUSH2 0x1C4B JUMP JUMPDEST SWAP1 POP PUSH2 0x12C9 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1CA0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12D6 DUP3 PUSH2 0x1CD6 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x12F1 DUP5 DUP5 PUSH2 0x1311 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x135F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLT PUSH2 0x130A JUMPI DUP2 PUSH2 0x22D JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1341 JUMPI DUP2 ISZERO DUP1 PUSH2 0x1333 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1330 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x133C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x230 JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x1356 JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x1353 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x1375 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x137F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1388 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x6 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 PUSH11 0x7FFFFFFFFFFFFFFFFFFFFF NOT DUP3 SLT DUP1 ISZERO SWAP1 PUSH2 0x13C6 JUMPI POP PUSH11 0x7FFFFFFFFFFFFFFFFFFFFF DUP3 SGT ISZERO JUMPDEST PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x13EA JUMPI POP PUSH1 0x0 PUSH2 0x216 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH3 0x76A700 SWAP1 PUSH2 0x13FD SWAP1 PUSH2 0x1F8 JUMP JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1415 DUP6 DUP6 PUSH1 0x1 PUSH2 0x1CDF JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH2 0x1426 DUP7 DUP7 PUSH1 0x0 PUSH2 0x1CDF JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH2 0x1435 DUP8 DUP8 PUSH2 0x1E43 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x144B SWAP1 PUSH2 0xB5C DUP6 DUP5 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x1461 SWAP1 PUSH2 0xB5C DUP5 DUP5 PUSH2 0xAB5 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x1487 JUMPI PUSH2 0x1480 DUP3 PUSH2 0x1EC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x216 JUMP JUMPDEST POP DUP1 PUSH2 0x216 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x14A1 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1311 JUMP JUMPDEST DUP4 PUSH2 0x135F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SGT PUSH2 0x130A JUMPI DUP2 PUSH2 0x22D JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x14C3 PUSH2 0x1ED6 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x14DE DUP2 DUP7 PUSH2 0x1EE3 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x1500 JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0x151C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x57B6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1533 PUSH2 0x152A DUP6 PUSH2 0x100F JUMP JUMPDEST PUSH2 0x1241 DUP5 PUSH2 0x1F8 JUMP JUMPDEST SWAP1 POP PUSH2 0xD19 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP3 DUP5 DUP7 PUSH2 0x154D DUP12 PUSH2 0x114F JUMP JUMPDEST DUP11 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2029 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x0 SWAP1 DUP6 SWAP1 PUSH2 0x156A SWAP1 DUP9 DUP8 PUSH2 0x204A JUMP JUMPDEST ISZERO PUSH2 0x15A2 JUMPI PUSH2 0x1585 DUP9 PUSH1 0x0 ADD MLOAD DUP9 DUP9 DUP7 DUP9 DUP14 PUSH1 0xC0 ADD MLOAD PUSH2 0x20A8 JUMP JUMPDEST DUP10 MLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP PUSH2 0x1598 SWAP1 DUP9 DUP8 PUSH2 0x204A JUMP JUMPDEST ISZERO PUSH2 0x15A2 JUMPI PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0x15BB PUSH2 0x15B4 DUP10 DUP10 PUSH1 0x1 DUP9 SUB DUP6 PUSH2 0x21EF JUMP JUMPDEST DUP4 SWAP1 PUSH2 0xAB5 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x15DE DUP8 DUP8 PUSH2 0xFFFF AND PUSH2 0x51F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15EA PUSH2 0x10B3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x1625 DUP9 DUP11 PUSH2 0x229F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x163D DUP6 DUP4 PUSH2 0x23A7 JUMP JUMPDEST ISZERO PUSH2 0x16C0 JUMPI DUP3 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x0 PUSH2 0x1657 DUP10 DUP4 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x1662 DUP2 PUSH2 0x23D7 JUMP JUMPDEST DUP6 SLOAD PUSH1 0xF SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP2 AND OR DUP6 SSTORE PUSH2 0x168F DUP14 DUP14 DUP14 DUP6 DUP6 PUSH2 0x2400 JUMP JUMPDEST DUP1 PUSH2 0x16A3 JUMPI PUSH2 0x16A0 DUP8 DUP6 PUSH1 0x0 PUSH2 0x89D JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH2 0x16B2 DUP14 DUP14 PUSH2 0xFFFF AND DUP10 PUSH2 0x24D9 JUMP JUMPDEST SWAP7 POP PUSH2 0x126C SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x171A JUMPI PUSH2 0x16CF DUP8 PUSH2 0x23D7 JUMP JUMPDEST DUP4 SLOAD PUSH1 0xF SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP2 AND OR DUP4 SSTORE PUSH2 0x16FD DUP12 DUP12 DUP12 PUSH1 0x0 DUP12 PUSH2 0x2400 JUMP JUMPDEST PUSH2 0x1709 DUP6 DUP4 PUSH1 0x1 PUSH2 0x89D JUMP JUMPDEST SWAP5 POP PUSH2 0x171A DUP12 DUP12 PUSH2 0xFFFF AND DUP8 PUSH2 0x24D9 JUMP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x17BA JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x174F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1765 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1775 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1792 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x17A2 JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x17B1 JUMPI PUSH2 0x17B1 DUP12 DUP4 PUSH2 0x2533 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1733 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x185D JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17F1 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1801 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1815 JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0x1854 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1827 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1840 JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0x183D DUP4 DUP3 PUSH2 0x2683 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0x184C DUP2 DUP7 DUP7 DUP7 PUSH2 0x27BA JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17BE JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0x186D PUSH2 0x2828 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1937 JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x18A8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x18C5 JUMPI POP PUSH2 0x192F JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x18D7 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x18F5 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x18F2 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x18FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x190A DUP2 DUP10 DUP10 DUP10 PUSH2 0x27BA JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0x1927 DUP2 DUP5 DUP8 PUSH1 0x8 DUP2 LT PUSH2 0x1921 JUMPI INVALID JUMPDEST ADD PUSH2 0x2683 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1889 JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO PUSH2 0x1958 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1977 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1985 PUSH2 0xFEE DUP5 PUSH2 0xEA7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1991 DUP2 DUP4 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x398 PUSH2 0xFEE DUP5 DUP4 PUSH2 0x92E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x21 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x3 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x2 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x11 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19E0 DUP4 DUP4 PUSH2 0x2835 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19F0 PUSH2 0x53E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FB DUP5 PUSH2 0x2856 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD MLOAD LT ISZERO PUSH2 0x1A3A JUMPI PUSH1 0x0 DUP1 PUSH2 0x1A15 DUP7 PUSH2 0x2920 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A23 DUP7 DUP5 DUP4 DUP9 PUSH2 0x299D JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH2 0x1A33 DUP7 DUP4 DUP6 PUSH2 0x2A41 JUMP JUMPDEST POP POP PUSH2 0x1A47 JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x1A47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1A75 PUSH2 0x1A70 DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD PUSH2 0x1B72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2C77 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A98 PUSH2 0x1A70 DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x1B72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x60 ADD MLOAD DUP2 MSTORE POP SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AB9 PUSH2 0x2C8D JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x26 DUP2 GT ISZERO PUSH2 0x13FD JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0xA PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x1AF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x1B07 JUMPI POP DUP4 PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B13 DUP4 DUP9 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x1B26 JUMPI DUP6 SWAP2 POP POP PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B32 DUP3 DUP7 PUSH2 0x2C9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B44 PUSH4 0x3B9ACA00 DUP4 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B65 PUSH4 0x3B9ACA00 PUSH2 0x123B PUSH2 0x1B5B DUP11 DUP6 PUSH2 0x1B72 JUMP JUMPDEST PUSH2 0x1241 DUP13 DUP8 PUSH2 0x1B72 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B81 JUMPI POP PUSH1 0x0 PUSH2 0x230 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1B8E JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1BA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1BB0 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x1BE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x1BFE JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1C20 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT EQ ISZERO PUSH2 0x1C44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x1C60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x1C7D JUMPI POP PUSH1 0x0 PUSH2 0x216 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x2CB3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1C20 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD MLOAD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D2D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1D38 PUSH2 0x5302 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E38 JUMPI DUP8 MLOAD PUSH2 0x1D56 SWAP1 DUP4 PUSH1 0x1 DUP1 DUP6 ADD SWAP1 DUP12 PUSH2 0x14EB JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D6C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1D83 DUP4 DUP7 PUSH2 0x3768 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1DB0 PUSH2 0x1DA9 DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x6EE JUMP JUMPDEST DUP3 SWAP1 PUSH2 0xAB5 JUMP JUMPDEST DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1DBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x1E1A PUSH2 0x1E13 PUSH2 0x1E07 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1DDF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP16 DUP16 PUSH2 0x1DFC JUMPI DUP12 PUSH1 0xA0 ADD MLOAD PUSH2 0x1E02 JUMP JUMPDEST DUP12 PUSH1 0xC0 ADD MLOAD JUMPDEST PUSH2 0x815 JUMP JUMPDEST DUP15 MLOAD PUSH1 0x40 ADD MLOAD SWAP1 PUSH2 0x8E8 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E26 DUP10 DUP3 PUSH2 0xAB5 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x1D3B SWAP2 POP POP JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E6F DUP5 PUSH1 0xC0 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP7 PUSH1 0x80 ADD MLOAD DUP7 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x37DA JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1EBE JUMPI PUSH1 0x0 PUSH2 0x1EA1 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP8 PUSH1 0x80 ADD MLOAD DUP8 DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP9 PUSH2 0x3886 JUMP JUMPDEST POP DUP6 MLOAD PUSH1 0x40 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1EB5 SWAP1 DUP3 PUSH2 0x8E8 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x230 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x230 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230 PUSH1 0x0 NOT DUP4 PUSH2 0x1311 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x4 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F2A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F70 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x201A JUMPI DUP8 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x1F8A JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1FB8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP8 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x1FD5 JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2003 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x1F76 JUMP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x2038 DUP6 PUSH2 0x1F8 JUMP JUMPDEST ADD SWAP1 POP PUSH2 0xC10 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x3904 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2068 DUP5 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x393B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x208B PUSH2 0x2084 DUP3 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0xAB5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1311 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x209E SWAP1 PUSH4 0x3B9ACA00 PUSH2 0x1311 JUMP JUMPDEST SGT SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x20C4 DUP7 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x554 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2710 PUSH4 0x3B9ACA00 SDIV PUSH2 0x12C MUL DUP11 PUSH1 0xA0 ADD MLOAD LT ISZERO PUSH2 0x20EC JUMPI POP PUSH4 0x3B9ACA00 PUSH2 0x210C JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD PUSH2 0x2109 SWAP1 PUSH2 0x2103 SWAP1 PUSH4 0x1C9C380 PUSH2 0x554 JUMP JUMPDEST DUP5 PUSH2 0x3968 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x40 DUP12 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x211E SWAP1 DUP12 PUSH2 0x393B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x212C DUP3 DUP5 PUSH2 0x12E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x213B DUP14 DUP14 DUP12 DUP9 DUP7 PUSH2 0x39CE JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x0 SLT PUSH2 0x215D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x55F9 JUMP JUMPDEST DUP4 DUP2 SGT ISZERO PUSH2 0x217D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x55F9 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 POP PUSH2 0x2192 SWAP1 POP DUP11 DUP8 DUP14 DUP6 DUP8 DUP13 PUSH2 0x3A17 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SLT PUSH2 0x21A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x21AE DUP11 DUP4 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SGT ISZERO DUP1 ISZERO PUSH2 0x21C2 JUMPI POP PUSH2 0x1F4 DUP2 SLT JUMPDEST PUSH2 0x21DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x55F9 JUMP JUMPDEST SWAP12 SWAP2 SWAP11 POP SWAP1 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2206 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD EQ DUP1 ISZERO PUSH2 0x222D JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP6 ADD EQ JUMPDEST DUP1 ISZERO PUSH2 0x2248 JUMPI POP PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2246 JUMPI INVALID JUMPDEST EQ JUMPDEST PUSH2 0x2264 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x57DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2271 DUP8 DUP7 PUSH2 0x3A96 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x2285 SWAP1 DUP4 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 DUP5 ADD DUP2 SWAP1 MSTORE POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x22AD DUP6 PUSH2 0xFF3 JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0x22C7 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x2022 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x22DB JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x2022 JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0x22F8 JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x2022 SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0x2337 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0x2327 JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x2022 JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0x2367 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0x2327 JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0x2397 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0x2327 JUMPI INVALID JUMPDEST POP PUSH2 0x100 SWAP6 PUSH1 0x0 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x23BC JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0x23C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP3 SLT DUP1 ISZERO SWAP1 PUSH2 0x13C6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP3 SGT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x240C DUP4 DUP4 PUSH2 0x3B6B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2419 JUMPI POP PUSH2 0x24D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2423 PUSH2 0x3BF9 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP2 AND DUP2 SUB SWAP1 PUSH2 0x245B DUP3 DUP6 PUSH2 0x887 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x246B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2484 PUSH2 0x247F PUSH2 0x247A DUP4 PUSH2 0x1EC8 JUMP JUMPDEST PUSH2 0x3C06 JUMP JUMPDEST PUSH2 0x3C15 JUMP JUMPDEST PUSH2 0xFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x24CD DUP10 DUP10 DUP10 DUP8 PUSH2 0x3C2B JUMP JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x14 PUSH2 0x24E4 DUP3 PUSH2 0x3CB5 JUMP JUMPDEST GT ISZERO PUSH2 0x2502 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x575D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x250C PUSH2 0xF4D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x2541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x2552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2564 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x257B JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x258B JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x25A9 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x25A6 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x25B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x260C JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2609 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x261C JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x25C3 JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x263E JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x267F JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2650 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0xFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x26A0 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF PUSH2 0xFFFF SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0x26A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x26C6 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x26CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x26E8 JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x26F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH11 0x7FFFFFFFFFFFFFFFFFFFFF NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x2720 JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH11 0x7FFFFFFFFFFFFFFFFFFFFF SLT ISZERO JUMPDEST PUSH2 0x2729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x27C9 DUP9 PUSH2 0x3D85 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x27D7 JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x27E0 JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x27F0 JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x2801 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR SWAP3 SWAP1 SWAP3 OR SWAP4 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0xD PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x2842 DUP5 DUP5 PUSH2 0x3DEC JUMP JUMPDEST SWAP2 POP PUSH2 0x284D DUP3 PUSH2 0x3F0E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x285E PUSH2 0x5403 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2868 PUSH2 0x40CF JUMP JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP7 MSTORE PUSH6 0x10000000000 DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP1 DUP2 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP5 AND SWAP3 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL DUP3 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP2 DIV SWAP1 SWAP2 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xF0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x12C MUL SWAP1 SWAP3 AND PUSH2 0x100 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x292C DUP4 PUSH2 0x40DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xEF81F216 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2979 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x87F SWAP2 SWAP1 PUSH2 0x5508 JUMP JUMPDEST PUSH2 0x29A5 PUSH2 0x5403 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x29B5 DUP9 DUP7 DUP10 PUSH2 0x410C JUMP JUMPDEST PUSH1 0xC0 DUP12 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 DUP11 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP10 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x29D9 SWAP1 DUP4 PUSH2 0x21B JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x2A07 JUMPI PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x2A04 SWAP1 PUSH2 0x29FE DUP10 DUP3 PUSH2 0x554 JUMP JUMPDEST SWAP1 PUSH2 0x4217 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2A27 PUSH2 0x2A1C PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x21B JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD SWAP1 PUSH2 0x422E JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MSTORE POP POP PUSH1 0x80 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP POP DUP3 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A4B PUSH2 0x40CF JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x2A6F DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x424B JUMP JUMPDEST DUP2 SLOAD PUSH5 0xFFFFFFFFFF NOT AND PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2A94 SWAP1 PUSH2 0x3C15 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2AC7 SWAP1 PUSH2 0x3C15 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD PUSH1 0xA PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x2AFC DUP3 PUSH1 0xE0 ADD MLOAD PUSH2 0x3C15 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x2B31 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x425F JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH6 0x10000000000 MUL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2B6D SWAP1 PUSH2 0x425F JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2BA1 SWAP1 PUSH2 0x425F JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x80 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2BD9 SWAP1 PUSH2 0x4275 JUMP JUMPDEST DUP2 SLOAD PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xD8 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xD8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE DUP3 ISZERO PUSH2 0x2C25 JUMPI PUSH1 0x0 PUSH2 0x2C0A DUP5 PUSH2 0x2C77 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C16 DUP6 DUP3 PUSH2 0x1969 JUMP JUMPDEST PUSH2 0x2C23 PUSH2 0xFEE DUP7 DUP4 PUSH2 0x4288 JUMP JUMPDEST POP JUMPDEST DUP4 PUSH2 0xFFFF AND PUSH32 0xEF25641E225E493886510CA1AD6584FA7B442B9FEA820A29D1DE3CE27D270FD2 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0xC0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2C69 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x58BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x9 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x2CAD DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1B72 JUMP JUMPDEST DUP4 PUSH2 0x1B99 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x2CC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x2CE5 JUMPI POP PUSH1 0x0 PUSH2 0x216 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH8 0x8000000000000000 DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2D17 JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2D44 JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2D71 JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2D9E JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2DCB JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2DF8 JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2E25 JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2E4E JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2E7A JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2EA6 JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2ED2 JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2EFE JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2F2A JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2F56 JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2F82 JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x1000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2FAE JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x2FD9 JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3004 JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x302F JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x305A JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3085 JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x30B0 JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x30DB JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x10000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3106 JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3130 JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x315A JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3184 JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x31AE JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x31D8 JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3202 JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x322C JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3256 JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x327F JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32A8 JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32D1 JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x32FA JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3323 JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x334C JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3375 JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x339E JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33C6 JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x33EE JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3416 JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x343E JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3466 JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x348E JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34B6 JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x34DE JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3505 JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x352C JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3553 JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x357A JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35A1 JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35C8 JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x35EF JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3616 JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x363C JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3662 JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3688 JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36AE JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36D4 JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x36FA JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3720 JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3746 JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3778 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x4312 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3789 JUMPI POP PUSH1 0x0 DUP5 PUSH1 0x60 ADD MLOAD SLT ISZERO JUMPDEST PUSH2 0x3792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x37B5 DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x90C DUP7 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x284D DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x90C DUP7 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 GT PUSH2 0x37EC JUMPI POP PUSH1 0x0 PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F8 DUP8 DUP8 PUSH2 0x51F JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3806 JUMPI SWAP1 POP PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3811 DUP6 PUSH2 0x1F8 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 EQ ISZERO PUSH2 0x383B JUMPI POP PUSH21 0x400080000002002000000002000000200000000020 NOT AND SWAP1 POP PUSH2 0x126C JUMP JUMPDEST PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0x387B JUMPI PUSH1 0x0 PUSH2 0x3850 DUP3 PUSH2 0x100F JUMP JUMPDEST DUP4 ADD SWAP1 POP PUSH1 0x0 PUSH2 0x3860 DUP10 DUP4 PUSH2 0x229F JUMP JUMPDEST POP SWAP1 POP PUSH2 0x386F DUP6 DUP3 PUSH1 0x0 PUSH2 0x89D JUMP JUMPDEST SWAP5 POP POP POP PUSH1 0x1 ADD PUSH2 0x383E JUMP JUMPDEST POP DUP2 SWAP3 POP POP POP PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3894 DUP5 PUSH2 0x569 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x38F7 JUMPI PUSH1 0x0 PUSH2 0x38A9 DUP10 DUP4 PUSH2 0x58E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x38BB DUP13 DUP13 DUP5 DUP13 DUP13 DUP13 PUSH2 0x4328 JUMP JUMPDEST SWAP1 POP PUSH2 0x38C7 DUP6 DUP3 PUSH2 0xAB5 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x38D7 JUMPI PUSH1 0x1 SWAP4 POP JUMPDEST PUSH2 0x38E3 DUP7 DUP5 PUSH1 0x0 PUSH2 0x89D JUMP JUMPDEST SWAP6 POP PUSH2 0x38EE DUP7 PUSH2 0x569 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x3897 JUMP JUMPDEST POP SWAP8 POP SWAP8 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3911 DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x437B JUMP JUMPDEST PUSH2 0x392A DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x1AEA JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x912 PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x90C DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3980 PUSH2 0x128D PUSH4 0x1DA9C00 PUSH2 0x123B DUP8 DUP8 PUSH2 0x1B72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3994 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39A1 DUP3 PUSH2 0x1C4B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x39B5 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x1CA0 JUMP JUMPDEST SWAP1 POP PUSH2 0x39C0 DUP2 PUSH2 0x1CD6 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39DF DUP8 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x4435 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A0C DUP2 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x39F3 DUP7 PUSH2 0x1EC8 JUMP JUMPDEST PUSH1 0x60 DUP11 ADD MLOAD PUSH1 0x40 DUP13 ADD MLOAD PUSH2 0x3A06 SWAP2 PUSH2 0x393B JUMP JUMPDEST DUP9 PUSH2 0x444F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3A29 DUP10 DUP9 DUP9 DUP9 DUP9 PUSH2 0x4590 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP DUP3 ISZERO PUSH2 0x3A8A JUMPI PUSH1 0x0 PUSH2 0x3A42 DUP11 PUSH2 0x46D0 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A66 DUP2 DUP12 PUSH1 0x40 ADD MLOAD DUP13 PUSH1 0x60 ADD MLOAD DUP14 PUSH1 0xA0 ADD MLOAD DUP15 PUSH1 0xC0 ADD MLOAD DUP16 PUSH1 0xE0 ADD MLOAD PUSH2 0x46D4 JUMP JUMPDEST DUP8 MLOAD PUSH2 0x3A72 SWAP1 DUP4 PUSH2 0x1969 JUMP JUMPDEST PUSH2 0x3A88 DUP10 DUP10 PUSH1 0x0 ADD MLOAD DUP13 PUSH1 0x20 ADD MLOAD DUP11 DUP9 DUP8 PUSH2 0x47E8 JUMP JUMPDEST POP JUMPDEST POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD SGT PUSH2 0x3ABD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x5815 JUMP JUMPDEST DUP3 PUSH2 0x3ACD JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT PUSH2 0x3ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AF9 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x90C DUP6 DUP8 PUSH1 0x80 ADD MLOAD PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x3B1A DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x90C DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x1311 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x3B2C SWAP1 DUP4 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x3B40 SWAP1 DUP3 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x3B54 SWAP1 DUP5 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3B62 DUP5 PUSH2 0x48BF JUMP JUMPDEST PUSH2 0x284D DUP2 PUSH2 0x1EC8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 EQ DUP1 PUSH2 0x3B88 JUMPI POP PUSH1 0x0 DUP4 SLT ISZERO DUP1 ISZERO PUSH2 0x3B88 JUMPI POP PUSH1 0x0 DUP3 SLT ISZERO JUMPDEST ISZERO PUSH2 0x3B95 JUMPI POP PUSH1 0x0 PUSH2 0x230 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO DUP1 ISZERO PUSH2 0x3BA6 JUMPI POP DUP2 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x3BB2 JUMPI POP DUP2 PUSH2 0x230 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO DUP1 ISZERO PUSH2 0x3BC3 JUMPI POP DUP3 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x3BD8 JUMPI PUSH2 0x3BD1 DUP3 PUSH2 0x1EC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x230 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO DUP1 ISZERO PUSH2 0x3BEA JUMPI POP PUSH1 0x0 DUP3 SGT ISZERO JUMPDEST ISZERO PUSH2 0x40 JUMPI PUSH2 0x3BD1 DUP4 DUP4 PUSH2 0x887 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x20 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP3 GT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C39 DUP6 DUP6 DUP6 PUSH2 0x4917 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SLT ISZERO PUSH2 0x3C51 JUMPI DUP8 SWAP2 POP PUSH2 0x3C54 JUMP JUMPDEST POP DUP7 JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3CA3 SWAP3 SWAP2 SWAP1 PUSH2 0x55CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x3D9F JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x3DA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x3DBF JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x216 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DD1 PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x100F JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1D8 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1241 SWAP1 DUP5 PUSH2 0x554 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x3DFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3E09 PUSH2 0x2828 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E78 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3E65 PUSH2 0x539E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3E5D JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x3F04 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x8 DUP2 LT PUSH2 0x3E97 JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EA8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x3E7E JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3F2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3F54 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3FB1 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x3F91 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x49FC JUMP JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3F9D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3F5A JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x40C8 JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3FF7 JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3FD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x3FED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x40BF JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4008 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x401F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4036 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4049 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4066 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x407D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4094 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x40A7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x3FBF JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3FB5 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x1D PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40E7 PUSH2 0x4A25 JUMP JUMPDEST PUSH2 0xFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x411F DUP10 DUP9 PUSH2 0x4A32 JUMP JUMPDEST DUP10 MLOAD SWAP1 SWAP6 POP SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x4146 SWAP1 PUSH2 0x413B SWAP1 DUP12 SWAP1 PUSH2 0x554 JUMP JUMPDEST PUSH4 0x3B9ACA00 SWAP1 PUSH2 0x1B72 JUMP JUMPDEST SWAP1 POP PUSH2 0x4180 PUSH2 0x4175 PUSH4 0x1DA9C00 PUSH2 0x415D DUP6 DUP6 PUSH2 0x1B72 JUMP JUMPDEST DUP2 PUSH2 0x4164 JUMPI INVALID JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP2 SWAP1 DIV PUSH2 0x21B JUMP JUMPDEST PUSH1 0xE0 DUP11 ADD MLOAD SWAP1 PUSH2 0x422E JUMP JUMPDEST SWAP7 POP PUSH2 0x41A2 PUSH2 0x4197 PUSH4 0x1DA9C00 PUSH2 0x415D DUP8 DUP6 PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MLOAD SWAP1 PUSH2 0x422E JUMP JUMPDEST SWAP6 POP DUP2 DUP4 EQ ISZERO PUSH2 0x41B9 JUMPI POP PUSH1 0x0 SWAP4 POP PUSH2 0x420E SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41DB PUSH2 0x41D0 PUSH4 0x1DA9C00 PUSH2 0x415D DUP8 DUP7 PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0xE0 DUP12 ADD MLOAD SWAP1 PUSH2 0x422E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x41E9 DUP10 DUP4 PUSH2 0x554 JUMP JUMPDEST SWAP1 POP PUSH2 0x4206 DUP9 PUSH2 0x123B DUP4 DUP14 PUSH1 0x40 ADD MLOAD PUSH2 0x1B72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x2CAD DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1B72 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x423D DUP5 DUP5 PUSH2 0x1B72 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x1B99 JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB DUP3 GT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4292 PUSH2 0x19A0 JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP DUP2 SWAP1 PUSH4 0xAD1C095D SWAP1 PUSH2 0x42DA SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x55B2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4308 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x230 JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4336 DUP9 DUP9 DUP9 PUSH2 0x6EE JUMP JUMPDEST SWAP1 POP DUP5 DUP7 GT PUSH2 0x4346 JUMPI SWAP1 POP PUSH2 0x45A JUMP JUMPDEST DUP3 ISZERO PUSH2 0x4360 JUMPI PUSH2 0x4358 DUP5 DUP3 DUP9 DUP9 PUSH2 0x4ACD JUMP JUMPDEST SWAP2 POP POP PUSH2 0x45A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436D DUP6 DUP9 DUP9 PUSH2 0x733 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B65 DUP3 DUP9 DUP9 DUP5 PUSH2 0x815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4385 PUSH2 0x1ADD JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x4424 JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x4308 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x443D PUSH2 0x544F JUMP JUMPDEST PUSH2 0x22D DUP4 DUP4 PUSH2 0x444A PUSH2 0x4B3B JUMP JUMPDEST PUSH2 0x4B48 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x445B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 SGT ISZERO PUSH2 0x447B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x5840 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x449F DUP10 DUP10 DUP9 DUP9 PUSH1 0x0 DUP13 SGT PUSH2 0x4496 JUMPI PUSH1 0x1 PUSH2 0x449A JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH2 0x4B9F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 SLT ISZERO PUSH2 0x44CE JUMPI PUSH2 0x44B3 DUP8 PUSH2 0x1EC8 JUMP JUMPDEST SWAP3 POP PUSH2 0x44C7 PUSH2 0x44C2 DUP9 DUP4 PUSH2 0x12E2 JUMP JUMPDEST PUSH2 0x1EC8 JUMP JUMPDEST SWAP2 POP PUSH2 0x44FB JUMP JUMPDEST PUSH2 0x44DB PUSH2 0x44C2 DUP9 DUP4 PUSH2 0x12E2 JUMP JUMPDEST SWAP3 POP PUSH2 0x44F8 PUSH2 0x44C2 PUSH2 0x44F1 DUP12 PUSH1 0x80 ADD MLOAD DUP9 PUSH2 0x3968 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x12E2 JUMP JUMPDEST SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x450C DUP10 DUP10 DUP9 DUP7 DUP10 DUP13 PUSH2 0x4BD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0xFA DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x4577 JUMPI DUP4 DUP4 SUB DUP1 PUSH2 0x4532 JUMPI DUP4 SWAP6 POP POP POP POP POP POP PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4542 DUP13 DUP13 DUP12 DUP9 DUP13 DUP16 PUSH2 0x4BD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4567 PUSH2 0x4560 PUSH2 0x4556 DUP5 DUP9 PUSH2 0x887 JUMP JUMPDEST PUSH2 0x90C DUP6 DUP8 PUSH2 0x1311 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x887 JUMP JUMPDEST SWAP6 SWAP7 POP SWAP1 SWAP4 POP POP POP PUSH1 0x1 ADD PUSH2 0x4511 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E2 SWAP1 PUSH2 0x5681 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x45A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP9 PUSH1 0x40 ADD MLOAD SGT PUSH2 0x45BA JUMPI POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x46C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45CA DUP9 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x4435 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x45E9 DUP11 PUSH1 0x60 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x393B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x45FE DUP6 DUP15 DUP15 DUP8 DUP16 DUP16 PUSH2 0x4BFA JUMP JUMPDEST SWAP9 POP SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP3 PUSH2 0x4621 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP PUSH2 0x46C5 JUMP JUMPDEST PUSH1 0x40 DUP14 ADD MLOAD PUSH2 0x4630 SWAP1 DUP13 PUSH2 0x371 JUMP JUMPDEST PUSH1 0x40 DUP15 ADD MSTORE PUSH2 0x463F DUP5 DUP4 PUSH2 0xAB5 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 PUSH2 0x4653 PUSH1 0x0 DUP16 PUSH1 0x40 ADD MLOAD DUP8 PUSH2 0x4CCD JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 GT ISZERO PUSH2 0x4677 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP9 POP SWAP9 POP SWAP9 POP POP POP POP POP POP POP PUSH2 0x46C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4683 DUP8 DUP4 PUSH2 0x4D04 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x46A1 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP10 POP SWAP10 POP SWAP10 POP POP POP POP POP POP POP POP PUSH2 0x46C5 JUMP JUMPDEST PUSH1 0xA0 DUP16 ADD MSTORE POP PUSH1 0x40 DUP13 ADD MLOAD PUSH2 0x46BA SWAP1 DUP15 SWAP1 DUP6 DUP6 DUP6 PUSH2 0x4DB7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x46EC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x46F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x470D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x4716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x472A JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x4733 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x4747 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x4750 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x4761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47F2 PUSH2 0x19A0 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x481A PUSH2 0x19AD JUMP JUMPDEST PUSH2 0xFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x4844 DUP6 DUP6 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCCB2D5ED DUP11 DUP5 DUP5 PUSH2 0x4861 DUP10 PUSH2 0x3C06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4880 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5565 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x489A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x48AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x24CD DUP3 DUP11 DUP11 DUP11 DUP11 PUSH2 0x4E0C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48CA DUP3 PUSH2 0x46D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x4909 DUP3 DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH4 0xFFFFFFFF AND DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x46D4 JUMP JUMPDEST PUSH2 0x398 DUP3 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x4E89 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP3 SWAP2 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x494B DUP8 DUP8 PUSH2 0x4ED2 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x495B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x40 SHL DUP2 OR DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x497B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH2 0x49B4 DUP7 PUSH2 0x146D JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x49D6 DUP7 PUSH2 0x146D JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x49E3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP2 SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x1F PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x4A7F JUMPI PUSH2 0x4A7C PUSH2 0x4A63 DUP7 PUSH1 0xC0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x1B72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH2 0x4A76 SWAP2 PUSH2 0x1B72 JUMP JUMPDEST SWAP1 PUSH2 0x2C9A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x4A8A DUP8 PUSH2 0x4EF0 JUMP JUMPDEST SWAP1 POP PUSH2 0x4A96 DUP2 DUP4 PUSH2 0x4D04 JUMP JUMPDEST SWAP5 POP DUP2 ISZERO PUSH2 0x4AAD JUMPI PUSH2 0x4AAA DUP2 DUP7 PUSH1 0x1 PUSH2 0x4F23 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD ISZERO PUSH2 0x4AC4 JUMPI PUSH2 0x4AC1 DUP6 DUP4 PUSH2 0x4F9B JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4ADC JUMPI POP PUSH1 0x0 PUSH2 0x87F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 SGT PUSH2 0x4AF5 JUMPI PUSH2 0x4AF0 DUP7 DUP6 DUP6 PUSH2 0x4FB4 JUMP JUMPDEST PUSH2 0x4B00 JUMP JUMPDEST PUSH2 0x4B00 DUP7 DUP6 DUP6 PUSH2 0x4FF0 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SGT ISZERO PUSH2 0x4B13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4B1F DUP7 DUP4 PUSH2 0x12E2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 SLT PUSH2 0x4B2F JUMPI DUP1 PUSH2 0x3A0C JUMP JUMPDEST PUSH2 0x3A0C DUP2 PUSH1 0x0 NOT PUSH2 0x12FB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x230 PUSH1 0x1B PUSH2 0x1ACB JUMP JUMPDEST PUSH2 0x4B50 PUSH2 0x544F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B5B DUP5 PUSH2 0x5031 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP SWAP1 PUSH1 0x4 DUP7 LT PUSH2 0x4B81 JUMPI PUSH1 0x1 PUSH2 0x4B84 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x2 DUP2 LT PUSH2 0x4B91 JUMPI INVALID JUMPDEST ADD SLOAD SWAP1 POP PUSH2 0x45A DUP3 DUP3 PUSH2 0x506A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4BB6 DUP8 PUSH2 0x4BB1 DUP6 DUP10 DUP10 PUSH2 0x4CCD JUMP JUMPDEST PUSH2 0x4D04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4BC8 DUP9 DUP4 PUSH1 0x0 DUP8 SLT PUSH2 0x4F23 JUMP JUMPDEST SWAP1 POP PUSH2 0x365 DUP2 DUP7 PUSH2 0x3968 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4BE4 DUP9 DUP9 DUP9 DUP8 DUP10 PUSH2 0x4B9F JUMP JUMPDEST SWAP1 POP PUSH2 0x365 PUSH2 0x4BF3 DUP5 DUP4 PUSH2 0x12E2 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4C11 DUP8 DUP12 PUSH1 0x40 ADD MLOAD DUP11 PUSH2 0x4CCD JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 GT ISZERO PUSH2 0x4C33 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x4CC0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3F DUP13 DUP4 PUSH2 0x4D04 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4C5A PUSH2 0x44C2 PUSH2 0x4C53 DUP5 DUP12 PUSH2 0x3968 JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x148E JUMP JUMPDEST SWAP1 POP PUSH2 0x4C6A DUP14 DUP4 PUSH1 0x0 DUP13 SLT PUSH2 0x4F23 JUMP JUMPDEST SWAP4 POP PUSH2 0x4C7C PUSH2 0x44C2 PUSH2 0x4C53 DUP7 DUP12 PUSH2 0x3968 JUMP JUMPDEST SWAP7 POP DUP1 DUP8 SGT ISZERO PUSH2 0x4C8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4C97 DUP3 DUP10 PUSH2 0x887 JUMP JUMPDEST SWAP1 POP PUSH2 0x4CAA PUSH1 0x64 PUSH2 0x90C PUSH2 0x2084 DUP16 PUSH2 0x5189 JUMP JUMPDEST SWAP6 POP PUSH2 0x4CB9 PUSH2 0x44C2 DUP10 DUP9 PUSH2 0xAB5 JUMP JUMPDEST SWAP7 POP POP POP POP POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x4CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x4CEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D5 PUSH2 0x247A PUSH2 0x4CFA DUP5 DUP7 PUSH2 0xAB5 JUMP JUMPDEST PUSH2 0xA58 DUP7 DUP9 PUSH2 0x371 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x80 ADD MLOAD GT PUSH2 0x4D16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x3B9ACA00 DUP3 GT ISZERO PUSH2 0x4D27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP3 GT PUSH2 0x4D46 JUMPI DUP3 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x3BD1 SWAP2 SWAP1 PUSH2 0x123B SWAP1 DUP6 SWAP1 PUSH2 0x1B72 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD DUP3 GT PUSH2 0x4D7E JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x3BD1 SWAP4 SWAP3 PUSH2 0x1241 SWAP3 DUP2 SWAP1 SUB SWAP2 PUSH2 0x123B SWAP2 DUP9 SUB SWAP1 DUP6 SWAP1 SUB PUSH2 0x1B72 JUMP JUMPDEST PUSH2 0x22D DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x1241 DUP6 PUSH1 0x20 ADD MLOAD PUSH4 0x3B9ACA00 SUB PUSH2 0x123B DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD SUB DUP9 PUSH1 0x20 ADD MLOAD DUP9 SUB PUSH2 0x1B72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x4DC5 DUP8 DUP7 PUSH2 0x8E8 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x4DD7 SWAP1 DUP3 PUSH2 0xAB5 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE TIMESTAMP PUSH1 0xE0 DUP10 ADD MSTORE PUSH1 0x0 PUSH2 0x4DEE DUP9 DUP7 PUSH2 0x8E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4DFC DUP10 DUP10 PUSH2 0x8E8 JUMP JUMPDEST SWAP11 SWAP2 SWAP10 POP SWAP1 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x4E16 JUMPI PUSH2 0x24D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E22 DUP5 DUP5 PUSH2 0x4ED2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x4E31 JUMPI SWAP4 SWAP5 SWAP4 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP1 DUP8 AND CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP5 PUSH2 0x4E6B DUP8 PUSH2 0x146D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E79 SWAP3 SWAP2 SWAP1 PUSH2 0x58AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO DUP1 ISZERO PUSH2 0x4EA1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x4EAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP4 SWAP1 SHL AND PUSH1 0x8 DUP3 SWAP1 SHL OR PUSH1 0x1 OR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4EF8 PUSH2 0x544F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F02 PUSH2 0x4B3B JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 POP PUSH2 0x1D8 SWAP1 DUP3 PUSH2 0x506A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4F42 PUSH1 0x64 PUSH2 0x123B DUP8 PUSH1 0xE0 ADD MLOAD DUP8 PUSH2 0x1B72 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0xA0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x4F57 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD DUP2 GT ISZERO PUSH2 0x4F6A JUMPI POP PUSH1 0xC0 DUP5 ADD MLOAD JUMPDEST DUP3 ISZERO PUSH2 0x4F81 JUMPI PUSH2 0x4F7A DUP5 DUP3 PUSH2 0x21B JUMP JUMPDEST SWAP2 POP PUSH2 0x19E0 JUMP JUMPDEST DUP4 DUP2 GT PUSH2 0x4F90 JUMPI DUP1 DUP5 SUB PUSH2 0x126C JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x4FAA DUP5 DUP5 PUSH2 0x1B72 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x1B99 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4FC2 DUP6 DUP6 DUP6 PUSH2 0x5196 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4FE2 JUMPI PUSH2 0x4FDD PUSH2 0x4FD7 DUP6 DUP6 PUSH2 0x554 JUMP JUMPDEST DUP3 PUSH2 0x1275 JUMP JUMPDEST PUSH2 0x126C JUMP JUMPDEST PUSH4 0x3B9ACA00 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4FFE DUP6 DUP6 DUP6 PUSH2 0x51E6 JUMP JUMPDEST SWAP1 POP PUSH2 0x500D PUSH2 0x4FD7 DUP6 DUP6 PUSH2 0x554 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x501A DUP7 PUSH2 0x5227 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SLT ISZERO PUSH2 0x5028 JUMPI DUP1 SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 LT PUSH2 0x5040 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP3 GT ISZERO PUSH2 0x504E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x505F JUMPI PUSH1 0x4 DUP3 SUB PUSH2 0x5061 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 MUL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5072 PUSH2 0x544F JUMP JUMPDEST PUSH1 0x64 PUSH4 0x3B9ACA00 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x20 DUP2 LT PUSH2 0x5088 JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x5091 JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x64 PUSH4 0x3B9ACA00 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x1 ADD PUSH1 0x20 DUP2 LT PUSH2 0x50AD JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x50B6 JUMPI INVALID JUMPDEST DIV DUP2 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x50DB DUP3 PUSH1 0x2 DUP6 PUSH1 0xFF AND ADD PUSH1 0x20 DUP2 LT PUSH2 0x50D5 JUMPI INVALID JUMPDEST BYTE PUSH2 0x5242 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 SWAP1 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x3 ADD PUSH1 0x20 DUP2 LT PUSH2 0x50F8 JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x5101 JUMPI INVALID JUMPDEST DIV PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x100 SWAP1 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x4 ADD PUSH1 0x20 DUP2 LT PUSH2 0x5122 JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x512B JUMPI INVALID JUMPDEST DIV PUSH1 0x60 DUP3 ADD MSTORE PUSH3 0x7A120 DUP3 PUSH1 0xFF DUP6 AND PUSH1 0x5 ADD PUSH1 0x20 DUP2 LT PUSH2 0x5147 JUMPI INVALID JUMPDEST BYTE MUL PUSH1 0xA0 DUP3 ADD MSTORE PUSH3 0x2625A0 DUP3 PUSH1 0xFF DUP6 AND PUSH1 0x6 ADD PUSH1 0x20 DUP2 LT PUSH2 0x5164 JUMPI INVALID JUMPDEST BYTE MUL PUSH1 0xC0 DUP3 ADD MSTORE DUP2 PUSH1 0xFF DUP5 AND PUSH1 0x7 ADD PUSH1 0x20 DUP2 LT PUSH2 0x517D JUMPI INVALID JUMPDEST BYTE PUSH1 0xE0 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH1 0x18 SHR PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51A3 DUP5 DUP5 DUP5 PUSH2 0x733 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x51B0 DUP6 PUSH2 0x5276 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT PUSH2 0x51C3 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1D8 JUMP JUMPDEST DUP1 DUP3 SUB SWAP2 POP PUSH1 0x0 PUSH2 0x51D3 DUP7 PUSH2 0x5283 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x5028 JUMPI SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51F3 DUP5 DUP5 DUP5 PUSH2 0x733 JUMP JUMPDEST SWAP1 POP PUSH2 0x5208 PUSH2 0x5201 DUP6 PUSH2 0x5290 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x21B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5215 DUP6 PUSH2 0x529D JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT ISZERO PUSH2 0x19E0 JUMPI SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH3 0x7A120 PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL PUSH4 0x3B9ACA00 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH1 0x96 LT PUSH2 0x525D JUMPI PUSH1 0xFF DUP3 AND PUSH3 0x2625A0 MUL PUSH2 0x230 JUMP JUMPDEST POP PUSH1 0x95 NOT PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND ADD PUSH3 0xE4E1C0 MUL PUSH4 0x165A0BC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230 DUP3 PUSH1 0x20 PUSH2 0x52A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230 DUP3 PUSH1 0x48 PUSH2 0x52A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230 DUP3 PUSH1 0x28 PUSH2 0x52A6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230 DUP3 PUSH1 0x30 JUMPDEST PUSH1 0x60 SWAP1 SWAP2 ADD MLOAD PUSH1 0xFF SWAP2 SHR AND PUSH3 0x2625A0 MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x52CC PUSH2 0x534A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x52D9 PUSH2 0x5376 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x5369 PUSH2 0x53E2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x53DD JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x54BA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x54D0 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH2 0x54DE PUSH1 0x20 DUP6 ADD PUSH2 0x5494 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54FF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x22D DUP3 PUSH2 0x5494 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x551A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x555A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x553E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x55DE PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x552B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x126C DUP2 DUP6 PUSH2 0x552B JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x2232B632BB32B930B3B290213AB33332B9 PUSH1 0x79 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x14995C5D5A5C995CC81CD95D1D1B195B595B9D PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x4E6F20636F6E76657267656E6365 PUSH1 0x90 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081D1BDAD95B88185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x9CCACEC2E8D2ECCA40E4CAE6D2C8EAC2D840C6C2E6D PUSH1 0x53 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A59081B585C9AD95D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x50543A20696E76616C6964206C697175696469747920746F6B656E0000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x4D3A207A65726F206C6971756964697479 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x13DD995C8813585C9AD95D08131A5B5A5D PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x13DD995C8811195D9A585D1A5BDB88131A5B5A5D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 AND 0x1F DUP16 PUSH7 0xD17FA1834F5EBF 0xD8 SWAP13 0xD4 DUP1 DUP1 SWAP13 PUSH1 0xBD SWAP1 PUSH18 0xB3AD4FE55FD5485E103C64736F6C63430007 MOD STOP CALLER ", "sha1": "11c1d790e9b188183cff69ed4dcb258374102bc6", "source": "// SPDX-License-Identifier: BSUL-1.1\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {\n    PrimeRate,\n    BalanceState,\n    CashGroupParameters,\n    MarketParameters,\n    nTokenPortfolio,\n    PortfolioState,\n    PortfolioAsset,\n    AssetStorageState,\n    InterestRateParameters\n} from \"../../global/Types.sol\";\nimport {Constants} from \"../../global/Constants.sol\";\nimport {SafeInt256} from \"../../math/SafeInt256.sol\";\nimport {SafeUint256} from \"../../math/SafeUint256.sol\";\nimport {Bitmap} from \"../../math/Bitmap.sol\";\n\nimport {Emitter} from \"../../internal/Emitter.sol\";\nimport {DateTime} from \"../../internal/markets/DateTime.sol\";\nimport {nTokenHandler} from \"../../internal/nToken/nTokenHandler.sol\";\nimport {nTokenCalculations} from \"../../internal/nToken/nTokenCalculations.sol\";\nimport {InterestRateCurve} from \"../../internal/markets/InterestRateCurve.sol\";\nimport {Market} from \"../../internal/markets/Market.sol\";\nimport {CashGroup} from \"../../internal/markets/CashGroup.sol\";\nimport {PrimeRateLib} from \"../../internal/pCash/PrimeRateLib.sol\";\nimport {BalanceHandler} from \"../../internal/balances/BalanceHandler.sol\";\nimport {PortfolioHandler} from \"../../internal/portfolio/PortfolioHandler.sol\";\nimport {BitmapAssetsHandler} from \"../../internal/portfolio/BitmapAssetsHandler.sol\";\nimport {AssetHandler} from \"../../internal/valuation/AssetHandler.sol\";\n\nlibrary nTokenMintAction {\n    using Bitmap for bytes32;\n    using SafeInt256 for int256;\n    using SafeUint256 for uint256;\n    using BalanceHandler for BalanceState;\n    using CashGroup for CashGroupParameters;\n    using Market for MarketParameters;\n    using nTokenHandler for nTokenPortfolio;\n    using PortfolioHandler for PortfolioState;\n    using PrimeRateLib for PrimeRate;\n\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\n\n    /// @notice Converts the given amount of cash to nTokens in the same currency.\n    /// @param currencyId the currency associated the nToken\n    /// @param primeCashToDeposit the amount of asset tokens to deposit denominated in internal decimals\n    /// @return nTokens minted by this action\n    function nTokenMint(address account, uint16 currencyId, int256 primeCashToDeposit) external returns (int256) {\n        return _nTokenMint(account, currencyId, primeCashToDeposit);\n    }\n\n    function sweepCashIntoMarkets(uint16 currencyId) external {\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        require(nToken.portfolioState.storedAssets.length > 0);\n\n        // Can only sweep cash after markets have been initialized\n        uint256 referenceTime = DateTime.getReferenceTime(block.timestamp);\n        require(nToken.lastInitializedTime >= referenceTime);\n\n        // Can only sweep cash after the residual purchase time has passed\n        uint256 minSweepCashTime =\n            nToken.lastInitializedTime.add(\n                uint256(uint8(nToken.parameters[Constants.RESIDUAL_PURCHASE_TIME_BUFFER])) * 1 hours\n            );\n        require(block.timestamp > minSweepCashTime);\n\n        int256 primeCashWithholding = getNTokenNegativefCashWithholding(\n            nToken,\n            new MarketParameters[](0), // Parameter is unused when referencing current markets\n            block.timestamp\n        );\n\n        int256 cashIntoMarkets = nToken.cashBalance.subNoNeg(primeCashWithholding);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            nToken.cashGroup.currencyId,\n            primeCashWithholding\n        );\n\n        // This will deposit the cash balance into markets, but will not record a token supply change.\n        _nTokenMint(nToken.tokenAddress, currencyId, cashIntoMarkets);\n        emit SweepCashIntoMarkets(currencyId, cashIntoMarkets);\n    }\n\n    function _nTokenMint(address account, uint16 currencyId, int256 primeCashToDeposit) internal returns (int256) {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n\n        int256 tokensToMint = nTokenCalculations.calculateTokensToMint(nToken, primeCashToDeposit, blockTime);\n        require(tokensToMint >= 0, \"Invalid token amount\");\n\n        if (nToken.portfolioState.storedAssets.length == 0) {\n            // If the token does not have any assets, then the markets must be initialized first.\n            nToken.cashBalance = nToken.cashBalance.add(primeCashToDeposit);\n            BalanceHandler.setBalanceStorageForNToken(\n                nToken.tokenAddress,\n                currencyId,\n                nToken.cashBalance\n            );\n        } else {\n            _depositIntoPortfolio(nToken, primeCashToDeposit, blockTime);\n        }\n\n        if (account != nToken.tokenAddress) {\n            // If account == nToken.tokenAddress, this is due to a call to sweepCashIntoMarkets\n            // and there will be no net nToken supply change.\n            Emitter.emitNTokenMint(account, nToken.tokenAddress, currencyId, primeCashToDeposit, tokensToMint);\n        }\n\n        // NOTE: token supply does not change here, it will change after incentives have been claimed\n        // during BalanceHandler.finalize\n        return tokensToMint;\n    }\n\n    /// @notice Portions out primeCashDeposit into amounts to deposit into individual markets. When\n    /// entering this method we know that primeCashDeposit is positive and the nToken has been\n    /// initialized to have liquidity tokens.\n    function _depositIntoPortfolio(\n        nTokenPortfolio memory nToken,\n        int256 primeCashDeposit,\n        uint256 blockTime\n    ) private {\n        (int256[] memory depositShares, int256[] memory leverageThresholds) =\n            nTokenHandler.getDepositParameters(\n                nToken.cashGroup.currencyId,\n                nToken.cashGroup.maxMarketIndex\n            );\n\n        // Loop backwards from the last market to the first market, the reasoning is a little complicated:\n        // If we have to deleverage the markets (i.e. lend instead of provide liquidity) it's quite gas inefficient\n        // to calculate the cash amount to lend. We do know that longer term maturities will have more\n        // slippage and therefore the residual from the perMarketDeposit will be lower as the maturities get\n        // closer to the current block time. Any residual cash from lending will be rolled into shorter\n        // markets as this loop progresses.\n        int256 residualCash;\n        MarketParameters memory market;\n        for (uint256 marketIndex = nToken.cashGroup.maxMarketIndex; marketIndex > 0; marketIndex--) {\n            int256 fCashAmount;\n            // Loads values into the market memory slot\n            nToken.cashGroup.loadMarket(\n                market,\n                marketIndex,\n                true, // Needs liquidity to true\n                blockTime\n            );\n            // If market has not been initialized, continue. This can occur when cash groups extend maxMarketIndex\n            // before initializing\n            if (market.totalLiquidity == 0) continue;\n\n            // Checked that primeCashDeposit must be positive before entering\n            int256 perMarketDeposit =\n                primeCashDeposit\n                    .mul(depositShares[marketIndex - 1])\n                    .div(Constants.DEPOSIT_PERCENT_BASIS)\n                    .add(residualCash);\n\n            (fCashAmount, residualCash) = _lendOrAddLiquidity(\n                nToken,\n                market,\n                perMarketDeposit,\n                leverageThresholds[marketIndex - 1],\n                marketIndex,\n                blockTime\n            );\n\n            if (fCashAmount != 0) {\n                BitmapAssetsHandler.addifCashAsset(\n                    nToken.tokenAddress,\n                    nToken.cashGroup.currencyId,\n                    market.maturity,\n                    nToken.lastInitializedTime,\n                    fCashAmount\n                );\n            }\n        }\n\n        // nToken is allowed to store assets directly without updating account context.\n        nToken.portfolioState.storeAssets(nToken.tokenAddress);\n\n        // Defensive check to ensure that we do not somehow accrue negative residual cash.\n        require(residualCash >= 0, \"Negative residual cash\");\n        if (residualCash > 0) {\n            // Any residual cash is donated to the fee reserve rather than the nToken. Because of\n            // the restrictions inside the deleverage buffer, this residual cash amount will be\n            // only dust balances. Fuzz testing shows that this amount never exceeds 100 units per\n            // market that has been deleveraged.\n            BalanceHandler.incrementFeeToReserve(nToken.cashGroup.currencyId, residualCash);\n        }\n    }\n\n    /// @notice For a given amount of cash to deposit, decides how much to lend or provide\n    /// given the market conditions.\n    function _lendOrAddLiquidity(\n        nTokenPortfolio memory nToken,\n        MarketParameters memory market,\n        int256 perMarketDeposit,\n        int256 leverageThreshold,\n        uint256 marketIndex,\n        uint256 blockTime\n    ) private returns (int256 fCashAmount, int256 residualCash) {\n        // We start off with the entire per market deposit as residuals\n        residualCash = perMarketDeposit;\n\n        // If the market is over leveraged then we will lend to it instead of providing liquidity\n        if (_isMarketOverLeveraged(nToken.cashGroup, market, leverageThreshold)) {\n            (residualCash, fCashAmount) = _deleverageMarket(\n                nToken.cashGroup,\n                market,\n                perMarketDeposit,\n                blockTime,\n                marketIndex,\n                nToken.tokenAddress\n            );\n\n            // Recalculate this after lending into the market, if it is still over leveraged then\n            // we will not add liquidity and just exit.\n            if (_isMarketOverLeveraged(nToken.cashGroup, market, leverageThreshold)) {\n                // Returns the residual cash amount\n                return (fCashAmount, residualCash);\n            }\n        }\n\n        // Add liquidity to the market only if we have successfully delevered.\n        // (marketIndex - 1) is the index of the nToken portfolio array where the asset is stored\n        // If deleveraged, residualCash is what remains\n        // If not deleveraged, residual cash is per market deposit\n        fCashAmount = fCashAmount.add(\n            _addLiquidityToMarket(nToken, market, marketIndex - 1, residualCash)\n        );\n        // No residual cash if we're adding liquidity\n        return (fCashAmount, 0);\n    }\n\n    /// @notice Markets are over levered when their proportion is greater than a governance set\n    /// threshold. At this point, providing liquidity will incur too much negative fCash on the nToken\n    /// account for the given amount of cash deposited, putting the nToken account at risk of liquidation.\n    /// If the market is over leveraged, we call `deleverageMarket` to lend to the market instead.\n    function _isMarketOverLeveraged(\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        int256 leverageThreshold\n    ) private pure returns (bool) {\n        int256 totalCashUnderlying = cashGroup.primeRate.convertToUnderlying(market.totalPrimeCash);\n        // Comparison we want to do:\n        // (totalfCash) / (totalfCash + totalCashUnderlying) > leverageThreshold\n        // However, the division will introduce rounding errors so we change this to:\n        // totalfCash * RATE_PRECISION > leverageThreshold * (totalfCash + totalCashUnderlying)\n        // Leverage threshold is denominated in rate precision.\n        return (\n            market.totalfCash.mul(Constants.RATE_PRECISION) >\n            leverageThreshold.mul(market.totalfCash.add(totalCashUnderlying))\n        );\n    }\n\n    function _addLiquidityToMarket(\n        nTokenPortfolio memory nToken,\n        MarketParameters memory market,\n        uint256 index,\n        int256 perMarketDeposit\n    ) private returns (int256) {\n        // Add liquidity to the market\n        PortfolioAsset memory asset = nToken.portfolioState.storedAssets[index];\n        // We expect that all the liquidity tokens are in the portfolio in order.\n        require(\n            asset.maturity == market.maturity &&\n            // Ensures that the asset type references the proper liquidity token\n            asset.assetType == index + Constants.MIN_LIQUIDITY_TOKEN_INDEX &&\n            // Ensures that the storage state will not be overwritten\n            asset.storageState == AssetStorageState.NoChange,\n            \"PT: invalid liquidity token\"\n        );\n\n        // This will update the market state as well, fCashAmount returned here is negative\n        (int256 liquidityTokens, int256 fCashAmount) = market.addLiquidity(perMarketDeposit);\n        asset.notional = asset.notional.add(liquidityTokens);\n        asset.storageState = AssetStorageState.Update;\n        return fCashAmount;\n    }\n\n    /// @notice Lends into the market to reduce the leverage that the nToken will add liquidity at. May fail due\n    /// to slippage or result in some amount of residual cash.\n    function _deleverageMarket(\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        int256 perMarketDeposit,\n        uint256 blockTime,\n        uint256 marketIndex,\n        address tokenAddress\n    ) private returns (int256, int256) {\n        uint256 timeToMaturity = market.maturity.sub(blockTime);\n        int256 fCashAmount;\n        {\n            // Shift the last implied rate by some buffer and calculate the exchange rate to fCash. Hope that this\n            // is sufficient to cover all potential slippage. We don't use the `getfCashGivenCashAmount` method here\n            // because it is very gas inefficient.\n            int256 assumedExchangeRate;\n            if (market.lastImpliedRate < Constants.DELEVERAGE_BUFFER) {\n                // Floor the exchange rate at zero interest rate\n                assumedExchangeRate = Constants.RATE_PRECISION;\n            } else {\n                assumedExchangeRate = InterestRateCurve.getfCashExchangeRate(\n                    market.lastImpliedRate.sub(Constants.DELEVERAGE_BUFFER),\n                    timeToMaturity\n                );\n            }\n\n            int256 perMarketDepositUnderlying =\n                cashGroup.primeRate.convertToUnderlying(perMarketDeposit);\n            // NOTE: cash * exchangeRate = fCash\n            int256 fCashAmountAssumed = perMarketDepositUnderlying.mulInRatePrecision(assumedExchangeRate);\n            fCashAmount = _getActualfCashAmount(\n                cashGroup, market, marketIndex, timeToMaturity, perMarketDepositUnderlying\n            );\n\n            // fCash amount actual cannot be negative or zero. Negative would represent something very wrong\n            // since we are lending here. Zero would represent a failed trade.\n            require(0 < fCashAmount, \"Deleverage Buffer\");\n\n            // If the actual slippage is greater than the DELEVERAGE_BUFFER than we want to revert here to\n            // prevent a massive amount of lending occurring on the nToken. The DELEVERAGE_BUFFER exists to\n            // dampen the valuation swings the nToken will see in a single transaction. fCashAssumed represents\n            // the fCash amount at DELEVERAGE_BUFFER slippage, so this is the the minimum amount of fCash\n            // that we can purchase given the deposit amount.\n            require(fCashAmountAssumed <= fCashAmount, \"Deleverage Buffer\");\n        }\n\n        (int256 netPrimeCash, /* */) = market.executeTrade(\n            tokenAddress, cashGroup, fCashAmount, timeToMaturity, marketIndex\n        );\n\n        // This means that the trade failed. We do not allowed failed trades in this method. This should\n        // never occur due to the require statements above, but this is a safety check.\n        require(netPrimeCash < 0);\n\n        // Ensure that net the per market deposit figure does not drop below zero, this should not be possible\n        // given how we've calculated the exchange rate but extra caution here\n        int256 residual = perMarketDeposit.add(netPrimeCash);\n\n        // The residual remaining should never be more than a dust amount due to how the fCashAmount is\n        // calculated above.\n        require(0 <= residual && residual < 500, \"Deleverage Buffer\");\n        return (residual, fCashAmount);\n    }\n\n    /// @notice Returns the amount of fCash that will be purchased for the given per market deposit, is used\n    /// to reduce the potential of residual cash as a result of lending during deleverage.\n    function _getActualfCashAmount(\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        uint256 marketIndex,\n        uint256 timeToMaturity,\n        int256 perMarketDepositUnderlying\n    ) private returns (int256) {\n        InterestRateParameters memory irParams = InterestRateCurve.getActiveInterestRateParameters(\n            cashGroup.currencyId, marketIndex\n        );\n\n        return InterestRateCurve.getfCashGivenCashAmount(\n            irParams,\n            market.totalfCash,\n            // Negative is used for lending, will return a positive fCash amount\n            perMarketDepositUnderlying.neg(),\n            cashGroup.primeRate.convertToUnderlying(market.totalPrimeCash),\n            timeToMaturity\n        );\n    }\n\n    /// @notice If a nToken incurs a negative fCash residual as a result of lending, this means\n    /// that we are going to need to withhold some amount of cash so that market makers can purchase and\n    /// clear the debts off the balance sheet.\n    function getNTokenNegativefCashWithholding(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime\n    ) internal view returns (int256 totalCashWithholding) {\n        bytes32 assetsBitmap = BitmapAssetsHandler.getAssetsBitmap(nToken.tokenAddress, nToken.cashGroup.currencyId);\n        // This buffer is denominated in rate precision with 10 basis point increments. It is used to shift the\n        // withholding rate to ensure that sufficient cash is withheld for negative fCash balances.\n        uint256 oracleRateBuffer =\n            uint256(uint8(nToken.parameters[Constants.CASH_WITHHOLDING_BUFFER])) * Constants.TEN_BASIS_POINTS;\n        // If previousMarkets are supplied, then we are in initialize markets and we want to get the oracleRate\n        // from the perspective of the previous tRef (represented by blockTime - QUARTER). The reason is that the\n        // oracleRates for the current markets have not been set yet (we are in the process of calculating them\n        // in this contract). In the other case, we are in sweepCashIntoMarkets and we can use the current block time.\n        uint256 oracleRateBlockTime = previousMarkets.length == 0 ? blockTime : blockTime.sub(Constants.QUARTER);\n\n        uint256 bitNum = assetsBitmap.getNextBitNum();\n        while (bitNum != 0) {\n            // lastInitializedTime is now the reference point for all ifCash bitmap\n            uint256 maturity = DateTime.getMaturityFromBitNum(nToken.lastInitializedTime, bitNum);\n            bool isValidMarket = DateTime.isValidMarketMaturity(\n                nToken.cashGroup.maxMarketIndex,\n                maturity,\n                blockTime\n            );\n\n            // Only apply withholding for idiosyncratic fCash\n            if (!isValidMarket) {\n                int256 notional =\n                    BitmapAssetsHandler.getifCashNotional(\n                        nToken.tokenAddress,\n                        nToken.cashGroup.currencyId,\n                        maturity\n                    );\n\n                // Withholding only applies for negative cash balances\n                if (notional < 0) {\n                    // Oracle rates are calculated from the perspective of the previousMarkets during initialize\n                    // markets here. It is possible that these oracle rates do not equal the oracle rates when we\n                    // exit this method, this can happen if the nToken is above its leverage threshold. In that case\n                    // this oracleRate will be higher than what we have when we exit, causing the nToken to withhold\n                    // less cash than required. The NTOKEN_CASH_WITHHOLDING_BUFFER must be sufficient to cover this\n                    // potential shortfall.\n                    uint256 oracleRate = nToken.cashGroup.calculateOracleRate(maturity, oracleRateBlockTime);\n\n                    if (oracleRateBuffer > oracleRate) {\n                        oracleRate = 0;\n                    } else {\n                        oracleRate = oracleRate.sub(oracleRateBuffer);\n                    }\n\n                    totalCashWithholding = totalCashWithholding.sub(\n                        AssetHandler.getPresentfCashValue(notional, maturity, blockTime, oracleRate)\n                    );\n                }\n            }\n\n            // Turn off the bit and look for the next one\n            assetsBitmap = assetsBitmap.setBit(bitNum, false);\n            bitNum = assetsBitmap.getNextBitNum();\n        }\n\n        return nToken.cashGroup.primeRate.convertFromUnderlying(totalCashWithholding);\n    }\n}", "sourceMap": "1376:20028:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/nTokenMintAction.sol", "type": "library", "deployment": {"address": "0x10A639500AF69F5acCB4B6aE806c99997f53aD03", "chainid": "42161", "blockHeight": 225711714}}